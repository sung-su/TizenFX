/// @file GLSurfaceViewBindableProperty.cs
/// <published> N </published>
/// <privlevel> Non-privilege </privlevel>
/// <privilege> None </privilege> 
/// <privacy> N </privacy>
/// <product> TV </product>
/// <version> 6.6.0 </version>
/// <SDK_Support> Y </SDK_Support>
/// 
/// Copyright (c) 2019 Samsung Electronics Co., Ltd All Rights Reserved
/// PROPRIETARY/CONFIDENTIAL 
/// This software is the confidential and proprietary
/// information of SAMSUNG ELECTRONICS ("Confidential Information"). You shall
/// not disclose such Confidential Information and shall use it only in
/// accordance with the terms of the license agreement you entered into with
/// SAMSUNG ELECTRONICS. SAMSUNG make no representations or warranties about the
/// suitability of the software, either express or implied, including but not
/// limited to the implied warranties of merchantability, fitness for a
/// particular purpose, or non-infringement. SAMSUNG shall not be liable for any
/// damages suffered by licensee as a result of using, modifying or distributing
/// this software or its derivatives.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Tizen.NUI.Binding;

namespace Tizen.NUI.FLUX
{
    /// <summary>
    /// GLSurfaceView allows user OpenGL rendering in separate Thread.
    /// </summary>
    /// <code>
    /// Implement Renderer Interface 
    /// class Renderer : IGLSurfaceViewRenderer
    /// {
    ///     public void Initialize(uint width, uint height){}
    ///     public void Draw(){ }
    ///     public void Terminate(){}
    /// }
    /// 
    /// Create GLSurfaceView
    /// glSurfaceView = new GLSurfaceView(800, 800);
    /// Renderer rend = new Renderer();
    /// glSurfaceView.SetRenderer(rend);
    /// glSurfaceView.RenderingMode = RenderMode.Continuous;
    /// glSurfaceView.GLContentResizingMode = GLContentResizeMode.Static;
    /// parent.Add(glSurfaceView);
    /// 
    /// </code>
    public partial class GLSurfaceView : FluxView
    {

        /// <summary>
        /// BindableProperty for RenderingMode, it's used as an argument of SetBinding API to bind a value to GLSurfaceView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty RenderingModeProperty = BindableProperty.Create(nameof(RenderingMode), typeof(RenderMode), typeof(GLSurfaceView), (typeof(RenderMode).IsValueType ? Activator.CreateInstance(typeof(RenderMode)) : null),
        propertyChanged: (bindable, oldValue, newValue) =>
       {
           var target = (GLSurfaceView)bindable;
           if (newValue != null)
           {
               target.privateRenderingMode = (RenderMode)newValue;
           }
       },
        defaultValueCreator: (bindable) =>
        {
            var target = (GLSurfaceView)bindable;
            return target.privateRenderingMode;
        });

        /// <summary>
        /// BindableProperty for GL Content Resizing Mode, it's used as an argument of SetBinding API to bind a value to GLSurfaceView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty GLContentResizingModeProperty = BindableProperty.Create(nameof(GLContentResizingMode), typeof(GLContentResizeMode), typeof(GLSurfaceView), (typeof(GLContentResizeMode).IsValueType ? Activator.CreateInstance(typeof(GLContentResizeMode)) : null),
        propertyChanged: (bindable, oldValue, newValue) =>
        {
            var target = (GLSurfaceView)bindable;
            if (newValue != null)
            {
                target.privateGLContentResizingMode = (GLContentResizeMode)newValue;
            }
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (GLSurfaceView)bindable;
            return target.privateGLContentResizingMode;
        });
    }
}
