/// @file BlurViewBindableProperty.cs
/// <published> N </published>
/// <privlevel> Non-privilege </privlevel>
/// <privilege> None </privilege> 
/// <privacy> N </privacy>
/// <product> TV </product>
/// <version> 8.8.0 </version>
/// <SDK_Support> Y </SDK_Support>
/// 
/// Copyright (c) 2020 Samsung Electronics Co., Ltd All Rights Reserved
/// PROPRIETARY/CONFIDENTIAL 
/// This software is the confidential and proprietary
/// information of SAMSUNG ELECTRONICS ("Confidential Information"). You shall
/// not disclose such Confidential Information and shall use it only in
/// accordance with the terms of the license agreement you entered into with
/// SAMSUNG ELECTRONICS. SAMSUNG make no representations or warranties about the
/// suitability of the software, either express or implied, including but not
/// limited to the implied warranties of merchantability, fitness for a
/// particular purpose, or non-infringement. SAMSUNG shall not be liable for any
/// damages suffered by licensee as a result of using, modifying or distributing
/// this software or its derivatives.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Tizen.NUI;
using Tizen.NUI.Binding;

namespace Tizen.NUI.FLUX
{

    /// <summary>
    /// BlurView allows user to blur Video or Graphic Content under the area
    /// </summary>
    /// <code>
    /// Create BlurView
    /// blurView = new BlurView(BlurType.Dynamic);
    /// blurView.UnitPosition = new UnitPosition(50, 50);
    /// blurView.UnitSizeWidth = 50;
    /// blurView.UnitSizeHeight = 50;
    /// blurView.AlternativeImageURL = CommonResource.GetLocalResourceURL() + "alter-img.jpg";
    /// blurView.AlphaMaskUrl = CommonResource.GetLocalResourceURL() + "AlphaMask.png";
    /// Window.Instance.GetDefaultLayer().Add(blurView);
    /// blurView.Activate();
    /// blurView.Pause();
    /// blurView.Resume();
    /// blurView.Deactivate();
    /// </code>
    public partial class BlurView : FluxView
    {

        /// <summary>
        /// BindableProperty for BlurType, it's used as an argument of SetBinding API to bind a value to BlurView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty BlurTypeProperty = BindableProperty.Create(nameof(BlurType), typeof(BlurViewType), typeof(BlurView), (typeof(BlurViewType).IsValueType ? Activator.CreateInstance(typeof(BlurViewType)) : null),
        propertyChanged: (bindable, oldValue, newValue) =>
        {
            var target = (BlurView)bindable;
            if (newValue != null)
            {
                target.privateBlurType = (BlurViewType)newValue;
            }
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (BlurView)bindable;
            return target.privateBlurType;
        });

        /// <summary>
        /// BindableProperty for BlurStyle, it's used as an argument of SetBinding API to bind a value to BlurView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty BlurStyleProperty = BindableProperty.Create(nameof(BlurStyle), typeof(BlurViewStyle), typeof(BlurView), (typeof(BlurViewStyle).IsValueType ? Activator.CreateInstance(typeof(BlurViewStyle)) : null),
        propertyChanged: (bindable, oldValue, newValue) =>
        {
            var target = (BlurView)bindable;
            if (newValue != null)
            {
                target.privateBlurStyle = (BlurViewStyle)newValue;
            }
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (BlurView)bindable;
            return target.privateBlurStyle;
        });

        /// <summary>
        /// BindableProperty for AlternativeResourceUrl, it's used as an argument of SetBinding API to bind a value to BlurView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty AlternativeResourceUrlProperty = BindableProperty.Create(nameof(AlternativeResourceUrl), typeof(string), typeof(BlurView), (typeof(string).IsValueType ? Activator.CreateInstance(typeof(string)) : null),
        propertyChanged: (bindable, oldValue, newValue) =>
        {
            var target = (BlurView)bindable;
            string url = (string)newValue;
            target.privateAlternativeResourceUrl = url ?? "";
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (BlurView)bindable;
            return target.privateAlternativeResourceUrl;
        });

        /// <summary>
        /// BindableProperty for AlphaMaskUrl, it's used as an argument of SetBinding API to bind a value to BlurView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty AlphaMaskUrlProperty = BindableProperty.Create(nameof(AlphaMaskUrl), typeof(string), typeof(BlurView), (typeof(string).IsValueType ? Activator.CreateInstance(typeof(string)) : null),
        propertyChanged: (bindable, oldValue, newValue) =>
        {
            var target = (BlurView)bindable;
            string url = (string)newValue;
            target.privateAlphaMaskUrl = url ?? "";
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (BlurView)bindable;
            return target.privateAlphaMaskUrl;
        });

        /// <summary>
        /// BindableProperty for Alternative Dim color, it's used as an argument of SetBinding API to bind a value to BlurView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty AlternativeDimColorProperty = BindableProperty.Create(nameof(AlternativeDimColor), typeof(Color), typeof(BlurView), (typeof(Color).IsValueType ? Activator.CreateInstance(typeof(Color)) : null),
        propertyChanged: (bindable, oldValue, newValue) =>
        {
            var target = (BlurView)bindable;
            if (newValue != null)
            {
                target.privateAlternativeDimColor = (Color)newValue;
            }
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (BlurView)bindable;
            return target.privateAlternativeDimColor;
        });

        /// <summary>
        /// BindableProperty for Dimming Level, it's used as an argument of SetBinding API to bind a value to BlurView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>10.10.0</version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty DimmingLevelProperty = BindableProperty.Create(nameof(DimmingLevel), typeof(float), typeof(BlurView), (typeof(float).IsValueType ? Activator.CreateInstance(typeof(float)) : null),
        propertyChanged: (bindable, oldValue, newValue) =>
        {
            var target = (BlurView)bindable;
            if (newValue != null)
            {
                target.privateDimmingLevel = (float)newValue;
            }
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (BlurView)bindable;
            return target.privateDimmingLevel;
        });
    }
}
