/// @file VideoImageViewBindableProperty.cs
/// <published> N </published>
/// <privlevel> Non-privilege </privlevel>
/// <privilege> None </privilege> 
/// <privacy> N </privacy>
/// <product> TV </product>
/// <version> 6.6.0 </version>
/// <SDK_Support> Y </SDK_Support>
/// 
/// Copyright (c) 2019 Samsung Electronics Co., Ltd All Rights Reserved
/// PROPRIETARY/CONFIDENTIAL 
/// This software is the confidential and proprietary
/// information of SAMSUNG ELECTRONICS ("Confidential Information"). You shall
/// not disclose such Confidential Information and shall use it only in
/// accordance with the terms of the license agreement you entered into with
/// SAMSUNG ELECTRONICS. SAMSUNG make no representations or warranties about the
/// suitability of the software, either express or implied, including but not
/// limited to the implied warranties of merchantability, fitness for a
/// particular purpose, or non-infringement. SAMSUNG shall not be liable for any
/// damages suffered by licensee as a result of using, modifying or distributing
/// this software or its derivatives.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Tizen.NUI.Binding;

namespace Tizen.NUI.FLUX
{

    /// <summary>
    /// This is VideoImageView which allows user to do video texturing. 
    /// </summary>
    /// <code>
    /// videoImageView = new VideoImageView();
    /// videoImageView.Size2D = new Size2D(400, 300);
    /// videoImageView.Position = new Position(100, 100, 0);  
    /// mPlayer = new Player();
    /// mPlayer.SetSource(new MediaUriSource("The_Power_of_Teamwork.mp4"));
    /// mPlayer.PrepareAsync().Wait();
    /// videoView.SetPlayerHandle(mPlayer.GetType(), mPlayer.Handle);
    /// </code>
    /// <code>
    /// videoImageViewTVPlayer = new VideoImageView()
    /// videoImageViewTVPlayer.SetBuiltinPlayer(PlayerType.TVPLAYER);
    /// videoImageViewTVPlayer.HorizontalFlip = true;
    /// videoImageViewTVPlayer.VerticalFlip = true;
    /// </code> 
    public partial class VideoImageView : FluxView
    {

        /// <summary>
        /// BindableProperty for HorizontalFlip, it's used as an argument of SetBinding API to bind a value to VideoImageView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty HorizontalFlipProperty = BindableProperty.Create(nameof(HorizontalFlip), typeof(bool), typeof(VideoImageView), (typeof(bool).IsValueType ? Activator.CreateInstance(typeof(bool)) : null), 
        propertyChanged : (bindable, oldValue, newValue) =>
        {
            var target = (VideoImageView)bindable;
            if (newValue != null)
            {
               target.privateHorizontalFlip = (bool)newValue;
            }
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (VideoImageView)bindable;
            return target.privateHorizontalFlip;
        });

        /// <summary>
        /// BindableProperty for VerticalFlip, it's used as an argument of SetBinding API to bind a value to VideoImageView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static readonly BindableProperty VerticalFlipProperty = BindableProperty.Create(nameof(VerticalFlip), typeof(bool), typeof(VideoImageView), (typeof(bool).IsValueType ? Activator.CreateInstance(typeof(bool)) : null), 
        propertyChanged : (bindable, oldValue, newValue) =>
        {
            var target = (VideoImageView)bindable;
            if (newValue != null)
            {
               target.privateVerticalFlip = (bool)newValue;
            }
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (VideoImageView)bindable;
            return target.privateVerticalFlip;
        });
    }
}
