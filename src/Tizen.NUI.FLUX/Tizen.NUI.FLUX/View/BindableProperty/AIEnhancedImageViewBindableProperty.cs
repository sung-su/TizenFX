/// @file AIEnhancedImageViewBindableProperty.cs
/// <published> N </published>
/// <privlevel> Non-privilege </privlevel>
/// <privilege> None </privilege> 
/// <privacy> N </privacy>
/// <product> TV </product>
/// <version> 8.8.0 </version>
/// <SDK_Support> Y </SDK_Support>
///     
/// Copyright (c) 2020 Samsung Electronics Co., Ltd All Rights Reserved
/// PROPRIETARY/CONFIDENTIAL 
/// This software is the confidential and proprietary
/// information of SAMSUNG ELECTRONICS ("Confidential Information"). You shall
/// not disclose such Confidential Information and shall use it only in
/// accordance with the terms of the license agreement you entered into with
/// SAMSUNG ELECTRONICS. SAMSUNG make no representations or warranties about the
/// suitability of the software, either express or implied, including but not
/// limited to the implied warranties of merchantability, fitness for a
/// particular purpose, or non-infringement. SAMSUNG shall not be liable for any
/// damages suffered by licensee as a result of using, modifying or distributing
/// this software or its derivatives.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Tizen.NUI.Binding;

namespace Tizen.NUI.FLUX
{

    /// <summary>
    /// AIEnhancedImageView enable user to apply different PictureEnhancer algorithm, 
    /// on provided image resource, and display it.
    /// </summary>
    /// <code>
    /// AIEnhancedImageView view = new AIEnhancedImageView(AIEnhancedImageView.PictureEnhancerType.OneToOneEnhancement, 1000);;
    /// view.ResourceUrl = CommonResource.GetLocalResourceURL() + "gallery-4.jpg";
    /// </code>
    public partial class AIEnhancedImageView : FluxImageView
    {

        /// <summary>
        /// BindableProperty for ResourceUrl, it's used as an argument of SetBinding API to bind a value to AIEnhancedImageView object
        /// This property need to be hidden as inhouse API.
        /// </summary>
        /// <version>
        /// 9.9.0
        /// </version>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
#pragma warning disable CS0108
        public static readonly BindableProperty ResourceUrlProperty = BindableProperty.Create(nameof(ResourceUrl), typeof(string), typeof(AIEnhancedImageView), (typeof(string).IsValueType ? Activator.CreateInstance(typeof(string)) : null),
#pragma warning restore CS0108
        propertyChanged: (bindable, oldValue, newValue) =>
        {
            var target = (AIEnhancedImageView)bindable;            
            string url = (string)newValue;            
            target.privateResourceUrl = url ?? "";            
        },
        defaultValueCreator: (bindable) =>
        {
            var target = (AIEnhancedImageView)bindable;
            return target.privateResourceUrl;
        });
    }
}
