<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tizen.Multimedia.Remoting</name>
    </assembly>
    <members>
        <member name="T:Tizen.Multimedia.Remoting.CommandCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.CommandCompleted"/> or
            <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.CommandCompleted"/>event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.CommandCompletedEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.CommandCompletedEventArgs"/> class.
            </summary>
            <param name="requestId">The request id for each command.</param>
            <param name="result">The result of commands.</param>
            <exception cref="T:System.ArgumentException"><paramref name="result"/> is not vailid.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="requestId"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.CommandCompletedEventArgs.#ctor(System.String,System.Int32,Tizen.Applications.Bundle)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.CommandCompletedEventArgs"/> class with extra data.
            </summary>
            <param name="requestId">The request id for each command.</param>
            <param name="result">The result of commands.</param>
            <param name="bundle">The extra data.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.CommandCompletedEventArgs.RequestId">
            <summary>
            Gets the request Id.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.CommandCompletedEventArgs.Result">
            <summary>
            Gets the result code for matched commands.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.CommandCompletedEventArgs.Bundle">
            <summary>
            Gets the extra data.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.CustomCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.CustomCommandReceived"/> or
            <see cref="E:Tizen.Multimedia.Remoting.MediaController.CustomCommandReceived"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.CustomCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.CustomCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.CustomCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The playback position command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.CustomCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.CustomCommand"/>.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.DisplayModeCapabilityUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.DisplayModeCapabilityUpdated"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.DisplayModeCapabilityUpdatedEventArgs.#ctor(System.Collections.Generic.IList{Tizen.Multimedia.Remoting.MediaControlDisplayMode})">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.DisplayModeCapabilityUpdatedEventArgs"/> class.
            </summary>
            <param name="mode">The supported list of display mode capabilities.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.DisplayModeCapabilityUpdatedEventArgs.DisplayMode">
            <summary>
            Gets the supported list of display mode capabilities.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.DisplayModeCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.DisplayModeCommandReceived"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.DisplayModeCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.DisplayModeCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.DisplayModeCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The display mode command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.DisplayModeCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.DisplayModeCommand"/>.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.DisplayModeUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.DisplayModeUpdated"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.DisplayModeUpdatedEventArgs.#ctor(Tizen.Multimedia.Remoting.MediaControlDisplayMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.DisplayModeUpdatedEventArgs"/> class.
            </summary>
            <param name="mode">A value indicating the updated display mode.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.DisplayModeUpdatedEventArgs.DisplayMode">
            <summary>
            Gets the updated display mode.
            </summary>
            <value>The <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/>.</value>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.DisplayRotationCapabilityUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.DisplayRotationCapabilityUpdated"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.DisplayRotationCapabilityUpdatedEventArgs.#ctor(System.Collections.Generic.IList{Tizen.Multimedia.Rotation})">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.DisplayRotationCapabilityUpdatedEventArgs"/> class.
            </summary>
            <param name="rotation">The list of supported display rotation capabilities.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.DisplayRotationCapabilityUpdatedEventArgs.DisplayRotation">
            <summary>
            Gets the supported list of display rotation capabilities.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.DisplayRotationCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.DisplayRotationCommandReceived"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.DisplayRotationCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.DisplayRotationCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.DisplayRotationCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The display rotation command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.DisplayRotationCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.DisplayRotationCommand"/>.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.DisplayRotationUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.DisplayRotationUpdated"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.DisplayRotationUpdatedEventArgs.#ctor(Tizen.Multimedia.Rotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.DisplayRotationUpdatedEventArgs"/> class.
            </summary>
            <param name="rotation">A value indicating the updated display rotation.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.DisplayRotationUpdatedEventArgs.Rotation">
            <summary>
            Gets the updated display rotation.
            </summary>
            <value>The <see cref="P:Tizen.Multimedia.Remoting.DisplayRotationUpdatedEventArgs.Rotation"/>.</value>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.Command">
            <summary>
            Provides a means to send command to media control server.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.Command.ReceiverId">
            <summary>
            The id for command receiver.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Command.#ctor">
            <summary>
            Initializes a <see cref="T:Tizen.Multimedia.Remoting.Command"/> base class.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Command.SetRequestInformation(System.String)">
            <summary>
            Sets the server information.
            </summary>
            <param name="receiverId">The receiver Id that receives command.</param>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Command.SetResponseInformation(System.String,System.String)">
            <summary>
            Sets the client information.
            </summary>
            <param name="receiverId">The receiver Id that receives response for command.</param>
            <param name="requestId">The request Id for each command.</param>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Command.Request(Interop.MediaControllerClientHandle)">
            <summary>
            Requests command to server.
            </summary>
            <returns>The request id for each command.</returns>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Command.Request(System.IntPtr)">
            <summary>
            Requests command to client.
            </summary>
            <param name="serverHandle"></param>
            <returns>The request id for each command.</returns>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Command.OnResponseCompleted">
            <summary>
            Represents a method that is called when an response command completes.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Command.Response(System.IntPtr,System.Int32,Tizen.Applications.Bundle)">
            <summary>
            Responses command to the client.
            </summary>
            <param name="serverHandle">The server handle.</param>
            <param name="result">The result of each command.</param>
            <param name="bundle">The extra data.</param>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Command.Response(Interop.MediaControllerClientHandle,System.Int32,Tizen.Applications.Bundle)">
            <summary>
            Responses command to the server.
            </summary>
            <param name="clientHandle">The client handle.</param>
            <param name="result">The result of each command.</param>
            <param name="bundle">The extra data.</param>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaybackCommand">
            <summary>
            Provides a means to send playback command to media control server.
            </summary>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaybackCommand.#ctor(Tizen.Multimedia.Remoting.MediaControlPlaybackCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaybackCommand"/> class.
            </summary>
            <param name="action">A <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> is not valid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaybackCommand.Action">
            <summary>
            Gets the playback action.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaybackPositionCommand">
            <summary>
            Provides a means to send playback command to order specific time position.
            </summary>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaybackPositionCommand.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaybackPositionCommand"/> class.
            </summary>
            <param name="position">The playback position in milliseconds.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaybackPositionCommand.Position">
            <summary>
            Gets the position to play.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaylistCommand">
            <summary>
            Provides a means to send playback command with playlist information.
            </summary>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaylistCommand.#ctor(Tizen.Multimedia.Remoting.MediaControlPlaybackCommand,System.String,System.String,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaybackCommand"/> class.
            </summary>
            <param name="action">A <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/>.</param>
            <param name="playlistName">The playlist name of the server.</param>
            <param name="index">The index of the media in the playlist.</param>
            <param name="position">The playback position in milliseconds.</param>
            <exception cref="T:System.ArgumentException"><paramref name="action"/>is not valid.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="playlistName"/> or <paramref name="index"/> is null.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaylistCommand.#ctor(Tizen.Multimedia.Remoting.MediaControlPlaybackCommand,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaybackCommand"/> class.
            </summary>
            <param name="action">A <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/>.</param>
            <param name="playlistName">The playlist name of the server.</param>
            <param name="index">The index of the media in the playlist.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="playlistName"/> or <paramref name="index"/> is null.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaylistCommand.Action">
            <summary>
            Gets the playback action.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaylistCommand.Position">
            <summary>
            Gets the position to play.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaylistCommand.Index">
            <summary>
            Gets the index of playlist.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaylistCommand.Name">
            <summary>
            Gets the name of playlist.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ShuffleModeCommand">
            <summary>
            Provides a means to to send shuffle mode commands.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ShuffleModeCommand.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.ShuffleModeCommand"/> class.
            </summary>
            <param name="enabled">A shuffle mode.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ShuffleModeCommand.Enabled">
            <summary>
            Gets a value indicating whether the shuffle mode is enabled.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.RepeatModeCommand">
            <summary>
            Provides a means to to send repeat mode commands.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.RepeatModeCommand.#ctor(Tizen.Multimedia.Remoting.MediaControlRepeatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.RepeatModeCommand"/> class.
            </summary>
            <param name="mode">The <see cref="T:Tizen.Multimedia.Remoting.MediaControlRepeatMode"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is not valid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.RepeatModeCommand.Mode">
            <summary>
            Gets the repeat mode.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.SubtitleModeCommand">
            <summary>
            Provides a means to to send subtitle mode command.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SubtitleModeCommand.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.SubtitleModeCommand"/> class.
            </summary>
            <param name="isEnabled">A value indicating whether subtitle mode is enabled.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.SubtitleModeCommand.IsEnabled">
            <summary>
            Gets a value indicating whether subtitle mode is enabled or not.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.Mode360Command">
            <summary>
            Provides a means to to send 360 mode command.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Mode360Command.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.Mode360Command"/> class.
            </summary>
            <param name="isEnabled">A value indicating whether 360 mode is enabled or not.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.Mode360Command.IsEnabled">
            <summary>
            Gets a value indicating whether 360 mode is enabled or not.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.DisplayModeCommand">
            <summary>
            Provides a means to to send display mode command.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.DisplayModeCommand.#ctor(Tizen.Multimedia.Remoting.MediaControlDisplayMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.DisplayModeCommand"/> class.
            </summary>
            <param name="mode">The <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is not valid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.DisplayModeCommand.Mode">
            <summary>
            Gets the display mode.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.DisplayRotationCommand">
            <summary>
            Provides a means to to send display rotation command.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.DisplayRotationCommand.#ctor(Tizen.Multimedia.Rotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.DisplayRotationCommand"/> class.
            </summary>
            <param name="rotation">The <see cref="P:Tizen.Multimedia.Remoting.DisplayRotationCommand.Rotation"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="rotation"/> is not valid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.DisplayRotationCommand.Rotation">
            <summary>
            Gets the display rotation.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.CustomCommand">
            <summary>
            Provides a means to to send custom commands.
            </summary>
            <remarks>This command can be used by both client and server to send predefined command or data.</remarks>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.CustomCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.CustomCommand"/> class.
            </summary>
            <param name="action">A predefined custom command.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.CustomCommand.#ctor(System.String,Tizen.Applications.Bundle)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.CustomCommand"/> class.
            </summary>
            <param name="action">A predefined custom command.</param>
            <param name="bundle">The extra data for custom command.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.CustomCommand.Action">
            <summary>
             Gets the custom action.
             </summary>
             <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.CustomCommand.Bundle">
            <summary>
            Gets the extra data.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.SearchCommand">
            <summary>
            Provides a means to to send search commands.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SearchCommand.#ctor(System.Collections.Generic.List{Tizen.Multimedia.Remoting.MediaControlSearchCondition})">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.SearchCommand"/> class.
            </summary>
            <remarks>User can search maximum 20 items once.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="conditions"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="conditions.Count.Count"/> is greater than maximum value(20).<br/>
                -or-<br/>
                <paramref name="conditions.Count.Count"/> is less than 1.
            </exception>
            <exception cref="T:System.InvalidOperationException">An internal error occurs.</exception>
            <param name="conditions">The set of <see cref="T:Tizen.Multimedia.Remoting.MediaControlSearchCondition"/>.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SearchCommand.#ctor(Tizen.Multimedia.Remoting.MediaControlSearchCondition)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.SearchCommand"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> is not set.</exception>
            <exception cref="T:System.InvalidOperationException">An internal error occurs.</exception>
            <param name="condition">The set of <see cref="T:Tizen.Multimedia.Remoting.MediaControlSearchCondition"/>.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SearchCommand.#ctor(System.Collections.Generic.List{Tizen.Multimedia.Remoting.MediaControlSearchCondition},System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.SearchCommand"/> class by server side.
            </summary>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.SearchCommand.Conditions">
            <summary>
            Gets or sets the search conditions.
            </summary>
            <remarks>This property is used by MediaControlServer.</remarks>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SearchCommand.OnResponseCompleted">
            <summary>
            Represents a method that is called when an response command completes.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlPlaylistMode">
            <summary>
            Specifies the playlist mode.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaylistMode.Updated">
            <summary>
            Playlist is created or update.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaylistMode.Removed">
            <summary>
            Playlist is removed.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlRepeatMode">
            <summary>
            Specifies the repeat mode.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlRepeatMode.Off">
            <summary>
            Off.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlRepeatMode.On">
            <summary>
            On.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlRepeatMode.OneMedia">
            <summary>
            One media.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand">
            <summary>
            Specifies playback commands.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand.Play">
            <summary>
            Play.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand.Pause">
            <summary>
            Pause.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand.Stop">
            <summary>
            Stop.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand.Next">
            <summary>
            Skip to next.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand.Previous">
            <summary>
            Skip to previous.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand.FastForward">
            <summary>
            Fast forward.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand.Rewind">
            <summary>
            Rewind.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand.Toggle">
            <summary>
            Toggle play/pause.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlPlaybackState">
            <summary>
            Specifies playback states.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.None">
            <summary>
            Unknown; no state is set.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.Playing">
            <summary>
            Playing.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.Paused">
            <summary>
            Paused.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.Stopped">
            <summary>
            Stopped.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.FastForwarding">
            <summary>
            Fast forwarding.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.Rewinding">
            <summary>
            Rewinding.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.MovingToNext">
            <summary>
            Skipping to the next item.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.MovingToPrevious">
            <summary>
            Skipping to the previous item.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.Connecting">
            <summary>
            Connecting.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.Buffering">
            <summary>
            Buffering.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlPlaybackState.Error">
            <summary>
            Error while playback.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport">
            <summary>
            Specifies the support type of media control capability.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport.Supported">
            <summary>
            Supported.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport.NotSupported">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport.NotDecided">
            <summary>
            There's no support info in server.
            </summary>
            <remarks>User should not set this value directly.</remarks>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlContentType">
            <summary>
            Specifies the content type.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlContentType.Image">
            <summary>
            Image type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlContentType.Video">
            <summary>
            Video type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlContentType.Music">
            <summary>
            Music type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlContentType.Other">
            <summary>
            Other type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlContentType.NotDecided">
            <summary>
            There's no content type info in server.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlSearchCategory">
            <summary>
            Specifies the search category.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlSearchCategory.All">
            <summary>
            Search by all category.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlSearchCategory.Title">
            <summary>
            Search by content title.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlSearchCategory.Artist">
            <summary>
            Search by content artist.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlSearchCategory.Album">
            <summary>
            Search by content album.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlSearchCategory.Genre">
            <summary>
            Search by content genre.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlSearchCategory.Tpo">
            <summary>
            Search by TPO(Time Place Occasion).
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode">
            <summary>
            Specifies the display mode.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlDisplayMode.LetterBox">
            <summary>
            Letter box
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlDisplayMode.OriginSize">
            <summary>
            Original size
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlDisplayMode.FullScreen">
            <summary>
            Full screen
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlDisplayMode.CroppedFull">
            <summary>
            Cropped full screen
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlResult">
            <summary>
            Specifies the code which represents the result of communication between client and server.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.Success">
            <summary>
            The command or the event has been successfully completed.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.AlreadyDone">
            <summary>
            The command or the event had already been completed.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.Aborted">
            <summary>
            The command or the event is aborted by some external event (e.g. aborted play command by incoming call).
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.ActionDenied">
            <summary>
            The command or the event is denied due to application policy (e.g. cannot rewind in recording).
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.NotSupported">
            <summary>
            The command or the event is not supported.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.Invalid">
            <summary>
            The command or the event is out of supported range or the limit is reached.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.Timeout">
            <summary>
            Timeout has occurred.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.ApplicationFailed">
            <summary>
            The application has failed.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.NoMedia">
            <summary>
            The command or the event has failed because the application has no media.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.NoAudioOutputDevice">
            <summary>
            The command or the event has failed because there is no audio output device.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.NoPeer">
            <summary>
            The command or the event has failed because there is no peer.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.NetworkFailed">
            <summary>
            The network has failed.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.NoAccount">
            <summary>
            The application does not have account.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.LoginFailed">
            <summary>
            The application could not log in.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaControlResult.Unknown">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaController">
            <summary>
            Provides a means to send commands to and handle events from media control server.
            </summary>
            <since_tizen> 4 </since_tizen>
            <summary>
            Provides a means to to send commands to and handle events from media control server.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaController.ServerAppId">
            <summary>
            Gets the application id of the server.
            </summary>
            <value>The server application id.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaController.IsStopped">
            <summary>
            Gets a value indicating whether the sever has been stopped.
            </summary>
            <value>true if the server has been stopped; otherwise, false.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetPlaybackState">
            <summary>
            Returns the playback state set by the server.
            </summary>
            <returns>The playback state.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaControlServer.SetPlaybackState(Tizen.Multimedia.Remoting.MediaControlPlaybackState,System.Int64)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetPlaybackPosition">
            <summary>
            Returns the playback position set by the server.
            </summary>
            <returns>The playback position in milliseconds.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaControlServer.SetPlaybackState(Tizen.Multimedia.Remoting.MediaControlPlaybackState,System.Int64)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetMetadata">
            <summary>
            Returns the metadata set by the server.
            </summary>
            <returns>The metadata.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaControlServer.SetMetadata(Tizen.Multimedia.Remoting.MediaControlMetadata)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetPlaylists">
            <summary>
            Returns the all playlists.
            </summary>
            <returns>The set of <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaylist"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetPlaylistOfCurrentPlayingMedia">
            <summary>
            Returns the playlist name of current playing media.
            </summary>
            <returns>The playlist name.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetIndexOfCurrentPlayingMedia">
            <summary>
            Returns the index of current playing media.
            </summary>
            <returns>The index of current playing media.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.IsShuffleModeEnabled">
            <summary>
            Returns whether the shuffle mode is enabled.
            </summary>
            <returns>A value indicating whether the shuffle mode is enabled.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaControlServer.SetShuffleModeEnabled(System.Boolean)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetRepeatMode">
            <summary>
            Returns the repeat mode.
            </summary>
            <returns>A <see cref="T:Tizen.Multimedia.Remoting.MediaControlRepeatMode"/> set by the server.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaControlServer.SetRepeatMode(Tizen.Multimedia.Remoting.MediaControlRepeatMode)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetContentTypeOfCurrentPlayingMedia">
            <summary>
            Gets the content type of current playing media.
            </summary>
            <returns>The <see cref="T:Tizen.Multimedia.Remoting.MediaControlContentType"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetIconPath">
            <summary>
            Gets the icon path.
            </summary>
            <returns>The icon path.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetAgeRatingOfCurrentPlayingMedia">
            <summary>
            Gets the age rating of current playing media.
            </summary>
            <returns>The Age rating of current playing media. The range is 0 to 19, inclusive.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.IsSubtitleModeEnabled">
            <summary>
            Gets whether the subtitle mode is enabled or not.
            </summary>
            <returns>A value indicating whether the subtitle mode is enabled or not.</returns>
            <value>true if the subtitle mode is enabled; otherwise, false.</value>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.IsMode360Enabled">
            <summary>
            Gets whether the 360 mode is enabled or not.
            </summary>
            <returns>A value indicating whether the 360 mode is enabled or not.</returns>
            <value>true if the 360 mode is enabled; otherwise, false.</value>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetDisplayMode">
            <summary>
            Gets the current display mode.
            </summary>
            <returns>The <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.
            </exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetDisplayRotation">
            <summary>
            Gets the current display rotation.
            </summary>
            <returns>The <see cref="T:Tizen.Multimedia.Rotation"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.
            </exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetPlaybackCapabilities">
            <summary>
            Gets the value whether <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/> is supported or not.
            </summary>
            <returns>
            the set of <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/> and <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetPlaybackCapability(Tizen.Multimedia.Remoting.MediaControlPlaybackCommand)">
            <summary>
            Gets the value whether <paramref name="action"/> is supported or not.
            </summary>
            <param name="action">A playback command.</param>
            <returns>A <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetShuffleModeCapability">
            <summary>
            Gets the value whether the shuffle mode is supported or not.
            </summary>
            <returns>A <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetRepeatModeCapability">
            <summary>
            Gets the value whether the repeat mode is supported or not.
            </summary>
            <returns>A <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetMode360Capability">
            <summary>
            Gets the value whether the 360 mode is supported or not.
            </summary>
            <returns>A <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetSubtitleModeCapability">
            <summary>
            Gets the value whether the subtitle mode is supported or not.
            </summary>
            <returns>A <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetDisplayModeCapability">
            <summary>
            Gets the value whether the repeat mode is supported or not.
            </summary>
            <returns>
            If there's no supported display mode by server, it will return null.
            otherwise, it will return the supported list of <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.GetDisplayRotationCapability">
            <summary>
            Gets the value whether the display mode is supported or not.
            </summary>
            <returns>
            If there's no supported display rotation by server, it will return null.
            otherwise, it will return the supported list of <see cref="T:Tizen.Multimedia.Rotation"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.RequestCommandAsync(Tizen.Multimedia.Remoting.Command)">
            <summary>
            Requests a command to the server and client receives the result of each request(command).
            </summary>
            <param name="command">A <see cref="T:Tizen.Multimedia.Remoting.Command"/> class.</param>
            <returns>
            The type of return value is Tuple.<br/>
            First item of Tuple represents the <see cref="T:Tizen.Applications.Bundle"/> and it represents the extra data from client. It can be null.<br/>
            Second item of Tuple represents the result of each request(command).
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <seealso cref="T:Tizen.Multimedia.Remoting.PlaybackCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.PlaybackPositionCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.PlaylistCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.ShuffleModeCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.RepeatModeCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.SubtitleModeCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.Mode360Command"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.DisplayModeCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.DisplayRotationCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.CustomCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.SearchCommand"/>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.RequestAsync(Tizen.Multimedia.Remoting.Command)">
            <summary>
            Requests command to the server.
            </summary>
            <param name="command">A <see cref="T:Tizen.Multimedia.Remoting.Command"/> class.</param>
            <returns><see cref="T:Tizen.Applications.Bundle"/> represents the extra data from server and it can be null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <seealso cref="T:Tizen.Multimedia.Remoting.PlaybackCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.PlaybackPositionCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.PlaylistCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.ShuffleModeCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.RepeatModeCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.SubtitleModeCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.Mode360Command"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.DisplayModeCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.DisplayRotationCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.CustomCommand"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.SearchCommand"/>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.Response(Tizen.Multimedia.Remoting.Command,System.Int32,Tizen.Applications.Bundle)">
            <summary>
            Sends the result of each command.
            </summary>
            <param name="command">The command that return to client.</param>
            <param name="result">The result of <paramref name="command"/>.</param>
            <param name="bundle">The extra data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.Response(Tizen.Multimedia.Remoting.Command,System.Int32)">
            <summary>
            Sends the result of each command.
            </summary>
            <param name="command">The command that return to client.</param>
            <param name="result">The result of <paramref name="command"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.Response(Tizen.Multimedia.Remoting.Command,Tizen.Multimedia.Remoting.MediaControlResult,Tizen.Applications.Bundle)">
            <summary>
            Sends the result of each command.
            </summary>
            <param name="command">The command that return to client.</param>
            <param name="result">The <see cref="T:Tizen.Multimedia.Remoting.MediaControlResult"/> of <paramref name="command"/>.</param>
            <param name="bundle">The extra data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.Response(Tizen.Multimedia.Remoting.Command,Tizen.Multimedia.Remoting.MediaControlResult)">
            <summary>
            Sends the result of each command.
            </summary>
            <param name="command">The command that return to client.</param>
            <param name="result">The <see cref="T:Tizen.Multimedia.Remoting.MediaControlResult"/> of <paramref name="command"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaController.SendPlaybackCommand(Tizen.Multimedia.Remoting.MediaControlPlaybackCommand)">
            <summary>
            Sends playback command to the server.
            </summary>
            <param name="command">A playback command.</param>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="command"/> is not valid.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> has already been disposed.</exception>
            <seealso cref="E:Tizen.Multimedia.Remoting.MediaControlServer.PlaybackCommandReceived"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.ServerStopped">
            <summary>
            Occurs when the server is stopped.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.PlaybackStateUpdated">
            <summary>
            Occurs when the playback state is updated.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.PlaylistUpdated">
            <summary>
            Occurs when the playlist is updated.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.MetadataUpdated">
            <summary>
            Occurs when the metadata is updated.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.ShuffleModeUpdated">
            <summary>
            Occurs when the shuffle mode is updated.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.RepeatModeUpdated">
            <summary>
            Occurs when the repeat mode is updated.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.SubtitleModeUpdated">
            <summary>
            Occurs when the subtitle mode is updated.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.Mode360Updated">
            <summary>
            Occurs when the 360 mode is updated.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.DisplayModeUpdated">
            <summary>
            Occurs when the display mode is updated.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.DisplayRotationUpdated">
            <summary>
            Occurs when the display rotation is updated.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.PlaybackCapabilityUpdated">
            <summary>
            Occurs when the playback capabilities are updated.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.RepeatModeCapabilityUpdated">
            <summary>
            Occurs when the repeat mode capabilities are updated.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.ShuffleModeCapabilityUpdated">
            <summary>
            Occurs when the shuffle mode capabilities are updated.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.DisplayModeCapabilityUpdated">
            <summary>
            Occurs when the display mode capabilities are updated.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.DisplayRotationCapabilityUpdated">
            <summary>
            Occurs when the display rotation capabilities are updated.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.CommandCompleted">
            <summary>
            Occurs when the command is completed.
            </summary>
            <remarks>
            User can match the command and this event using <see cref="P:Tizen.Multimedia.Remoting.CommandCompletedEventArgs.RequestId"/> field.
            </remarks>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaController.CustomCommandReceived">
            <summary>
            Occurs when a server sends custom event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControllerManager">
            <summary>
            Provides a means to retrieve active controllers and observe controllers added and removed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControllerManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/> class.
            </summary>
            <privilege>http://tizen.org/privilege/mediacontroller.client</privilege>
            <exception cref="T:System.InvalidOperationException">An internal error occurs.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControllerManager.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/>.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControllerManager.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/>.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControllerManager.GetActiveControllers">
            <summary>
            Gets the active controllers.
            </summary>
            <returns>An array of <see cref="T:Tizen.Multimedia.Remoting.MediaController"/>.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControllerManager.ServerStarted">
            <summary>
            Occurs when a server is started.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControllerManager.ServerStopped">
            <summary>
            Occurs when a server is stopped.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlMetadata">
            <summary>
            Represents metadata for media control.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlMetadata"/> class.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Artist">
            <summary>
            Gets or sets the artist.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Album">
            <summary>
            Gets or sets the album.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Genre">
            <summary>
            Gets or sets the genre.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.TrackNumber">
            <summary>
            Gets or sets the track number.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.AlbumArtPath">
            <summary>
            Gets or sets the path of the album art.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Season">
            <summary>
            Gets or sets the season information.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Remoting.SeriesInformation"/>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Episode">
            <summary>
            Gets or sets the episode information.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Remoting.SeriesInformation"/>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlMetadata.Resolution">
            <summary>
            Gets or sets the content resolution.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Size"/>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.SeriesInformation">
            <summary>
            Represents properties for the video series information.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SeriesInformation.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.SeriesInformation"/> class.
            </summary>
            <param name="number">The order of this video in entire series.</param>
            <param name="title">The title.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.SeriesInformation.Number">
            <summary>
            Gets or sets the order of this video in entire series.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.SeriesInformation.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SeriesInformation.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlPlaylist">
            <summary>
            Represents playlist for media control.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaylist"/> class.
            </summary>
            <param name="name">The name of this playlist.</param>
            <exception cref="T:System.InvalidOperationException">An internal error occurs.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Tizen.Multimedia.Remoting.MediaControlMetadata})">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaylist"/> class.
            </summary>
            <param name="name">The name of this playlist.</param>
            <param name="metadata">The metadata of this playlist.</param>
            <exception cref="T:System.InvalidOperationException">An internal error occurs.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaylist"/> class with the playlist handle that created already.
            </summary>
            <param name="handle">The handle of playlist.</param>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaylist"/> class.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlPlaylist.Name">
            <summary>
            Gets or sets the name of playlist.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlPlaylist.TotalCount">
            <summary>
            Gets the total number of media in this playlist.
            </summary>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.GetMetadata">
            <summary>
            Gets the playlist index and metadata pair.
            </summary>
            <returns>The dictionary set of index and <see cref="T:Tizen.Multimedia.Remoting.MediaControlMetadata"/> pair.</returns>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.GetMetadata(System.String)">
            <summary>
            Gets the metadata by index.
            </summary>
            <param name="index">The index of media in the playlist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="index"/> is null.</exception>
            <returns>A <see cref="T:Tizen.Multimedia.Remoting.MediaControlMetadata"/> instance.</returns>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.AddMetadata(System.Collections.Generic.Dictionary{System.String,Tizen.Multimedia.Remoting.MediaControlMetadata})">
            <summary>
            Sets the metadata to the playlist.
            </summary>
            <param name="metadata">The metadata of media.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.AddMetadata(System.String,Tizen.Multimedia.Remoting.MediaControlMetadata)">
            <summary>
            Sets the metadata to the playlist.
            </summary>
            <param name="index">The index of media in the playlist.</param>
            <param name="metadata">The metadata of media.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="index"/> or <paramref name="metadata"/> is null.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.Update">
            <summary>
            Update the playlist by latest info.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.Dispose">
            <summary>
            Releases the unmanaged resources used by the MediaControlPlaylist.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the Recorder.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; false to release only unmanaged resources.
            </param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlSearchCondition">
            <summary>
            Represents the search conditions.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlSearchCondition.#ctor(Tizen.Multimedia.Remoting.MediaControlContentType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlSearchCondition"/> class.
            </summary>
            <remarks>
            The <see cref="T:Tizen.Multimedia.Remoting.MediaControlSearchCategory"/> will be set internally by <see cref="F:Tizen.Multimedia.Remoting.MediaControlSearchCategory.All"/>.
            </remarks>
            <param name="type" > The search type.</param>
            <param name="keyword">The search keyword.</param>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not valid.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlSearchCondition.#ctor(Tizen.Multimedia.Remoting.MediaControlContentType,Tizen.Multimedia.Remoting.MediaControlSearchCategory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlSearchCondition"/> class.
            </summary>
            <param name="type">The search type.</param>
            <param name="category">The search category.</param>
            <param name="keyword">The search keyword.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="type"/> or <paramref name="category"/> is not valid.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlSearchCondition.#ctor(Tizen.Multimedia.Remoting.MediaControlContentType,System.String,Tizen.Applications.Bundle)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlSearchCondition"/> class.
            </summary>
            <remarks>
            The <see cref="T:Tizen.Multimedia.Remoting.MediaControlSearchCategory"/> will be set internally by <see cref="F:Tizen.Multimedia.Remoting.MediaControlSearchCategory.All"/>.
            </remarks>
            <param name="type" > The search type.</param>
            <param name="keyword">The search keyword.</param>
            <param name="bundle">The extra data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not valid.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlSearchCondition.#ctor(Tizen.Multimedia.Remoting.MediaControlContentType,Tizen.Multimedia.Remoting.MediaControlSearchCategory,System.String,Tizen.Applications.Bundle)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlSearchCondition"/> class.
            </summary>
            <param name="type">The search type.</param>
            <param name="category">The search category.</param>
            <param name="keyword">The search keyword.</param>
            <param name="bundle">The extra data.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="type"/> or <paramref name="category"/> is not valid.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlSearchCondition.ContentType">
            <summary>
            Gets the search content type.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlSearchCondition.Category">
            <summary>
            Gets the search category.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlSearchCondition.Keyword">
            <summary>
            Gets the search keyword.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlSearchCondition.Bundle">
            <summary>
            Gets the extra data.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlServer">
            <summary>
            Provides a means to set playback information and metadata and receive commands from clients.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaControllerManager"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaController"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlServer.IsRunning">
            <summary>
            Gets a value indicating whether the server is running.
            </summary>
            <value>true if the server has started; otherwise, false.</value>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaControlServer.Start"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaControlServer.Stop"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.Start">
            <summary>
            Starts the media control server.
            </summary>
            <remarks>
            When the server starts, <see cref="E:Tizen.Multimedia.Remoting.MediaControllerManager.ServerStarted"/> will be raised.
            </remarks>
            <privilege>http://tizen.org/privilege/mediacontroller.server</privilege>
            <exception cref="T:System.InvalidOperationException">An internal error occurs.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Caller does not have required privilege.</exception>
            <seealso cref="E:Tizen.Multimedia.Remoting.MediaControllerManager.ServerStarted"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.Stop">
            <summary>
            Stops the media control server.
            </summary>
            <remarks>
            When the server stops, <see cref="E:Tizen.Multimedia.Remoting.MediaControllerManager.ServerStopped"/> will be raised.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <seealso cref="E:Tizen.Multimedia.Remoting.MediaControllerManager.ServerStopped"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.GetActivatedClients">
            <summary>
            Gets the active clients.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <returns>the activated client ids.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetPlaybackState(Tizen.Multimedia.Remoting.MediaControlPlaybackState,System.Int64)">
            <summary>
            Updates playback state and playback position.</summary>
            <param name="state">The playback state.</param>
            <param name="position">The playback position in milliseconds.</param>
            <exception cref="T:System.ArgumentException"><paramref name="state"/> is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetMetadata(Tizen.Multimedia.Remoting.MediaControlMetadata)">
            <summary>
            Updates metadata information.
            </summary>
            <param name="metadata">The metadata to update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetShuffleModeEnabled(System.Boolean)">
            <summary>
            Updates the shuffle mode.
            </summary>
            <param name="enabled">A value indicating whether the shuffle mode is enabled.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetRepeatMode(Tizen.Multimedia.Remoting.MediaControlRepeatMode)">
            <summary>
            Updates the repeat mode.
            </summary>
            <param name="mode">A value indicating the repeat mode.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is invalid.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetInfoOfCurrentPlayingMedia(System.String,System.String)">
            <summary>
            Sets the playlist name and index of current playing media.
            </summary>
            <param name="playlistName">The playlist name of current playing media.</param>
            <param name="index">The index of current playing media.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="playlistName"/> or <paramref name="index"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetAgeRating(System.Int32)">
            <summary>
            Sets the age rating of latest played media.
            </summary>
            <param name="ageRating">
            The Age rating of latest played media. The valid range is 0 to 19, inclusive.
            Especially, 0 means that media is suitable for all ages.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="ageRating"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetSubtitleMode(System.Boolean)">
            <summary>
            Sets the subtitle mode.
            </summary>
            <param name="isEnabled">A value indicating whether the subtitle mode is enabled.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetMode360(System.Boolean)">
            <summary>
            Sets the 360 mode.
            </summary>
            <param name="isEnabled">A value indicating whether the 360 mode is enabled.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetDisplayMode(Tizen.Multimedia.Remoting.MediaControlDisplayMode)">
            <summary>
            Sets the display mode.
            </summary>
            <param name="mode">A value indicating the <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/>.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetDisplayRotation(Tizen.Multimedia.Rotation)">
            <summary>
            Sets the display rotation.
            </summary>
            <param name="rotation">A value indicating the <see cref="T:Tizen.Multimedia.Rotation"/>.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetIndexOfCurrentPlayingMedia(System.String)">
            <summary>
            Sets the index of current playing media.
            </summary>
            <param name="index">The index of current playing media.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="index"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.RemovePlaylist(Tizen.Multimedia.Remoting.MediaControlPlaylist)">
            <summary>
            Delete playlist.
            </summary>
            <remarks>Currently, only server can remove the playlist.</remarks>
            <param name="playlist">The name of playlist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="playlist"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetPlaybackContentType(Tizen.Multimedia.Remoting.MediaControlContentType)">
            <summary>
            Sets the content type of latest played media.
            </summary>
            <param name="type">A value indicating the content type of the latest played media.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is invalid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetIconPath(System.String)">
            <summary>
            Sets the path of icon.
            </summary>
            <param name="path">The path of icon.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is invalid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetPlaybackCapabilities(System.Collections.Generic.Dictionary{Tizen.Multimedia.Remoting.MediaControlPlaybackCommand,Tizen.Multimedia.Remoting.MediaControlCapabilitySupport})">
            <summary>
            Sets the capabilities by <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/>.
            </summary>
            <param name="capabilities">The set of <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/> and <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/>.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="capabilities"/> is invalid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetPlaybackCapability(Tizen.Multimedia.Remoting.MediaControlPlaybackCommand,Tizen.Multimedia.Remoting.MediaControlCapabilitySupport)">
            <summary>
            Sets the capabilities by <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/>.
            </summary>
            <param name="action">A playback command.</param>
            <param name="support">A value indicating whether the <paramref name="action"/> is supported or not.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="action"/> or <paramref name="support"/> is invalid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetShuffleModeCapability(Tizen.Multimedia.Remoting.MediaControlCapabilitySupport)">
            <summary>
            Sets the <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/> indicating shuffle mode is supported or not.
            </summary>
            <param name="support">A value indicating whether the shuffle mode is supported or not.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="support"/> is invalid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetRepeatModeCapability(Tizen.Multimedia.Remoting.MediaControlCapabilitySupport)">
            <summary>
            Sets the <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/> indicating repeat mode is supported or not.
            </summary>
            <param name="support">A value indicating whether the <see cref="T:Tizen.Multimedia.Remoting.MediaControlRepeatMode"/> is supported or not.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="support"/> is invalid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetMode360Capability(Tizen.Multimedia.Remoting.MediaControlCapabilitySupport)">
            <summary>
            Sets the <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/> indicating whether 360 mode is supported or not.
            </summary>
            <param name="support">A value indicating whether the 360 mode is supported or not.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="support"/> is invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetSubtitleModeCapability(Tizen.Multimedia.Remoting.MediaControlCapabilitySupport)">
            <summary>
            Sets the <see cref="T:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport"/> indicating whether subtitle mode is supported or not.
            </summary>
            <param name="support">A value indicating whether the subtitle mode is supported or not.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="support"/> is invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetDisplayModeCapabilities(System.Collections.Generic.IDictionary{Tizen.Multimedia.Remoting.MediaControlDisplayMode,Tizen.Multimedia.Remoting.MediaControlCapabilitySupport})">
            <summary>
            Sets the supported list of <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/>.
            </summary>
            <remarks>
            <see cref="F:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport.NotDecided"/> is not allowed in display mode capability.
            The default value of each <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/> is not supported.
            </remarks>
            <param name="capabilities">The supported list of <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/>.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="capabilities"/> is invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetDisplayModeCapability(Tizen.Multimedia.Remoting.MediaControlDisplayMode,Tizen.Multimedia.Remoting.MediaControlCapabilitySupport)">
            <summary>
            Sets the <paramref name="mode"/> is supported or not.
            </summary>
            <remarks>
            <see cref="F:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport.NotDecided"/> is not allowed in display mode capability.<br/>
            The default value of each <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/> is not supported.
            </remarks>
            <param name="mode">The <see cref="T:Tizen.Multimedia.Remoting.MediaControlDisplayMode"/>.</param>
            <param name="support">A value indicating whether the <paramref name="mode"/> is supported or not.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> or <paramref name="support"/> is invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetDisplayRotationCapabilities(System.Collections.Generic.IDictionary{Tizen.Multimedia.Rotation,Tizen.Multimedia.Remoting.MediaControlCapabilitySupport})">
            <summary>
            Sets the supported list of <see cref="T:Tizen.Multimedia.Rotation"/>.
            </summary>
            <remarks>
            <see cref="F:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport.NotDecided"/> is not allowed in display rotation capability.<br/>
            The default value of each <see cref="T:Tizen.Multimedia.Rotation"/> is not supported.
            </remarks>
            <param name="capabilities">The supported list of <see cref="T:Tizen.Multimedia.Rotation"/>.</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="capabilities"/> is invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.SetDisplayRotationCapability(Tizen.Multimedia.Rotation,Tizen.Multimedia.Remoting.MediaControlCapabilitySupport)">
            <summary>
            Sets the <paramref name="rotation"/> is supported or not.
            </summary>
            <remarks>
            <see cref="F:Tizen.Multimedia.Remoting.MediaControlCapabilitySupport.NotDecided"/> is not allowed in display rotation capability.<br/>
            The default value of each <see cref="T:Tizen.Multimedia.Rotation"/> is not supported.
            </remarks>
            <param name="rotation">The <see cref="T:Tizen.Multimedia.Rotation"/>.</param>
            <param name="support">A value indicating whether the <paramref name="rotation"/> is supported or not..</param>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="rotation"/> or <paramref name="support"/> is invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.RequestCommandAsync(Tizen.Multimedia.Remoting.Command,System.String)">
            <summary>
            Requests a command to the client and server receives the result of each request(command).
            </summary>
            <param name="command">A <see cref="T:Tizen.Multimedia.Remoting.Command"/> class.</param>
            <param name="clientId">The client Id to send command.</param>
            <returns>
            The type of return value is Tuple.<br/>
            First item of Tuple represents the <see cref="T:Tizen.Applications.Bundle"/> and it represents the extra data from client. It can be null.<br/>
            Second item of Tuple represents the result of each request(command).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="command"/> or <paramref name="clientId"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.NotImplementedException">The command which is not supported is used.</exception>
            <seealso cref="T:Tizen.Multimedia.Remoting.CustomCommand"/>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.RequestAsync(Tizen.Multimedia.Remoting.Command,System.String)">
            <summary>
            Requests commands to the client.
            </summary>
            <param name="command">A <see cref="T:Tizen.Multimedia.Remoting.Command"/> class.</param>
            <param name="clientId">The client Id to send command.</param>
            <returns><see cref="T:Tizen.Applications.Bundle"/> represents the extra data from client and it can be null.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="command"/> or <paramref name="clientId"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The server has already been stopped.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <seealso cref="T:Tizen.Multimedia.Remoting.CustomCommand"/>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.Response(Tizen.Multimedia.Remoting.Command,System.Int32,Tizen.Applications.Bundle)">
            <summary>
            Sends the result of each command.
            </summary>
            <param name="command">The command that return to client.</param>
            <param name="result">The result of <paramref name="command"/>.</param>
            <param name="bundle">The extra data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.Response(Tizen.Multimedia.Remoting.Command,System.Int32)">
            <summary>
            Sends the result of each command.
            </summary>
            <param name="command">The command that return to client.</param>
            <param name="result">The result of <paramref name="command"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.Response(Tizen.Multimedia.Remoting.Command,Tizen.Multimedia.Remoting.MediaControlResult,Tizen.Applications.Bundle)">
            <summary>
            Sends the result of each command.
            </summary>
            <param name="command">The command that return to client.</param>
            <param name="result">The <see cref="T:Tizen.Multimedia.Remoting.MediaControlResult"/> of <paramref name="command"/>.</param>
            <param name="bundle">The extra data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServer.Response(Tizen.Multimedia.Remoting.Command,Tizen.Multimedia.Remoting.MediaControlResult)">
            <summary>
            Sends the result of each command.
            </summary>
            <param name="command">The command that return to client.</param>
            <param name="result">The <see cref="T:Tizen.Multimedia.Remoting.MediaControlResult"/> of <paramref name="command"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The server is not running .<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.PlaybackCommandReceived">
            <summary>
            Occurs when a client sends playback command.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.PlaybackActionCommandReceived">
            <summary>
            Occurs when a client sends playback command.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.PlaybackPositionCommandReceived">
            <summary>
            Occurs when a client sends playback position command.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.PlaylistCommandReceived">
            <summary>
            Occurs when a client sends playlist command.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.ShuffleModeCommandReceived">
            <summary>
            Occurs when a client sends shuffle mode command.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.RepeatModeCommandReceived">
            <summary>
            Occurs when a client sends repeat mode command.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.SubtitleModeCommandReceived">
            <summary>
            Occurs when a client sends subtitle mode command.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.Mode360CommandReceived">
            <summary>
            Occurs when a client sends mode 360 command.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.DisplayModeCommandReceived">
            <summary>
            Occurs when a client sends display mode command.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.DisplayRotationCommandReceived">
            <summary>
            Occurs when a client sends display rotation command.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.CustomCommandReceived">
            <summary>
            Occurs when a client sends custom command.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.SearchCommandReceived">
            <summary>
            Occurs when a client sends search command.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaControlServer.CommandCompleted">
            <summary>
            Occurs when a client sends custom command.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlServerStartedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControllerManager.ServerStarted"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServerStartedEventArgs.#ctor(Tizen.Multimedia.Remoting.MediaController)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlServerStartedEventArgs"/> class.
            </summary>
            <param name="mediaController">A <see cref="T:Tizen.Multimedia.Remoting.MediaController"/> of the server.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaController"/> is null.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlServerStartedEventArgs.Controller">
            <summary>
            Gets the controller of the server added.
            </summary>
            <value>A <see cref="T:Tizen.Multimedia.Remoting.MediaController"/>.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaControlServerStoppedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControllerManager.ServerStopped"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaControlServerStoppedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaControlServerStoppedEventArgs"/> class.
            </summary>
            <param name="serverAppId">The application id of the server stopped.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverAppId"/> is null.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaControlServerStoppedEventArgs.ServerAppId">
            <summary>
            Gets the application id of the server.
            </summary>
            <value>A string represents the application id.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MetadataUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.MetadataUpdated"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MetadataUpdatedEventArgs.#ctor(Tizen.Multimedia.Remoting.MediaControlMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MetadataUpdatedEventArgs"/> class.
            </summary>
            <param name="metadata">The updated <see cref="T:Tizen.Multimedia.Remoting.MediaControlMetadata"/>.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MetadataUpdatedEventArgs.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The updated <see cref="T:Tizen.Multimedia.Remoting.MediaControlMetadata"/>.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.Mode360CommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.Mode360CommandReceived"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Mode360CommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.Mode360Command)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.Mode360CommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The 360 mode command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.Mode360CommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.Mode360Command"/>.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.Mode360UpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.Mode360Updated"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.Mode360UpdatedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.Mode360UpdatedEventArgs"/> class.
            </summary>
            <param name="isEnabled">A value indicating the updated 360 mode.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.Mode360UpdatedEventArgs.IsEnabled">
            <summary>
            Gets the value indicating whether 360 mode is enabled or not.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaybackActionCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.PlaybackActionCommandReceived"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaybackActionCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.PlaybackCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaybackActionCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The playback command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaybackActionCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.PlaybackCommand"/>.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaybackCapabilityUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.PlaybackCapabilityUpdated"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaybackCapabilityUpdatedEventArgs.#ctor(System.Collections.Generic.Dictionary{Tizen.Multimedia.Remoting.MediaControlPlaybackCommand,Tizen.Multimedia.Remoting.MediaControlCapabilitySupport})">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaybackCapabilityUpdatedEventArgs"/> class.
            </summary>
            <param name="support">The set of playback capabilities.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="support"/> is invalid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaybackCapabilityUpdatedEventArgs.Support">
            <summary>
            Gets the value whether the playback action is supported or not.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaybackCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.PlaybackCommandReceived"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaybackCommandReceivedEventArgs.#ctor(System.String,Tizen.Multimedia.Remoting.MediaControlPlaybackCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaybackCommandReceivedEventArgs"/> class.
            </summary>
            <param name="clientAppId">The client application id.</param>
            <param name="command">The playback command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientAppId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="command"/> is invalid.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaybackCommandReceivedEventArgs.ClientAppId">
            <summary>
            Gets the application id of the client that sent command.
            </summary>
            <value>The client application id.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaybackCommandReceivedEventArgs.Command">
            <summary>
            Gets the command.
            </summary>
            <value>The <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaybackCommand"/>.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaybackPositionCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.PlaybackPositionCommandReceived"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaybackPositionCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.PlaybackPositionCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaybackPositionCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The playback position command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaybackPositionCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.PlaybackPositionCommand"/>.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaybackStateUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.PlaybackStateUpdated"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaybackStateUpdatedEventArgs.#ctor(Tizen.Multimedia.Remoting.MediaControlPlaybackState,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaybackStateUpdatedEventArgs"/> class.
            </summary>
            <param name="state">The playback state.</param>
            <param name="position">The playback position in milliseconds.</param>
            <exception cref="T:System.ArgumentException"><paramref name="state"/> is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaybackStateUpdatedEventArgs.State">
            <summary>
            Gets the playback state.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaybackStateUpdatedEventArgs.Position">
            <summary>
            Gets the playback position in milliseconds.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaylistCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.PlaylistCommandReceived"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaylistCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.PlaylistCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaylistCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The playback position command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaylistCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.PlaylistCommand"/>.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Remoting.PlaylistCommand"/>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.PlaylistUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.PlaylistUpdated"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.PlaylistUpdatedEventArgs.#ctor(Tizen.Multimedia.Remoting.MediaControlPlaylistMode,System.String,Tizen.Multimedia.Remoting.MediaControlPlaylist)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.PlaylistUpdatedEventArgs"/> class.
            </summary>
            <param name="mode">A value indicating the updated repeat mode.</param>
            <param name="name">A value indicating the playlist name.</param>
            <param name="playlist">A value indicating the playlist.</param>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is invalid.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> or <paramref name="playlist"/> is null.
            </exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaylistUpdatedEventArgs.Mode">
            <summary>
            Gets the updated playlist mode.
            </summary>
            <remarks>
            If The <see cref="P:Tizen.Multimedia.Remoting.PlaylistUpdatedEventArgs.Mode"/> is <see cref="F:Tizen.Multimedia.Remoting.MediaControlPlaylistMode.Updated"/>,
            Retrieves the playlist using <see cref="P:Tizen.Multimedia.Remoting.PlaylistUpdatedEventArgs.Name"/> and call <see cref="M:Tizen.Multimedia.Remoting.MediaControlPlaylist.Update"/> to keep the playlist up to date.
            </remarks>
            <value>The <see cref="T:Tizen.Multimedia.Remoting.MediaControlPlaylistMode"/>.</value>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaylistUpdatedEventArgs.Name">
            <summary>
            Gets the playlist name.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.PlaylistUpdatedEventArgs.Playlist">
            <summary>
            Gets the updated playlist.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.RepeatModeCapabilityUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.RepeatModeCapabilityUpdated"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.RepeatModeCapabilityUpdatedEventArgs.#ctor(Tizen.Multimedia.Remoting.MediaControlCapabilitySupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.RepeatModeCapabilityUpdatedEventArgs"/> class.
            </summary>
            <param name="support">The repeat mode capabilities.</param>
            <exception cref="T:System.ArgumentException"><paramref name="support"/> is not valid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.RepeatModeCapabilityUpdatedEventArgs.Support">
            <summary>
            Gets the value whether the repeat mode is supported or not.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.RepeatModeCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.RepeatModeCommandReceived"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.RepeatModeCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.RepeatModeCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.RepeatModeCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The repeat mode command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.RepeatModeCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.RepeatModeCommand"/>.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.RepeatModeUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.RepeatModeUpdated"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.RepeatModeUpdatedEventArgs.#ctor(Tizen.Multimedia.Remoting.MediaControlRepeatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.RepeatModeUpdatedEventArgs"/> class.
            </summary>
            <param name="mode">A value indicating the updated repeat mode.</param>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is invalid.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.RepeatModeUpdatedEventArgs.RepeatMode">
            <summary>
            Gets the updated repeat mode.
            </summary>
            <value>The <see cref="T:Tizen.Multimedia.Remoting.MediaControlRepeatMode"/>.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.SearchCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="T:Tizen.Multimedia.Remoting.SearchCommandReceivedEventArgs"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SearchCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.SearchCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.SearchCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The search command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.SearchCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.SearchCommand"/>.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ShuffleModeCapabilityUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.ShuffleModeCapabilityUpdated"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ShuffleModeCapabilityUpdatedEventArgs.#ctor(Tizen.Multimedia.Remoting.MediaControlCapabilitySupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.ShuffleModeCapabilityUpdatedEventArgs"/> class.
            </summary>
            <param name="support">The shuffle mode capabilities.</param>
            <exception cref="T:System.ArgumentException"><paramref name="support"/> is not valid.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ShuffleModeCapabilityUpdatedEventArgs.Support">
            <summary>
            Gets the value whether the shuffle mode is supported or not.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ShuffleModeCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.ShuffleModeCommandReceived"/> event.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ShuffleModeCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.ShuffleModeCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.ShuffleModeCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The shuffle mode command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ShuffleModeCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.ShuffleModeCommand"/>.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ShuffleModeUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.ShuffleModeUpdated"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ShuffleModeUpdatedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.ShuffleModeUpdatedEventArgs"/> class.
            </summary>
            <param name="enabled">A value indicating whether the shuffle mode is enabled.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ShuffleModeUpdatedEventArgs.Enabled">
            <summary>
            Gets a value indicating whether the shuffle mode is enabled.
            </summary>
            <value>true if the shuffle mode is enabled; otherwise, false.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.SubtitleModeCommandReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaControlServer.SubtitleModeCommandReceived"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SubtitleModeCommandReceivedEventArgs.#ctor(Tizen.Multimedia.Remoting.SubtitleModeCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.SubtitleModeCommandReceivedEventArgs"/> class.
            </summary>
            <param name="command">The subtitle command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.SubtitleModeCommandReceivedEventArgs.Command">
            <summary>
            Gets the <see cref="T:Tizen.Multimedia.Remoting.SubtitleModeCommand"/>.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.SubtitleModeUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaController.SubtitleModeUpdated"/> event.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.SubtitleModeUpdatedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.SubtitleModeUpdatedEventArgs"/> class.
            </summary>
            <param name="isEnabled">A value indicating the updated subtitle mode.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.SubtitleModeUpdatedEventArgs.IsEnabled">
            <summary>
            Gets the value indicating whether subtitle is enabled or not.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroringStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.ScreenMirroring.StateChanged"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroringStateChangedEventArgs.State">
            <summary>
            Gets the current state of the screen mirroring.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroringErrorOccurredEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.ScreenMirroring.ErrorOccurred"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroringErrorOccurredEventArgs.Error">
            <summary>
            Gets the error that occurred.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroring">
            <summary>
            Provides the ability to connect to and disconnect from a screen mirroring source,
            start, pause, and resume the screen mirroring as a sink.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.#ctor">
            <summary>
            Initializes a new instance of the ScreenMirroring class.
            </summary>
            <feature>http://tizen.org/feature/network.wifi.direct.display</feature>
            <exception cref="T:System.NotSupportedException">The feature is not supported.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.Finalize">
            <summary>
            Finalizes an instance of the ScreenMirroring class.
            </summary>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.ScreenMirroring.StateChanged">
            <summary>
            Occurs when the state is changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.ScreenMirroring.ErrorOccurred">
            <summary>
            Occurs when an error occurs.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroring.AudioInfo">
            <summary>
            Gets the negotiated audio info.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroring.VideoInfo">
            <summary>
            Gets the negotiated video info.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.Prepare(Tizen.Multimedia.Display)">
            <summary>
            Prepares the screen mirroring with the specified display.
            </summary>
            <remarks>
            The state must be <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Idle"/>.<br/>
            <br/>
            All supported resolutions will be candidates.
            </remarks>
            <param name="display">The display where the mirroring will be played on.</param>
            <exception cref="T:System.ArgumentException">
               <paramref name="display"/> has already been assigned to another.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="display"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The current state is not in the valid.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.Prepare(Tizen.Multimedia.Display,Tizen.Multimedia.Remoting.ScreenMirroringResolutions)">
            <summary>
            Prepares the screen mirroring with the specified display and resolutions.
            </summary>
            <remarks>
            The state must be <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Idle"/>.
            </remarks>
            <param name="display">The display where the mirroring will be played on.</param>
            <param name="resolutions">The desired resolutions.</param>
            <exception cref="T:System.ArgumentException">
               <paramref name="resolutions"/> contain invalid flags.<br/>
               -or-<br/>
               <paramref name="display"/> has already been assigned to another.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="display"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The current state is not in the valid.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.ConnectAsync(System.String)">
            <summary>
            Creates the connection and ready for receiving data from a mirroring source.
            </summary>
            <param name="sourceIp">The source ip address to connect.</param>
            <remarks>
            The state must be <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Prepared"/> state by
            <see cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.Prepare(Tizen.Multimedia.Display,Tizen.Multimedia.Remoting.ScreenMirroringResolutions)"/>.<br/>
            The default port number is 2022.<br/>
            If you want to connect using different port number, please use <see cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.ConnectAsync(System.String,System.UInt32)"/>.
            </remarks>
            <returns>A task that represents the asynchronous operation.</returns>
            <privilege>http://tizen.org/privilege/internet</privilege>
            <exception cref="T:System.ArgumentException"><paramref name="sourceIp"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceIp"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                The current state is not in the valid.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Caller does not have required permission.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.ConnectAsync(System.String,System.UInt32)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.ConnectAsync(System.String,System.UInt32)">
            <summary>
            Creates the connection and ready for receiving data from a mirroring source with the given <paramref name="port"/>.
            </summary>
            <param name="sourceIp">The source ip address to connect.</param>
            <param name="port">The port number to connect. The max value is 65535.</param>
            <remarks>
            The state must be <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Prepared"/> state by
            <see cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.Prepare(Tizen.Multimedia.Display,Tizen.Multimedia.Remoting.ScreenMirroringResolutions)"/>.
            </remarks>
            <returns>A task that represents the asynchronous operation.</returns>
            <privilege>http://tizen.org/privilege/internet</privilege>
            <exception cref="T:System.ArgumentException"><paramref name="sourceIp"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceIp"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is greater than port max value(65535).</exception>
            <exception cref="T:System.InvalidOperationException">
                The current state is not in the valid.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Caller does not have required permission.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.StartAsync">
            <summary>
            Starts mirroring from the source.
            </summary>
            <remarks>
            The state must be <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Connected"/> state by
            <see cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.ConnectAsync(System.String)"/>.
            </remarks>
            <returns>A task that represents the asynchronous operation.</returns>
            <privilege>http://tizen.org/privilege/internet</privilege>
            <exception cref="T:System.InvalidOperationException">
                The current state is not in the valid.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Caller does not have required permission.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.PauseAsync">
            <summary>
            Pauses mirroring from the source.
            </summary>
            <remarks>
            The state must be <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Playing"/> state by
            <see cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.StartAsync"/>.
            </remarks>
            <returns>A task that represents the asynchronous operation.</returns>
            <privilege>http://tizen.org/privilege/internet</privilege>
            <exception cref="T:System.InvalidOperationException">
                The current state is not in the valid.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Caller does not have required permission.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.ResumeAsync">
            <summary>
            Resumes mirroring from the source.
            </summary>
            <remarks>
            The state must be <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Paused"/> state by
            <see cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.PauseAsync"/>.
            </remarks>
            <returns>A task that represents the asynchronous operation.</returns>
            <privilege>http://tizen.org/privilege/internet</privilege>
            <exception cref="T:System.InvalidOperationException">
                The current state is not in the valid.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Caller does not have required permission.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.Disconnect">
            <summary>
            Disconnects from the source.
            </summary>
            <remarks>
            The state must be <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Connected"/>,
            <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Playing"/> or <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Paused"/>.
            </remarks>
            <privilege>http://tizen.org/privilege/internet</privilege>
            <exception cref="T:System.InvalidOperationException">
                The current state is not in the valid.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Caller does not have required permission.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.Unprepare">
            <summary>
            Unprepares the screen mirroring.
            </summary>
            <remarks>
            The state must be <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Prepared"/>,
            or <see cref="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Disconnected"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                The current state is not in the valid.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> object.
            </summary>
            <remarks>
            Call <see cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.Dispose"/> when you are finished using the <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/>.
            The <see cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.Dispose"/> method leaves the <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> in an unusable
            state. After calling <see cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.Dispose"/>, you must release all references to the
            <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> so the garbage collector can reclaim the memory that the
            <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> was occupying.
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.ScreenMirroring.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the ScreenMirroring.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; false to release only unmanaged resources.
            </param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroringAudioInfo">
            <summary>
            Provides a means to retrieve the audio information which is negotiated with the source device.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroringAudioInfo.Codec">
            <summary>
            Gets the negotiated audio codec.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Not connected to a source.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroringAudioInfo.Channels">
            <summary>
            Gets the negotiated audio channels.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Not connected to a source.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroringAudioInfo.SampleRate">
            <summary>
            Gets the negotiated audio sample rate.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Not connected to a source.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroringAudioInfo.BitWidth">
            <summary>
            Gets the negotiated audio bit width.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Not connected to a source.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroringAudioCodec">
            <summary>
            Specifies the audio codecs for <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/>.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Remoting.ScreenMirroringAudioInfo"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringAudioCodec.None">
            <summary>
            The screen mirroring is not negotiated yet.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringAudioCodec.Aac">
            <summary>
            AAC codec.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringAudioCodec.Ac3">
            <summary>
            AC3 codec.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringAudioCodec.Lpcm">
            <summary>
            LPCM codec.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroringVideoCodec">
            <summary>
            Specifies the video codecs for <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/>.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Remoting.ScreenMirroringVideoInfo"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringVideoCodec.None">
            <summary>
            The screen mirroring is not negotiated yet.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringVideoCodec.H264">
            <summary>
            H.264 codec.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroringResolutions">
            <summary>
            Specifies the available combinations of resolutions and fps for <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/>.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringResolutions.R1920x1080P30">
            <summary>
            W-1920, H-1080, 30 fps.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringResolutions.R1280x720P30">
            <summary>
            W-1280, H-720, 30 fps.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringResolutions.R960x540P30">
            <summary>
            W-960, H-540, 30 fps.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringResolutions.R864x480P30">
            <summary>
            W-864, H-480, 30 fps.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringResolutions.R720x480P60">
            <summary>
            W-720, H-480, 60 fps.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringResolutions.R640x480P60">
            <summary>
            W-640, H-480, 60 fps.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringResolutions.R640x360P30">
            <summary>
            W-640, H-360, 30 fps.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroringState">
            <summary>
            Specifies the states of <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/>.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Idle">
            <summary>
            Idle.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Prepared">
            <summary>
            Prepared.
            </summary>
            <seealso cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.Prepare(Tizen.Multimedia.Display,Tizen.Multimedia.Remoting.ScreenMirroringResolutions)"/>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Connected">
            <summary>
            Connected to a source.
            </summary>
            <seealso cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.ConnectAsync(System.String)"/>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Playing">
            <summary>
            Playing.
            </summary>
            <seealso cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.StartAsync"/>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Paused">
            <summary>
            Paused while playing media.
            </summary>
            <seealso cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.PauseAsync"/>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringState.Disconnected">
            <summary>
            Disconnected from source.
            </summary>
            <seealso cref="M:Tizen.Multimedia.Remoting.ScreenMirroring.Disconnect"/>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroringError">
            <summary>
            Specifies the errors for <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/>.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.ScreenMirroringError.InvalidOperation">
            <summary>
            Invalid operation.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.ScreenMirroringVideoInfo">
            <summary>
            Provides a means to retrieve the video information which is negotiated with the source device.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroringVideoInfo.Codec">
            <summary>
            Gets the negotiated video codec.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Not connected to a source.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroringVideoInfo.Resolution">
            <summary>
            Gets the negotiated video resolution.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Not connected to a source.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.ScreenMirroringVideoInfo.FrameRate">
            <summary>
            Gets the negotiated video frame rate.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Not connected to a source.<br/>
                -or-<br/>
                An internal error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Multimedia.Remoting.ScreenMirroring"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaCameraSource">
            <summary>
            Represents a camera source.
            </summary>
            <remarks>The camera privilege(http://tizen.org/privilege/camera) is required.</remarks>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaCameraSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaCameraSource"/> class.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaCameraSource.CameraDeviceId">
            <summary>
            Gets or sets the camera device id.
            </summary>
            <value>A value that specifies the camera device id.</value>
            <exception cref="T:System.InvalidOperationException">MediaSource is not attached yet.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaCustomSource">
            <summary>
            Represents a audio, video custom source.
            </summary>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaCustomSource.#ctor(Tizen.Multimedia.Remoting.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaCustomSource"/> class.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaFileSource">
            <summary>
            Represents a media source with contents read from a file.
            </summary>
            <remarks>
            Depending on where the source file is located either the media storage privilege (http://tizen.org/privilege/mediastorage) is required or<br/>
            the external storage privilege(http://tizen.org/privilege/externalstorage) is required.
            </remarks>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaFileSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaFileSource"/> class.
            </summary>
            <param name="path">The file path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaFileSource.IsLooping">
            <summary>
            Gets or sets the looping mode of the file source.
            </summary>
            <value>
            true if the transfer starts again from the beginning of the file source after reaching the end of the file; otherwise, false\n
            The default value is false.
            </value>
            <exception cref="T:System.InvalidOperationException">MediaSource is not attached yet.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaFileSource.GetTransceiverDirection(Tizen.Multimedia.Remoting.MediaType)">
            <summary>
            Gets the transceiver direction for receiving media stream.
            </summary>
            <remarks>The default value is <see cref="F:Tizen.Multimedia.Remoting.TransceiverDirection.SendRecv"/></remarks>
            <param name="type">The media type.</param>
            <returns>The transceiver direction.</returns>
            <exception cref="T:System.InvalidOperationException">MediaSource is not attached yet.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaFileSource.SetTransceiverDirection(Tizen.Multimedia.Remoting.MediaType,Tizen.Multimedia.Remoting.TransceiverDirection)">
            <summary>
            Sets the transceiver direction for receiving media stream.
            </summary>
            <remarks>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/> state when transceiver direction is set.
            </remarks>
            <param name="type">The media type.</param>
            <param name="direction">The transceiver direction.</param>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                The WebRTC is not in the valid state.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaFileSource.GetPause(Tizen.Multimedia.Remoting.MediaType)">
            <summary>
            Gets the pause status of media file source.
            </summary>
            <remarks>The default value is false.</remarks>
            <param name="type">The media type.</param>
            <returns>The pause status.</returns>
            <exception cref="T:System.InvalidOperationException">MediaSource is not attached yet.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaFileSource.SetPause(Tizen.Multimedia.Remoting.MediaType,System.Boolean)">
            <summary>
            Sets the pause status of media file source.
            </summary>
            <param name="type">The media type.</param>
            <param name="isPaused">The pause status.</param>
            <exception cref="T:System.InvalidOperationException">MediaSource is not attached yet.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaMicrophoneSource">
            <summary>
            Represents a microphone source.
            </summary>
            <remarks>The recorder privilege(http://tizen.org/privilege/recorder) is required.</remarks>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaMicrophoneSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaMicrophoneSource"/> class.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaMicrophoneSource.ApplyAudioStreamPolicy(Tizen.Multimedia.AudioStreamPolicy)">
            <summary>
            Applies the audio stream policy to <see cref="T:Tizen.Multimedia.Remoting.MediaMicrophoneSource"/>.
            </summary>
            <param name="policy">The <see cref="T:Tizen.Multimedia.AudioStreamPolicy"/> to apply.</param>
            <remarks>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/> state.<br/>
            <br/>
            <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/> does not support all <see cref="T:Tizen.Multimedia.AudioStreamType"/>.<br/>
            Supported types are <see cref="F:Tizen.Multimedia.AudioStreamType.Media"/>, <see cref="F:Tizen.Multimedia.AudioStreamType.VoiceRecognition"/>,
            <see cref="F:Tizen.Multimedia.AudioStreamType.Voip"/>, <see cref="F:Tizen.Multimedia.AudioStreamType.MediaExternalOnly"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
                The WebRTC has already been disposed.<br/>
                -or-<br/>
                <paramref name="policy"/> has already been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="policy"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">
                <see cref="T:Tizen.Multimedia.AudioStreamType"/> of <paramref name="policy"/> is not supported on the current platform.
            </exception>
            <seealso cref="T:Tizen.Multimedia.AudioStreamPolicy"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaNullSource">
            <summary>Represents a null source.</summary>
            <remarks>
            If you add this source, WebRTC only receives media stream.<br/>
            <see cref="T:Tizen.Multimedia.Remoting.TransceiverDirection"/> is set <see cref="F:Tizen.Multimedia.Remoting.TransceiverDirection.RecvOnly"/> by default.
            </remarks>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaNullSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaNullSource"/> class.
            </summary>
            <remarks>TransceiverCodec should be set to receive audio, video stream.</remarks>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaNullSource.SetTransceiverCodec(Tizen.Multimedia.Remoting.MediaType,Tizen.Multimedia.Remoting.TransceiverCodec)"/>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaNullSource.GetTransceiverCodec(Tizen.Multimedia.Remoting.MediaType)">
            <summary>
            Gets the transceiver codec for receiving media stream.
            </summary>
            <param name="type">The media type.</param>
            <returns>The transceiver codec.</returns>
            <exception cref="T:System.InvalidOperationException">MediaSource is not attached yet.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaNullSource.SetTransceiverCodec(Tizen.Multimedia.Remoting.MediaType,Tizen.Multimedia.Remoting.TransceiverCodec)"/>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaNullSource.SetTransceiverCodec(Tizen.Multimedia.Remoting.MediaType,Tizen.Multimedia.Remoting.TransceiverCodec)">
             <summary>
             Sets the transceiver codec for receiving media stream.
             </summary>
             <remarks>
             The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/> state when transceiver codec is set.<br/>
            
             </remarks>
             <param name="type">The media type.</param>
             <param name="codec">The transceiver codec.</param>
             <exception cref="T:System.InvalidOperationException">
                 MediaSource is not attached yet.<br/>
             -or-<br/>
                 The WebRTC is not in the valid state.
             </exception>
             <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
             <seealso cref="M:Tizen.Multimedia.Remoting.MediaNullSource.GetTransceiverCodec(Tizen.Multimedia.Remoting.MediaType)"/>
             <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaNullSource.GetSupportedTransceiverCodecs(Tizen.Multimedia.Remoting.MediaType)">
            <summary>
            Retrieves the supported transceiver codecs.
            </summary>
            <param name="type">The media type.</param>
            <returns>The supported transceiver codecs.</returns>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaPacketBufferStatusChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.MediaPacketSourceConfiguration.BufferStatusChanged"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaPacketBufferStatusChangedEventArgs.SourceId">
            <summary>
            Gets the source ID.
            </summary>
            <value>The source ID.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaPacketBufferStatusChangedEventArgs.Status">
            <summary>
            Gets the media packet buffer status.
            </summary>
            <value>The media packet buffer status.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaPacketBufferStatusChangedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaPacketSource">
            <summary>
            Represents a media packet source.
            </summary>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaPacketSource.SupportedAudioTypes">
            <summary>
            Gets all supported audio types.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaPacketSource.SupportedVideoTypes">
            <summary>
            Gets all supported video types.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaPacketSource.#ctor(Tizen.Multimedia.AudioMediaFormat)">
            <summary>
            Initializes a new instance of the MediaPacketSource class with the specified <see cref="T:Tizen.Multimedia.AudioMediaFormat"/>.
            </summary>
            <param name="audioMediaFormat">The <see cref="T:Tizen.Multimedia.AudioMediaFormat"/> for this source.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="audioMediaFormat"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="audioMediaFormat"/> is not supported.</exception>
            <seealso cref="P:Tizen.Multimedia.Remoting.MediaPacketSource.SupportedAudioTypes"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaPacketSource.#ctor(Tizen.Multimedia.VideoMediaFormat)">
            <summary>
            Initializes a new instance of the MediaPacketSource class with the specified <see cref="T:Tizen.Multimedia.VideoMediaFormat"/>.
            </summary>
            <param name="videoMediaFormat">The <see cref="T:Tizen.Multimedia.VideoMediaFormat"/> for this source.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="videoMediaFormat"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="videoMediaFormat"/> is not supported.</exception>
            <seealso cref="P:Tizen.Multimedia.Remoting.MediaPacketSource.SupportedVideoTypes"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaPacketSource.AudioConfiguration">
            <summary>
            Gets the audio configuration, or null if no AudioMediaFormat is specified in the constructor.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaPacketSource.VideoConfiguration">
            <summary>
            Gets the video configuration, or null if no VideoMediaFormat is specified in the constructor.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaPacketSource.Push(Tizen.Multimedia.MediaPacket)">
            <summary>
            Pushes elementary stream to decode audio or video.
            </summary>
            <remarks>
            This source must be set as a source to a WebRTC and the WebRTC must be in the
            <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/> or <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Playing"/> state
            </remarks>
            <param name="packet">The <see cref="T:Tizen.Multimedia.MediaPacket"/> to decode.</param>
            <exception cref="T:System.InvalidOperationException">
                This source is not set as a source to a WebRTC.<br/>
                -or-<br/>
                The WebRTC is not in the valid state.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="packet"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="packet"/> has been disposed.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="packet"/> is neither video nor audio type.<br/>
                -or-<br/>
                The format of packet is not matched with the specified format in the constructor.
            </exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <seealso cref="T:Tizen.Multimedia.MediaPacket"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaPacketSourceConfiguration">
            <summary>
            Provides means to configure properties and handle events for <see cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>.
            </summary>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.MediaPacketSourceConfiguration.BufferStatusChanged">
            <summary>
            Occurs when the buffer underruns or overflows.
            </summary>
            <remarks>The event handler will be executed on an internal thread.</remarks>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaScreenSource">
            <summary>
            Represents a screen source.
            </summary>
            <remarks>
            MediaScreenSource is not allowed to be used by third-party applications due to the security reasons. (Since Tizen 7.0)
            </remarks>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaScreenSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaScreenSource"/> class.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaSource">
            <summary>
            MediaSource is a base class for <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/> sources.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaSource.MediaType">
            <summary>
            Gets the type of MediaSource.
            </summary>
            <value><see cref="P:Tizen.Multimedia.Remoting.MediaSource.MediaType"/></value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaSource.#ctor(Tizen.Multimedia.Remoting.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaSource"/> class.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaSource"/> class.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaSource.TransceiverDirection">
            <summary>
            Gets or sets the transceiver direction of current media source.
            </summary>
            <remarks>
            The default value is <see cref="F:Tizen.Multimedia.Remoting.TransceiverDirection.SendRecv"/> except <see cref="T:Tizen.Multimedia.Remoting.MediaNullSource"/>.<br/>
            If user want to set each audio, video direction in <see cref="T:Tizen.Multimedia.Remoting.MediaFileSource"/>,
            please use <see cref="M:Tizen.Multimedia.Remoting.MediaFileSource.SetTransceiverDirection(Tizen.Multimedia.Remoting.MediaType,Tizen.Multimedia.Remoting.TransceiverDirection)"/>. (Since API level 10)<br/>
            In <see cref="T:Tizen.Multimedia.Remoting.MediaNullSource"/>, only <see cref="F:Tizen.Multimedia.Remoting.TransceiverDirection.RecvOnly"/> can be set.(Since API level 10)
            </remarks>
            <value>A <see cref="P:Tizen.Multimedia.Remoting.MediaSource.TransceiverDirection"/> that specifies the transceiver direction.</value>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                <see cref="F:Tizen.Multimedia.Remoting.TransceiverDirection.SendOnly"/> or <see cref="F:Tizen.Multimedia.Remoting.TransceiverDirection.SendRecv"/> is set for MediaNullSource. (Since API level 10)
            </exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaFileSource.GetTransceiverDirection(Tizen.Multimedia.Remoting.MediaType)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaFileSource.SetTransceiverDirection(Tizen.Multimedia.Remoting.MediaType,Tizen.Multimedia.Remoting.TransceiverDirection)"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaSource.TransceiverCodec">
            <summary>
            Gets or sets the transceiver codec of current media source.
            </summary>
            <remarks>
            This API is not supported in <see cref="T:Tizen.Multimedia.Remoting.MediaFileSource"/>, <see cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>.<br/>
            If <see cref="T:Tizen.Multimedia.Remoting.MediaNullSource"/>, please use <see cref="M:Tizen.Multimedia.Remoting.MediaNullSource.GetTransceiverCodec(Tizen.Multimedia.Remoting.MediaType)"/>
            or <see cref="M:Tizen.Multimedia.Remoting.MediaNullSource.SetTransceiverCodec(Tizen.Multimedia.Remoting.MediaType,Tizen.Multimedia.Remoting.TransceiverCodec)"/> instead.<br/>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/> state when transceiver codec is set.
            </remarks>
            <value>The transceiver codec.</value>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                This MediaSource is not supported type of MediaSource.<br/>
            -or-<br/>
            The WebRTC is not in the valid state.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaNullSource.GetTransceiverCodec(Tizen.Multimedia.Remoting.MediaType)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaNullSource.SetTransceiverCodec(Tizen.Multimedia.Remoting.MediaType,Tizen.Multimedia.Remoting.TransceiverCodec)"/>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaSource.SupportedTransceiverCodecs">
            <summary>
            Retrieves the supported transceiver codecs.
            </summary>
            <remarks>
            This API is not supported in <see cref="T:Tizen.Multimedia.Remoting.MediaFileSource"/>, <see cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>.<br/>
            If user want to get supported codecs for each audio or video in <see cref="T:Tizen.Multimedia.Remoting.MediaNullSource"/>,
            please use <see cref="M:Tizen.Multimedia.Remoting.MediaNullSource.GetSupportedTransceiverCodecs(Tizen.Multimedia.Remoting.MediaType)"/> instead.
            </remarks>
            <returns>The transceiver codecs.</returns>
            <exception cref="T:System.InvalidOperationException">This MediaSource is not supported type of MediaSource.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaNullSource.GetSupportedTransceiverCodecs(Tizen.Multimedia.Remoting.MediaType)"/>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaSource.Pause">
            <summary>
            Gets or sets the pause status of current media source.
            </summary>
            If <see cref="T:Tizen.Multimedia.Remoting.MediaFileSource"/>, please use <see cref="M:Tizen.Multimedia.Remoting.MediaFileSource.GetPause(Tizen.Multimedia.Remoting.MediaType)"/>
            or <see cref="M:Tizen.Multimedia.Remoting.MediaFileSource.SetPause(Tizen.Multimedia.Remoting.MediaType,System.Boolean)"/> instead.<br/> (Since API level 10)
            <value>A value that specifies the pause status.</value>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                This MediaSource is not supported type of MediaSource. (Since API level 10)
            </exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaFileSource.GetPause(Tizen.Multimedia.Remoting.MediaType)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.MediaFileSource.SetPause(Tizen.Multimedia.Remoting.MediaType,System.Boolean)"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaSource.Mute">
            <summary>
            Gets or sets the mute status of the current media source.
            </summary>
            <remarks>
            This API is not supported in <see cref="T:Tizen.Multimedia.Remoting.MediaFileSource"/>, <see cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>, <see cref="T:Tizen.Multimedia.Remoting.MediaNullSource"/>. (Since API level 10)
            </remarks>
            <value>A value that specifies the mute status.</value>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                This MediaSource is not supported type of MediaSource. (Since API level 10)
            </exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaSource.VideoResolution">
            <summary>
            Gets or sets the video resolution of the current media source.
            </summary>
            <value>A value that specifies the video resolution.</value>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                This MediaSource is not Video.
            -or-<br/>
                This MediaSource is not supported type of MediaSource.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaSource.VideoFrameRate">
            <summary>
            Gets or sets the video frame rate of the current media source.
            </summary>
            <remarks>
            This API is only supported in video media source, especially <see cref="T:Tizen.Multimedia.Remoting.MediaCameraSource"/>,
            <see cref="T:Tizen.Multimedia.Remoting.MediaScreenSource"/>, <see cref="T:Tizen.Multimedia.Remoting.MediaTestSource"/>.<br/>
            </remarks>
            <value>A value that specifies the video frame rate.</value>
            <exception cref="T:System.ArgumentException">VideoFrameRate is less than or equal to zero.</exception>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                This MediaSource is not Video.
            -or-<br/>
                This MediaSource is not supported type of MediaSource.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaSource.EncoderBitrate">
            <summary>
            Gets or sets the encoder bitrate of the current media source.
            </summary>
            <remarks>
            This API is not supported in <see cref="T:Tizen.Multimedia.Remoting.MediaFileSource"/>, <see cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>.
            </remarks>
            <value>A value that specifies the encoder bitrate.</value>
            <exception cref="T:System.ArgumentException">EncoderBitrate is less than or equal to zero.</exception>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                This MediaSource is not Video.
            -or-<br/>
                This MediaSource is not supported type of MediaSource.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaSource.EnableAudioLoopback(Tizen.Multimedia.AudioStreamPolicy)">
            <summary>
            Enables the audio loopback. The local audio will be played with <paramref name="policy"/>.
            </summary>
            <param name="policy">The <see cref="T:Tizen.Multimedia.AudioStreamPolicy"/> to apply.</param>
            <remarks>
            <see cref="T:Tizen.Multimedia.Remoting.MediaSource"/> does not support all <see cref="T:Tizen.Multimedia.AudioStreamType"/>.<br/>
            Supported types are <see cref="F:Tizen.Multimedia.AudioStreamType.Media"/>, <see cref="F:Tizen.Multimedia.AudioStreamType.Voip"/>,
            <see cref="F:Tizen.Multimedia.AudioStreamType.MediaExternalOnly"/>.<br/>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="policy"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                This MediaSource is not Audio
            </exception>
            <exception cref="T:System.NotSupportedException">
                <see cref="T:Tizen.Multimedia.AudioStreamType"/> of <paramref name="policy"/> is not supported on the current platform.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                <paramref name="policy"/> or WebRTC has already been disposed.
            </exception>
            <returns><see cref="T:Tizen.Multimedia.Remoting.MediaStreamTrack"/></returns>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaSource.EnableVideoLoopback(Tizen.Multimedia.Display)">
            <summary>
            Enables the video loopback. The local video will be diaplayed in <paramref name="display"/>.
            </summary>
            <param name="display">The <see cref="T:Tizen.Multimedia.Display"/> to apply.</param>
            <exception cref="T:System.ArgumentException">The display has already been assigned to another.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="display"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
                MediaSource is not attached yet.<br/>
            -or-<br/>
                This MediaSource is not Video
            </exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <returns><see cref="T:Tizen.Multimedia.Remoting.MediaStreamTrack"/></returns>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaStreamTrack">
            <summary>
            Provides the ability to control audio/video track.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaStreamTrack.Type">
            <summary>
            Gets the the of media stream track.
            </summary>
            <value><see cref="T:Tizen.Multimedia.Remoting.MediaType"/></value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaStreamTrack.Display">
            <summary>
            Gets or sets the display to show remote video.
            </summary>
            <value>A <see cref="T:Tizen.Multimedia.Display"/> that specifies the display.</value>
            <remarks>
            If user set video source with <see cref="F:Tizen.Multimedia.Remoting.TransceiverDirection.SendRecv"/>, <see cref="P:Tizen.Multimedia.Remoting.MediaStreamTrack.Display"/> must be set.<br/>
            If not, the received video will fill entire screen.<br/>
            If remote track, <see cref="P:Tizen.Multimedia.Remoting.MediaStreamTrack.Display"/> must be set in <see cref="E:Tizen.Multimedia.Remoting.WebRTC.TrackAdded"/> event.<br/>
            The display is created with <see cref="T:Tizen.Multimedia.MediaView"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed of.</exception>
            <exception cref="T:System.ArgumentException">The value has already been assigned to another WebRTC.</exception>
            <exception cref="T:System.InvalidOperationException">
            The WebRTC is not called in <see cref="E:Tizen.Multimedia.Remoting.WebRTC.TrackAdded"/> event.
            -or-<br/>
            This MediaStreamTrack is not Video.
            </exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaStreamTrack.DisplayMode">
            <summary>
            Gets or sets the display mode.
            </summary>
            <remarks>
            This property is meaningful only in overlay or EVAS surface display type.
            </remarks>
            <value>A <see cref="T:Tizen.Multimedia.Remoting.WebRTCDisplayMode"/> that specifies the display mode.</value>
            <exception cref="T:System.ArgumentException">Display mode type is incorrect.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Tizen.Multimedia.Remoting.MediaStreamTrack.Display"/> is not set.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.MediaStreamTrack.DisplayVisible">
            <summary>
            Gets or sets the display visibility.
            </summary>
            <value>true if WebRTC display is visible, otherwise false.</value>
            <remarks>
            This property is meaningful only in overlay or EVAS surface display type.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Tizen.Multimedia.Remoting.MediaStreamTrack.Display"/> is not set.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaStreamTrack.ApplyAudioStreamPolicy(Tizen.Multimedia.AudioStreamPolicy)">
            <summary>
            Applies the audio stream policy to remote track.
            </summary>
            <param name="policy">The <see cref="T:Tizen.Multimedia.AudioStreamPolicy"/> to apply.</param>
            <remarks>
            This must be called in <see cref="E:Tizen.Multimedia.Remoting.WebRTC.TrackAdded"/> event.<br/>
            <br/>
            <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/> does not support all <see cref="T:Tizen.Multimedia.AudioStreamType"/>.<br/>
            Supported types are <see cref="F:Tizen.Multimedia.AudioStreamType.Media"/>, <see cref="F:Tizen.Multimedia.AudioStreamType.Voip"/>,
            <see cref="F:Tizen.Multimedia.AudioStreamType.MediaExternalOnly"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="policy"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <see cref="E:Tizen.Multimedia.Remoting.WebRTC.AudioFrameEncoded"/> was set.<br/>
            -or-<br/>
            This method was not called in <see cref="E:Tizen.Multimedia.Remoting.WebRTC.TrackAdded"/> event.
            -or-<br/>
            This MediaStreamTrack is not Audio.
            </exception>
            <exception cref="T:System.NotSupportedException">
                <see cref="T:Tizen.Multimedia.AudioStreamType"/> of <paramref name="policy"/> is not supported on the current platform.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The WebRTC has already been disposed.<br/>
                -or-<br/>
                <paramref name="policy"/> has already been disposed.
            </exception>
            <seealso cref="T:Tizen.Multimedia.AudioStreamPolicy"/>
            <seealso cref="E:Tizen.Multimedia.Remoting.WebRTC.TrackAdded"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaTestSource">
            <summary>
            Represents an audio or a video test source.
            </summary>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.MediaTestSource.#ctor(Tizen.Multimedia.Remoting.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.MediaTestSource"/> class.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTC">
            <summary>
            Provides the ability to control WebRTC.
            </summary>
            <since_tizen> 9 </since_tizen>
            <summary>
            Provides the ability to control WebRTC.
            </summary>
            <since_tizen> 9 </since_tizen>
            <summary>
            Provides the ability to control WebRTC.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/> class.
            </summary>
            <feature>http://tizen.org/feature/network.wifi</feature>
            <feature>http://tizen.org/feature/network.telephony</feature>
            <feature>http://tizen.org/feature/network.ethernet</feature>
            <privilege>http://tizen.org/privilege/internet</privilege>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the permission is denied.</exception>
            <exception cref="T:System.NotSupportedException">The required feature is not supported.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.Dispose">
            <summary>
            Releases all resources used by the current instance.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/>.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources;
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.Start">
            <summary>
            Starts the WebRTC.
            </summary>
            <remarks>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/> state.<br/>
            The WebRTC state will be <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/> state.<br/>
            The user should check whether <see cref="P:Tizen.Multimedia.Remoting.WebRTC.State" /> is changed to <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/> state or not.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <see also="WebRTCState"/>
            <see also="StateChanged"/>
            <see also="CreateOffer"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.StartAsync">
            <summary>
            Starts the WebRTC asynchronously.
            </summary>
            <remarks>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/> state.<br/>
            The WebRTC state will be <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/> state.<br/>
            This ensures that <see cref="P:Tizen.Multimedia.Remoting.WebRTC.State" /> is changed to <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/> state.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <see also="WebRTCState"/>
            <see also="CreateOffer"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.Stop">
            <summary>
            Stops the WebRTC.
            </summary>
            <remarks>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/> or <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Playing"/> state.<br/>
            The WebRTC state will be <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/> state.<br/>
            The user should check whether <see cref="P:Tizen.Multimedia.Remoting.WebRTC.State" /> is changed to <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/> state or not.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.CreateOfferAsync">
            <summary>
            Creates SDP offer asynchronously to start a new WebRTC connection to a remote peer.
            </summary>
            <remarks>The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/></remarks>
            <returns>The SDP offer.</returns>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.CreateAnswerAsync"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.CreateAnswerAsync">
            <summary>
            Creates SDP answer asynchronously with option to an offer received from a remote peer.
            </summary>
            <remarks>The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/></remarks>
            <returns>The SDP answer.</returns>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.CreateOfferAsync"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.SetLocalDescription(System.String)">
            <summary>
            Sets the session description for a local peer.
            </summary>
            <remarks>The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/>.</remarks>
            <param name="description">The local session description.</param>
            <exception cref="T:System.ArgumentException">The description is empty string.</exception>
            <exception cref="T:System.ArgumentNullException">The description is null.</exception>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.CreateOfferAsync"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.CreateAnswerAsync"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.SetRemoteDescription(System.String)">
            <summary>
            Sets the session description of the remote peer's current offer or answer.
            </summary>
            <remarks>The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/>.</remarks>
            <param name="description">The remote session description.</param>
            <exception cref="T:System.ArgumentException">The description is empty string.</exception>
            <exception cref="T:System.ArgumentNullException">The description is null.</exception>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.CreateOfferAsync"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.CreateAnswerAsync"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.AddIceCandidate(System.String)">
            <summary>
            Adds a new ICE candidate from the remote peer over its signaling channel.
            </summary>
            <remarks>The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/>.</remarks>
            <param name="iceCandidate">The ICE candidate.</param>
            <exception cref="T:System.ArgumentException">The ICE candidate is empty string.</exception>
            <exception cref="T:System.ArgumentNullException">The ICE candidate is null.</exception>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.AddIceCandidates(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds new ICE candidates from the remote peer over its signaling channel.
            </summary>
            <remarks>The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating"/>.</remarks>
            <param name="iceCandidates">The ICE candidates.</param>
            <exception cref="T:System.ArgumentException">The ICE candidate is empty string.</exception>
            <exception cref="T:System.ArgumentNullException">The ICE candidate is null.</exception>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)">
            <summary>
            Adds media source.
            </summary>
            <remarks>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/>.<br/>
            Each MediaSource requires different feature or privilege.<br/>
            <see cref="T:Tizen.Multimedia.Remoting.MediaCameraSource"/> needs camera feature and privilege.<br/>
            <see cref="T:Tizen.Multimedia.Remoting.MediaMicrophoneSource"/> needs microphone feature and recorder privilege.<br/>
            </remarks>
            <param name="source">The media sources to add.</param>
            <feature>http://tizen.org/feature/camera</feature>
            <feature>http://tizen.org/feature/microphone</feature>
            <privilege>http://tizen.org/privilege/camera</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <privilege>http://tizen.org/privilege/recorder</privilege>
            <exception cref="T:System.ArgumentNullException">The media source is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            The WebRTC is not in the valid state.<br/>
            - or -<br/>
            All or one of <paramref name="source"/> was already detached.
            </exception>
            <exception cref="T:System.NotSupportedException">The required feature is not supported.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the permission is denied.</exception>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaCameraSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaMicrophoneSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaTestSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.RemoveSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.RemoveSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])">
            <summary>
            Adds media sources.
            </summary>
            <remarks>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/>.<br/>
            Each MediaSource requires different feature or privilege.<br/>
            <see cref="T:Tizen.Multimedia.Remoting.MediaCameraSource"/> needs camera feature and privilege.<br/>
            <see cref="T:Tizen.Multimedia.Remoting.MediaMicrophoneSource"/> needs microphone feature and recorder privilege.<br/>
            </remarks>
            <param name="sources">The media sources to add.</param>
            <feature>http://tizen.org/feature/camera</feature>
            <feature>http://tizen.org/feature/microphone</feature>
            <privilege>http://tizen.org/privilege/camera</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <privilege>http://tizen.org/privilege/recorder</privilege>
            <exception cref="T:System.ArgumentNullException">The media source is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            The WebRTC is not in the valid state.<br/>
            - or -<br/>
            All or one of <paramref name="sources"/> was already detached.
            </exception>
            <exception cref="T:System.NotSupportedException">The required feature is not supported.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the permission is denied.</exception>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaCameraSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaMicrophoneSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaTestSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.RemoveSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.RemoveSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.RemoveSource(Tizen.Multimedia.Remoting.MediaSource)">
            <summary>
            Removes media source.
            </summary>
            <remarks>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/>.<br/>
            If user want to use removed MediaSource again, user should create new instance for it.
            </remarks>
            <param name="source">The media source to remove.</param>
            <exception cref="T:System.ArgumentNullException">The media source is null.</exception>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaCameraSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaMicrophoneSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaTestSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.RemoveSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.RemoveSources(Tizen.Multimedia.Remoting.MediaSource[])">
            <summary>
            Removes media sources.
            </summary>
            <remarks>
            The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Idle"/>.<br/>
            If user want to use removed MediaSource again, user should create new instance for it.
            </remarks>
            <param name="sources">The media source to remove.</param>
            <exception cref="T:System.ArgumentNullException">The media source is null.</exception>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaCameraSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaMicrophoneSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaTestSource"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.AddSources(Tizen.Multimedia.Remoting.MediaSource[])"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.RemoveSource(Tizen.Multimedia.Remoting.MediaSource)"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.SetTurnServer(System.String)">
            <summary>
            Sets a turn server.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="turnServer"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.SetTurnServers(System.String[])">
            <summary>
            Sets turn servers.
            </summary>
            <exception cref="T:System.ArgumentNullException">The one of <paramref name="turnServers"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.GetTurnServer">
            <summary>
            Retrieves all turn servers.
            </summary>
            <returns>The turn server list.</returns>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.GetStatistics(Tizen.Multimedia.Remoting.WebRTCStatisticsCategory)">
            <summary>
            Retrieves the current statistics information.
            </summary>
            <remarks>The WebRTC must be in the <see cref="F:Tizen.Multimedia.Remoting.WebRTCState.Playing"/></remarks>
            <returns>The WebRTC statistics informations.</returns>
            <param name="category">The category of statistics to get.</param>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The WebRTC is not in the valid state.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTC.WebRTCStatistics">
            <summary>
            Represents WebRTC statistics information.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.WebRTCStatistics.Category">
            <summary>
            Gets the category of statistics.
            </summary>
            <value>The category of WebRTC statistics information</value>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.WebRTCStatistics.Name">
            <summary>
            Gets the name of statistics.
            </summary>
            <value>The name of WebRTC statistics information</value>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.WebRTCStatistics.Property">
            <summary>
            Gets the property of statistics.
            </summary>
            <value>The property of WebRTC statistics information</value>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.WebRTCStatistics.Value">
            <summary>
            Gets the value of statistics.
            </summary>
            <value>The value of WebRTC statistics information</value>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTC.WebRTCStatistics.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.ErrorOccurred">
            <summary>
            Occurs when any error occurs.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.StateChanged">
            <summary>
            Occurs when WebRTC state is changed.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.IceGatheringStateChanged">
            <summary>
            Occurs when the WebRTC ICE gathering state is changed.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.SignalingStateChanged">
            <summary>
            Occurs when the WebRTC signaling state is changed.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.PeerConnectionStateChanged">
            <summary>
            Occurs when the WebRTC peer connection state is changed.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.IceConnectionStateChanged">
            <summary>
            Occurs when the WebRTC ICE connection state is changed.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.NegotiationNeeded">
            <summary>
            Occurs when negotiation is needed.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.IceCandidate">
            <summary>
            Occurs when the WebRTC needs to send the ICE candidate message to the remote peer.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.TrackAdded">
            <summary>
            Occurs when a new track has been added to the WebRTC.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.AudioFrameEncoded">
            <summary>
            Occurs when each audio frame is ready to render.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.VideoFrameEncoded">
            <summary>
            Occurs when each video frame is ready to render.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTC.DataChannel">
            <summary>
            Occurs when the data channel is created to the connection by the remote peer.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.State">
            <summary>
            Gets the state of the WebRTC.
            </summary>
            <value>The current state of the WebRTC.</value>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.IceGatheringState">
            <summary>
            Gets the Ice gathering state of the WebRTC.
            </summary>
            <value>The current Ice gathering state of the WebRTC.</value>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.SignalingState">
            <summary>
            Gets the signaling state of the WebRTC.
            </summary>
            <value>The current signaling state of the WebRTC.</value>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.PeerConnectionState">
            <summary>
            Gets the peer connection state of the WebRTC.
            </summary>
            <value>The current peer connection state of the WebRTC.</value>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.IceConnectionState">
            <summary>
            Gets the ICE connection state of the WebRTC.
            </summary>
            <value>The current ICE connection state of the WebRTC.</value>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.StunServer">
            <summary>
            Gets or sets the STUN server url.
            </summary>
            <value>The STUN server url</value>
            <exception cref="T:System.ArgumentNullException">STUN server URI is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.IceTransportPolicy">
            <summary>
            Gets or sets the ICE transport policy.
            </summary>
            <value>The policy of ICE transport</value>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTC.BundlePolicy">
            <summary>
            Gets or sets the bundle policy.<br/>
            The default bundle policy is <see cref="F:Tizen.Multimedia.Remoting.WebRTCBundlePolicy.MaxBundle"/>.
            </summary>
            <value>The policy of bundle</value>
            <exception cref="T:System.ObjectDisposedException">The WebRTC has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCDataChannel">
            <summary>
            Provides the ability to control WebRTC data channel.
            </summary>
            <since_tizen> 9 </since_tizen>
            <summary>
            Provides the ability to control WebRTC data channel.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCDataChannel.#ctor(Tizen.Multimedia.Remoting.WebRTC,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.WebRTCDataChannel"/> class.
            </summary>
            <param name="webRtc">The owner of this WebRTCDataChannel.</param>
            <param name="label">The name of this data channel.</param>
            <exception cref="T:System.ArgumentNullException">The webRtc or label is null.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCDataChannel.#ctor(Tizen.Multimedia.Remoting.WebRTC,System.String,Tizen.Applications.Bundle)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.WebRTCDataChannel"/> class.
            </summary>
            <remarks>
            The bundle is similar format as the RTCDataChannelInit members outlined https://www.w3.org/TR/webrtc/#dom-rtcdatachannelinit.<br/>
            The following attributes can be set to options by using <see cref="T:Tizen.Applications.Bundle"/> API:<br/>
            'ordered' of type bool            : Whether the channel will send data with guaranteed ordering. The default value is true.<br/>
            'max-packet-lifetime' of type int : The time in milliseconds to attempt transmitting unacknowledged data. -1 for unset. The default value is -1.<br/>
            'max-retransmits' of type int     : The number of times data will be attempted to be transmitted without acknowledgement before dropping. The default value is -1.<br/>
            'protocol' of type string         : The subprotocol used by this channel. The default value is NULL.<br/>
            'id' of type int                  : Override the default identifier selection of this channel. The default value is -1.<br/>
            'priority' of type int            : The priority to use for this channel(1:very low, 2:low, 3:medium, 4:high). The default value is 2.<br/>
            </remarks>
            <param name="webRtc">The owner of this WebRTCDataChannel.</param>
            <param name="label">The name of this data channel.</param>
            <param name="bundle">The data channel option.</param>
            <exception cref="T:System.ArgumentNullException">The webRtc or label is null.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCDataChannel.Label">
            <summary>
            Gets the label of this data channel.
            </summary>
            <value>The label.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCDataChannel.BufferedAmount">
            <summary>
            Gets the amount of buffered data.
            </summary>
            <value>The buffered amount in bytes.</value>
            <exception cref="T:System.ObjectDisposedException">The WebRTCDataChannel has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCDataChannel.BufferedAmountLowThreshold">
            <summary>
            Gets or sets the threshold of data channel buffered amount.<br/>
            If the amount of buffered data is lower than threshold value, <see cref="E:Tizen.Multimedia.Remoting.WebRTCDataChannel.BufferedAmountLow"/> will be occurred.<br/>
            The default value is 0, which means <see cref="E:Tizen.Multimedia.Remoting.WebRTCDataChannel.BufferedAmountLow"/> is disabled and will not be raised.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The WebRTCDataChannel has already been disposed.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCDataChannel.Send(System.String)">
            <summary>
            Sends a string data across the data channel to the remote peer.
            </summary>
            <param name="data">The string data to send</param>
            <exception cref="T:System.ObjectDisposedException">The WebRTCDataChannel has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCDataChannel.Send(System.Byte[])">
            <summary>
            Sends byte data across the data channel to the remote peer.
            </summary>
            <param name="data">The byte data to send</param>
            <exception cref="T:System.ObjectDisposedException">The WebRTCDataChannel has already been disposed.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCDataChannel.Dispose">
            <summary>
            Releases all resources used by the current instance.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCDataChannel.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Tizen.Multimedia.Remoting.WebRTCDataChannel"/>.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources;
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTCDataChannel.Opened">
            <summary>
            Occurs when the data channel's underlying data transport is established.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTCDataChannel.Closed">
            <summary>
            Occurs when the data channel has closed down.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTCDataChannel.MessageReceived">
            <summary>
            Occurs when a message is received from the remote peer.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTCDataChannel.ErrorOccurred">
            <summary>
            Occurs when an error occurs on the data channel.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTCDataChannel.BufferedAmountLow">
            <summary>
            Occurs when the buffered data amount is lower than <see cref="P:Tizen.Multimedia.Remoting.WebRTCDataChannel.BufferedAmountLowThreshold"/>.<br/>
            If <see cref="P:Tizen.Multimedia.Remoting.WebRTCDataChannel.BufferedAmountLowThreshold"/> is not set, this event will not be raised.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCDataChannelErrorOccurredEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTCDataChannel.ErrorOccurred"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCDataChannelErrorOccurredEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCDataChannelErrorOccurredEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCDataChannelEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.DataChannel"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCDataChannelEventArgs.DataChannel">
            <summary>
            Gets the created data channel instance.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCDataChannelMessageReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTCDataChannel.MessageReceived"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCDataChannelMessageReceivedEventArgs.Type">
            <summary>
            Gets the data channel type.
            </summary>
            <value>The data channel type.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCDataChannelMessageReceivedEventArgs.Message">
            <summary>
            Gets the string message from remote peer.
            </summary>
            <remarks>
            If <see cref="P:Tizen.Multimedia.Remoting.WebRTCDataChannelMessageReceivedEventArgs.Type"/> is <see cref="F:Tizen.Multimedia.Remoting.DataChannelType.Bytes"/>, this property is null.
            </remarks>
            <value>The message.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCDataChannelMessageReceivedEventArgs.Data">
            <summary>
            Gets the byte data from remote peer.
            </summary>
            <remarks>
            If <see cref="P:Tizen.Multimedia.Remoting.WebRTCDataChannelMessageReceivedEventArgs.Type"/> is <see cref="F:Tizen.Multimedia.Remoting.DataChannelType.Strings"/>, this property is null.
            </remarks>
            <value>The message.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCDataChannelMessageReceivedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCError">
            <summary>
            Specifies errors.
            </summary>
            <seealso cref="E:Tizen.Multimedia.Remoting.WebRTC.ErrorOccurred"/>
            <seealso cref="T:Tizen.Multimedia.Remoting.WebRTCErrorOccurredEventArgs"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCError.ConnectionFailed">
            <summary>
            The connection failed.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCError.StreamFailed">
            <summary>
            The stream failed.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCError.ResourceFailed">
            <summary>
            The resource failed.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCError.ResourceConflict">
            <summary>
            The resource conflicted.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCError.InvalidOperation">
            <summary>
            The invalid operation.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCState">
            <summary>
            Specifies states that a <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/> can have.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCState.Idle">
            <summary>
            The Initial state, create but not started.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCState.Negotiating">
            <summary>
            Started and negotiating.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCState.Playing">
            <summary>
            Negotiated and started all streams.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCIceGatheringState">
            <summary>
            Specifies ICE gathering states that a <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/> can have.
            </summary>
            <seealso cref="E:Tizen.Multimedia.Remoting.WebRTC.IceCandidate"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceGatheringState.New">
            <summary>
            The Initial state.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceGatheringState.Gathering">
            <summary>
            Ice candidate is creating.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceGatheringState.Completed">
            <summary>
            Ice gathering sequence has been completed.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCSignalingState">
            <summary>
            Specifies signaling states that a <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/> can have.
            </summary>
            <remarks>This state is related in SDP offer/answer.</remarks>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.SetLocalDescription(System.String)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.SetRemoteDescription(System.String)"/>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTC.CreateAnswerAsync"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCSignalingState.Stable">
            <summary>
            The Initial state.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCSignalingState.HaveLocalOffer">
            <summary>
            The local SDP offer has been applied successfully.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCSignalingState.HaveRemoteOffer">
            <summary>
            The remote SDP offer has been applied successfully.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCSignalingState.HaveLocalPrAnswer">
            <summary>
            The SDP offer sent by the remote peer has been applied and <br/>
            an answer has been created and applied.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCSignalingState.HaveRemotePrAnswer">
            <summary>
            A provisional answer has been received and successfully applied in local.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCSignalingState.Closed">
            <summary>
            The connection is closed.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCPeerConnectionState">
            <summary>
            Specifies peer connection states that a <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/> can have.
            </summary>
            <remarks>This state is related in peer connection.</remarks>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCPeerConnectionState.New">
            <summary>
            The Initial state.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCPeerConnectionState.Connecting">
            <summary>
            Establishing a connection is in the process.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCPeerConnectionState.Connected">
            <summary>
            The remote SDP offer has been applied successfully.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCPeerConnectionState.Disconnected">
            <summary>
            The SDP offer sent by the remote peer has been applied and an answer has been created and applied.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCPeerConnectionState.Failed">
            <summary>
            A provisional answer has been received and successfully applied in local.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCPeerConnectionState.Closed">
            <summary>
            The connection is closed.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCIceConnectionState">
            <summary>
            Specifies ICE connection states that a <see cref="T:Tizen.Multimedia.Remoting.WebRTC"/> can have.
            </summary>
            <remarks>This state describe the current state of local and its connection to the ICE server(STUN or TURN).</remarks>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceConnectionState.New">
            <summary>
            The Initial state.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceConnectionState.Checking">
            <summary>
            Checking pairs of local and remote candidates against one another to try to find a compatible match.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceConnectionState.Connected">
            <summary>
            A usable pairing of local and remote candidates has been found for all components of the connection,<br/>
            and the connection has been established.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceConnectionState.Completed">
            <summary>
            Gathering candidates has been finished and hecked all pairs against one another,<br/>
            and has found a connection for all components.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceConnectionState.Failed">
            <summary>
            There's no compatible matches.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceConnectionState.Disconnected">
            <summary>
            This is a less stringent test than "Failed" and may trigger intermittently and resolve just as spontaneously on less reliable networks,<br/>
            or during temporary disconnections. When the problem resolves, the connection may return to the "connected" state.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCIceConnectionState.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.DataChannelType">
            <summary>
            Specifies data type that transfers on data channel.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.DataChannelType.Strings">
            <summary>
            The string data type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.DataChannelType.Bytes">
            <summary>
            The byte data type.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaPacketBufferStatus">
            <summary>
            Specifies the buffer state type of <see cref="T:Tizen.Multimedia.Remoting.MediaPacketSource"/>.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaPacketBufferStatus.Underrun">
            <summary>
            The buffer underrun.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaPacketBufferStatus.Overflow">
            <summary>
            The buffer overflow.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.MediaType">
            <summary>
            Specifies the media type.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaType.Audio">
            <summary>
            The audio type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.MediaType.Video">
            <summary>
            The video type.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.TransceiverDirection">
            <summary>
            Specifies the transceiver direction type.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.TransceiverDirection.SendOnly">
            <summary>
            Send only.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.TransceiverDirection.RecvOnly">
            <summary>
            Receive only.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.TransceiverDirection.SendRecv">
            <summary>
            Send and receive.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.TransceiverCodec">
            <summary>
            Specifies the transceiver codec type.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.TransceiverCodec.Pcmu">
            <summary>
            PCMU.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.TransceiverCodec.Pcma">
            <summary>
            PCMA.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.TransceiverCodec.Opus">
            <summary>
            OPUS.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.TransceiverCodec.Vp8">
            <summary>
            VP8.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.TransceiverCodec.Vp9">
            <summary>
            VP9.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.TransceiverCodec.H264">
            <summary>
            H264.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.IceTransportPolicy">
            <summary>
            Specifies the policy of Ice transport.
            </summary>
            <remarks>
            See also https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum
            </remarks>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.IceTransportPolicy.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.IceTransportPolicy.Relay">
            <summary>
            Relay.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCDisplayMode">
            <summary>
            Specifies the display type.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCDisplayMode.LetterBox">
            <summary>
            Letter box.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCDisplayMode.OriginSize">
            <summary>
            Original size.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCDisplayMode.Full">
            <summary>
            Full screen.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCBundlePolicy">
            <summary>
            Specifies the bundle policy.
            </summary>
            <remarks>
            The details of bundle policy enum is described in https://www.w3.org/TR/webrtc/#rtcbundlepolicy-enum.
            </remarks>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCBundlePolicy.None">
            <summary>
            No bundle.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCBundlePolicy.MaxBundle">
            <summary>
            Bundle all media tracks into a stream when it's transfered to remote peer.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.SignalingMessageType">
            <summary>
            Specifies the signaling message type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.SignalingMessageType.Connected">
            <summary>
            Connected.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.SignalingMessageType.Disconnected">
            <summary>
            Disconnected.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.SignalingMessageType.SessionEstablished">
            <summary>
            Session established.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.SignalingMessageType.SessionClosed">
            <summary>
            Session closed.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.SignalingMessageType.Sdp">
            <summary>
            SDP(Session Description Protocol).
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.SignalingMessageType.IceCandidate">
            <summary>
            ICE(Interactive Connectivity Establishment) candidate.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.SignalingMessageType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCStatisticsCategory">
            <summary>
            Specifies the category of WebRTC statistics.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsCategory.Codec">
            <summary>
            Codec.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsCategory.InboundRtp">
            <summary>
            Inbound RTP.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsCategory.OutboundRtp">
            <summary>
            Outbound RTP.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsCategory.RemoteInboundRtp">
            <summary>
            Remote inbound RTP.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsCategory.RemoteOutboundRtp">
            <summary>
            Remote Outbound RTP.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsCategory.All">
            <summary>
            All types of WebRTC statistics.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty">
            <summary>
            Specifies the WebRTC statistics property.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.Timestamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.Id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.PayloadType">
            <summary>
            Payload type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.ClockRate">
            <summary>
            Clock rate.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.Channels">
            <summary>
            The number of channels.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.MimeType">
            <summary>
            MIME type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.CodecType">
            <summary>
            Codec type.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.SdpFmtpLine">
            <summary>
            SDP FMTP line.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.Ssrc">
            <summary>
            SSRC.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.TransportId">
            <summary>
            Transport ID.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.CodecId">
            <summary>
            Codec ID.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.PacketsReceived">
            <summary>
            Received packet.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.PacketsLost">
            <summary>
            Lost packet.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.PacketsDiscarded">
            <summary>
            Discarted packet.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.Jitter">
            <summary>
            Jitter.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.BytesReceived">
            <summary>
            Received bytes.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.PacketsDuplicated">
            <summary>
            Duplicated packet.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.BytesSent">
            <summary>
            Sent bytes.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.PacketsSent">
            <summary>
            Sent packets.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.RemoteId">
            <summary>
            Remote ID.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.FirCount">
            <summary>
            FIR count.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.PliCount">
            <summary>
            PLI count.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.NackCount">
            <summary>
            NACK count.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.RoundTripTime">
            <summary>
            Round trip time.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.FractionLost">
            <summary>
            Lost fraction.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.RemoteTimestamp">
            <summary>
            Remote timestamp.
            </summary>
        </member>
        <member name="F:Tizen.Multimedia.Remoting.WebRTCStatisticsProperty.LocalId">
            <summary>
            Local ID.
            </summary>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCErrorOccurredEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.ErrorOccurred"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCErrorOccurredEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCErrorOccurredEventArgs.State">
            <summary>
            Gets the current state.
            </summary>
            <value>The state.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCErrorOccurredEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCFrameEncodedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.AudioFrameEncoded"/> or <see cref="E:Tizen.Multimedia.Remoting.WebRTC.VideoFrameEncoded"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCFrameEncodedEventArgs.MediaStreamTrack">
            <summary>
            Gets the track information.
            </summary>
            <value>The media type.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCFrameEncodedEventArgs.Packet">
            <summary>
            Gets the media packet which has a frame data.
            </summary>
            <value>The media packet which has a frame data.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCFrameEncodedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCIceCandidateEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.IceCandidate"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCIceCandidateEventArgs.ICECandidate">
            <summary>
            Gets the ICE candidate.
            </summary>
            <value>The ICE candidate.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCIceCandidateEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCIceConnectionStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.IceConnectionStateChanged"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCIceConnectionStateChangedEventArgs.State">
            <summary>
            The ICE connection state.
            </summary>
            <value>The ICE connection state</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCIceConnectionStateChangedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCIceGatheringStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.IceGatheringStateChanged"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCIceGatheringStateChangedEventArgs.State">
            <summary>
            The current ICE gathering state.
            </summary>
            <value>The ICE gathering state.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCIceGatheringStateChangedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCPeerConnectionStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.PeerConnectionStateChanged"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCPeerConnectionStateChangedEventArgs.State">
            <summary>
            The peer connection state.
            </summary>
            <value>The peer connection state</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCPeerConnectionStateChangedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCSignalingEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTCSignalingClient.SignalingMessage"/> event.
            </summary>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCSignalingEventArgs.MessageType">
            <summary>
            Gets the signaling message type.
            </summary>
            <value>The signaling message type.</value>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCSignalingEventArgs.Message">
            <summary>
            Gets the message from remote peer.
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCSignalingServer">
            <summary>
            Provides the ability to control WebRTCSignalingServer.
            </summary>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.WebRTCSignalingServer"/> class.
            </summary>
            <param name="port">The server port.</param>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingServer.Start">
            <summary>
            Starts the signaling server.
            </summary>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingServer.Stop">
            <summary>
            Stops the signaling server.
            </summary>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingServer.Dispose">
            <summary>
            Releases all resources used by the current instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The WebRTCSignalingServer has already been disposed.</exception>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingServer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Tizen.Multimedia.Remoting.WebRTCSignalingServer"/>.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources;
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCSignalingClient">
            <summary>
            Provides the ability to control WebRTCSignalingClient.
            </summary>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Multimedia.Remoting.WebRTCSignalingClient"/> class.
            </summary>
            <param name="serverIp">The server IP.</param>
            <param name="port">The server port.</param>
            <seealso cref="M:Tizen.Multimedia.Remoting.WebRTCSignalingClient.Connect"/>
        </member>
        <member name="E:Tizen.Multimedia.Remoting.WebRTCSignalingClient.SignalingMessage">
            <summary>
            Occurs when a message to be handled is sent from the remote peer or the signaling server.
            </summary>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingClient.Connect">
            <summary>
            Connect to signaling server and return client id.
            </summary>
            <returns>The signaling client ID.</returns>
            <exception cref="T:System.ObjectDisposedException">The WebRTCSignalingClient has already been disposed.</exception>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingClient.RequestSession(System.Int32)">
            <summary>
            Requests session with peer ID.
            </summary>
            <param name="peerId">The ID of remote peer.</param>
            <exception cref="T:System.ObjectDisposedException">The WebRTCSignalingClient has already been disposed.</exception>
            <see cref="F:Tizen.Multimedia.Remoting.SignalingMessageType.SessionEstablished"/>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingClient.SendMessage(System.String)">
            <summary>
            Sends the signaling message to remote peer.
            </summary>
            <param name="message"></param>
            <exception cref="T:System.ObjectDisposedException">The WebRTCSignalingClient has already been disposed.</exception>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingClient.Dispose">
            <summary>
            Releases all resources used by the current instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The WebRTCSignalingClient has already been disposed.</exception>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Tizen.Multimedia.Remoting.WebRTCSignalingClient"/>.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources;
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCSignalingStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.SignalingStateChanged"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCSignalingStateChangedEventArgs.State">
            <summary>
            The signaling state.
            </summary>
            <value>The signaling state</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCSignalingStateChangedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.StateChanged"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCStateChangedEventArgs.Previous">
            <summary>
            The previous state.
            </summary>
            <value>The previous WebRTC state</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCStateChangedEventArgs.Current">
            <summary>
            The current state.
            </summary>
            <value>The current WebRTC state</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCStateChangedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Multimedia.Remoting.WebRTCTrackAddedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Multimedia.Remoting.WebRTC.TrackAdded"/> event.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Multimedia.Remoting.WebRTCTrackAddedEventArgs.MediaStreamTrack">
            <summary>
            Gets the media type.
            </summary>
            <value>The media type.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Multimedia.Remoting.WebRTCTrackAddedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
    </members>
</doc>
