<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tizen.Content.MediaContent</name>
    </assembly>
    <members>
        <member name="T:Tizen.Content.MediaContent.Album">
            <summary>
            Represents a logical collection grouping of related media information.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.AlbumCommand"/>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Album.Id">
            <summary>
            Gets the ID of the album.
            </summary>
            <value>The unique ID of the album.</value>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Album.Artist">
            <summary>
            Gets the artist name of the album.
            </summary>
            <value>The artist name.</value>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Album.AlbumArtPath">
            <summary>
            Gets the path to the album art.
            </summary>
            <value>The path to the album art.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Album.Name">
            <summary>
            Gets the name of the album.
            </summary>
            <value>The album name.</value>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Album.ToString">
            <summary>
            Returns a string representation of the album.
            </summary>
            <returns>A string representation of the current album.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.AlbumCommand">
            <summary>
            Provides commands to manage albums in the database.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.Album"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.#ctor(Tizen.Content.MediaContent.MediaDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.AlbumCommand"/> class with the specified <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/>.
            </summary>
            <param name="database">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> that the commands run on.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="database"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="database"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.Count">
            <summary>
            Retrieves the number of albums.
            </summary>
            <returns>The number of albums.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.Count(Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of albums with <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of albums.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.Select">
            <summary>
            Retrieves all the albums.
            </summary>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.Select(Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the albums with <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.Select(System.Int32)">
            <summary>
            Retrieves an album with the album ID.
            </summary>
            <param name="albumId">The ID of the album to query with.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Album"/> if <paramref name="albumId"/> exists, otherwise null.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="albumId"/> is equal to or less than zero.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.CountMember(System.Int32)">
            <summary>
            Retrieves the number of media information that belongs to the album.
            </summary>
            <param name="albumId">The ID of the album to query with.</param>
            <returns>The number of media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="albumId"/> is equal to or less than zero.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.CountMember(System.Int32,Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of media information that belongs to the album with <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="albumId">The ID of the album to count media.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="albumId"/> is equal to or less than zero.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.SelectMember(System.Int32)">
            <summary>
            Retrieves the media information of the album.
            </summary>
            <param name="albumId">The ID of the album to select media.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.AlbumCommand.SelectMember(System.Int32,Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the media information of the album with <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="albumId">The ID of the album to query with.</param>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.AudioInfo">
            <summary>
            Represents the audio media information.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.Album">
            <summary>
            Gets the album name.
            </summary>
            <value>The album from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.Artist">
            <summary>
            Gets the artist name.
            </summary>
            <value>The artist from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.AlbumArtist">
            <summary>
            Gets the album artist name.
            </summary>
            <value>The album artist from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.Genre">
            <summary>
            Gets the genre.
            </summary>
            <value>The genre from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.Composer">
            <summary>
            Gets the composer.
            </summary>
            <value>The composer from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.Year">
            <summary>
            Gets the year.
            </summary>
            <value>The year from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.DateRecorded">
            <summary>
            Gets the recorded date.
            </summary>
            <value>The recorded date from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.Copyright">
            <summary>
            Gets the copyright.
            </summary>
            <value>The copyright from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.TrackNumber">
            <summary>
            Gets the track number.
            </summary>
            <value>The track number from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.BitRate">
            <summary>
            Gets the bit rate in bit per second.
            </summary>
            <value>The bit rate in bit per second.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.BitPerSample">
            <summary>
            Gets the bit per sample.
            </summary>
            <value>The bit per sample.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.SampleRate">
            <summary>
            Gets the sample rate in hertz.
            </summary>
            <value>The sample rate in hertz.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.Channels">
            <summary>
            Gets the number of channels.
            </summary>
            <value>The number of channels.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AudioInfo.Duration">
            <summary>
            Gets the track duration in milliseconds.
            </summary>
            <value>The track duration in milliseconds.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.BookInfo">
            <summary>
            Represents the book information for the media.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.BookInfo.Subject">
            <summary>
            Gets the subject of the book.
            </summary>
            <value>The subject.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.BookInfo.Author">
            <summary>
            Gets the author of the book.
            </summary>
            <value>The author.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.BookInfo.DatePublished">
            <summary>
            Gets the published date, formatted as a string.
            </summary>
            <value>The published date.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.BookInfo.Publisher">
            <summary>
            Gets the publisher of the book.
            </summary>
            <value>The publisher.</value>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.Bookmark">
            <summary>
            Represents the media bookmark that allows you to mark an interesting moment
            in media (video and audio) to enable fast searching.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Bookmark.Id">
            <summary>
            Gets the ID of the bookmark.
            </summary>
            <value>The ID of the bookmark.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Bookmark.ThumbnailPath">
            <summary>
            Gets the thumbnail path of the bookmark.
            </summary>
            <value>The thumbnail path of the bookmark.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Bookmark.Offset">
            <summary>
            Gets the offset in milliseconds.
            </summary>
            <value>The offset of the bookmark in media in milliseconds.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Bookmark.Name">
            <summary>
            Gets the name of the bookmark.
            </summary>
            <value>The name of the bookmark.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Bookmark.ToString">
            <summary>
            Returns a string representation of the bookmark.
            </summary>
            <returns>A string representation of the current bookmark.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.BookmarkCommand">
            <summary>
            Provides commands to manage bookmarks in the database.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.Bookmark"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.BookmarkCommand.#ctor(Tizen.Content.MediaContent.MediaDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.BookmarkCommand"/> class with the specified <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/>.
            </summary>
            <param name="database">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> that the commands run on.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="database"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="database"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.BookmarkCommand.Count">
            <summary>
            Retrieves the number of bookmarks.
            </summary>
            <returns>The number of bookmarks.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.BookmarkCommand.Count(Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of bookmarks with <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of bookmarks.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.BookmarkCommand.Insert(System.String,System.Int32)">
            <summary>
            Inserts a new bookmark into the database with the specified media and offset.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="mediaId">The media ID to be associated with.</param>
            <param name="offset">The time offset in milliseconds.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Bookmark"/> instance that contains the record information inserted.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.BookmarkCommand.Insert(System.String,System.Int32,System.String)">
            <summary>
            Inserts a new bookmark into the database with the specified media ID, offset, and name.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="mediaId">The media ID to be associated with.</param>
            <param name="offset">The time offset in milliseconds.</param>
            <param name="name">The name of the bookmark. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Bookmark"/> instance that contains the record information inserted.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.BookmarkCommand.Insert(System.String,System.Int32,System.String,System.String)">
            <summary>
            Inserts a new bookmark into the database with the specified media ID, offset, name, and thumbnail path.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <remarks>
            The thumbnail may be useful only when the media is video.
            </remarks>
            <param name="mediaId">The media ID to be associated with.</param>
            <param name="offset">The time offset in milliseconds.</param>
            <param name="name">The name of the bookmark. This value can be null.</param>
            <param name="thumbnailPath">The thumbnail path of the bookmark. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Bookmark"/> instance that contains the record information inserted.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.BookmarkCommand.Delete(System.Int32)">
            <summary>
            Deletes a bookmark from the database.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="bookmarkId">The bookmark ID to delete.</param>
            <returns>true if the matched record was found and deleted, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bookmarkId"/> is less than zero.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.BookmarkCommand.Select">
            <summary>
            Retrieves the bookmarks.
            </summary>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.BookmarkCommand.Select(Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the bookmarks with <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaInfoColumns">
            <summary>
            Provides the column names that can be used for Select and Count commands.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.SelectArguments"/>
            <seealso cref="T:Tizen.Content.MediaContent.CountArguments"/>
            <seealso cref="P:Tizen.Content.MediaContent.QueryArguments.FilterExpression"/>
            <seealso cref="P:Tizen.Content.MediaContent.SelectArguments.SortOrder"/>
            <seealso cref="M:Tizen.Content.MediaContent.AlbumCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.AlbumCommand.CountMember(System.Int32,Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.AlbumCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.AlbumCommand.SelectMember(System.Int32,Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.BookmarkCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.BookmarkCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.FaceInfoCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.FolderCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.FolderCommand.CountMedia(System.String,Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.FolderCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.FolderCommand.SelectMedia(System.String,Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.MediaInfoCommand.CountMedia(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectMedia(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.CountMember(System.Int32,Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.SelectMember(System.Int32,Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.CountMedia(System.Int32,Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.SelectMedia(System.Int32,Tizen.Content.MediaContent.SelectArguments)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Id">
            <summary>
            Gets the column name for the ID of media.
            </summary>
            <value>The column name for the ID of media.</value>
            <remarks>The value type is string.</remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.Id"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Path">
            <summary>
            Gets the column name for the path of media.
            </summary>
            <value>The column name for the file path of media.</value>
            <remarks>The value type is string.</remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.Path"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.DisplayName">
            <summary>
            Gets the column name for the display name of media.
            </summary>
            <value>The column name for the display name of media.</value>
            <remarks>The value type is string.</remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.DisplayName"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.MediaType">
            <summary>
            Gets the column name for the type of media.
            </summary>
            <value>The column name for the type of media.</value>
            <remarks>
            The value type is integer.
            The value should be an integer that is one of the <see cref="T:Tizen.Content.MediaContent.MediaType"/> values.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.MediaType"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.MimeType">
            <summary>
            Gets the column name for the mime type of media.
            </summary>
            <value>The column name for the mime type of media.</value>
            <remarks>The value type is string.</remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.MimeType"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.FileSize">
            <summary>
            Gets the column name for the file size of media.
            </summary>
            <value>The column name for the file size of media.</value>
            <remarks>The value type is integer.</remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.FileSize"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.DateAdded">
            <summary>
            Gets the column name for the date added of media.
            </summary>
            <value>The column name for the date added of media.</value>
            <remarks>
            The value type is integer.
            <see cref="T:System.DateTimeOffset"/> needs to be converted into the unix time.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.DateAdded"/>
            <seealso cref="M:System.DateTimeOffset.ToUnixTimeSeconds"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.DateModified">
            <summary>
            Gets the column name for the date modified of media.
            </summary>
            <value>The column name for the date modified of media.</value>
            <remarks>
            The value type is integer.
            <see cref="T:System.DateTimeOffset"/> needs to be converted into the unix time.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.DateModified"/>
            <seealso cref="M:System.DateTimeOffset.ToUnixTimeSeconds"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Timeline">
            <summary>
            Gets the column name for the timeline of media.
            </summary>
            <value>The column name for the timeline of media.</value>
            <remarks>
            The value type is integer.
            <see cref="T:System.DateTimeOffset"/> needs to be converted into the unix time.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.Timeline"/>
            <seealso cref="M:System.DateTimeOffset.ToUnixTimeSeconds"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.ThumbnailPath">
            <summary>
            Gets the column name for the thumbnail path of media.
            </summary>
            <value>The column name for the thumbnail path of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.ThumbnailPath"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Title">
            <summary>
            Gets the column name for the title of media.
            </summary>
            <value>The column name for the title of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.Title"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Album">
            <summary>
            Gets the column name for the album of media.
            </summary>
            <value>The column name for the album of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.AudioInfo.Album"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Artist">
            <summary>
            Gets the column name for the artist of media.
            </summary>
            <value>The column name for the artist of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.AudioInfo.Artist"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.Artist"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.AlbumArtist">
            <summary>
            Gets the column name for the album artist of media.
            </summary>
            <value>The column name for the album artist of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.AudioInfo.AlbumArtist"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.AlbumArtist"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Genre">
            <summary>
            Gets the column name for the genre of media.
            </summary>
            <value>The column name for the genre of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.AudioInfo.Genre"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.Genre"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Composer">
            <summary>
            Gets the column name for the composer of media.
            </summary>
            <value>The column name for the composer of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.AudioInfo.Composer"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.Composer"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Year">
            <summary>
            Gets the column name for the year of media.
            </summary>
            <value>The column name for the year of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.AudioInfo.Year"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.Year"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.DateRecorded">
            <summary>
            Gets the column name for the date recorded of media.
            </summary>
            <value>The column name for the date recorded of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.AudioInfo.DateRecorded"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.DateRecorded"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.TrackNumber">
            <summary>
            Gets the column name for the track number of media.
            </summary>
            <value>The column name for the track number of media.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.AudioInfo.TrackNumber"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.TrackNumber"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Duration">
            <summary>
            Gets the column name for the duration of media.
            </summary>
            <value>The column name for the duration of media.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.AudioInfo.Duration"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.Duration"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Longitude">
            <summary>
            Gets the column name for the longitude of media.
            </summary>
            <value>The column name for the longitude of media.</value>
            <remarks>
            The value type is real.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.Longitude"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Latitude">
            <summary>
            Gets the column name for the latitude of media.
            </summary>
            <value>The column name for the latitude of media.</value>
            <remarks>
            The value type is real.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.Latitude"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Altitude">
            <summary>
            Gets the column name for the altitude of media.
            </summary>
            <value>The column name for the altitude of media.</value>
            <remarks>
            The value type is real.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.Altitude"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Width">
            <summary>
            Gets the column name for the width of media.
            </summary>
            <value>The column name for the width of media.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.ImageInfo.Width"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.Width"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Height">
            <summary>
            Gets the column name for the height of media.
            </summary>
            <value>The column name for the height of media.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.ImageInfo.Height"/>
            <seealso cref="P:Tizen.Content.MediaContent.VideoInfo.Height"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.DateTaken">
            <summary>
            Gets the column name for the date taken of media.
            </summary>
            <value>The column name for the date taken of media.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.ImageInfo.DateTaken"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.Favorite">
            <summary>
            Gets the column name for the favorite status of media.
            </summary>
            <value>The column name for the favorite status of media.</value>
            <remarks>
            The value type is integer (1 : true, 0 : false).
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.IsFavorite"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoColumns.IsDrm">
            <summary>
            Gets the column name for the drm of media.
            </summary>
            <value>The column name for the drm of media.</value>
            <remarks>
            The value type is integer (1 : true, 0 : false).
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.MediaInfo.IsDrm"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.AlbumColumns">
            <summary>
            Provides the folder column names that can be used for Select and Count commands.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.SelectArguments"/>
            <seealso cref="T:Tizen.Content.MediaContent.CountArguments"/>
            <seealso cref="P:Tizen.Content.MediaContent.QueryArguments.FilterExpression"/>
            <seealso cref="P:Tizen.Content.MediaContent.SelectArguments.SortOrder"/>
            <seealso cref="M:Tizen.Content.MediaContent.AlbumCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.AlbumCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AlbumColumns.Name">
            <summary>
            Gets the column name for the name of album.
            </summary>
            <value>The column name for the name of album.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Album.Name"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.AlbumColumns.Artist">
            <summary>
            Gets the column name for the artist of album.
            </summary>
            <value>The column name for the artist of album.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Album.Artist"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.FolderColumns">
            <summary>
            Provides the folder column names that can be used for Select and Count commands.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.SelectArguments"/>
            <seealso cref="T:Tizen.Content.MediaContent.CountArguments"/>
            <seealso cref="P:Tizen.Content.MediaContent.QueryArguments.FilterExpression"/>
            <seealso cref="P:Tizen.Content.MediaContent.SelectArguments.SortOrder"/>
            <seealso cref="M:Tizen.Content.MediaContent.FolderCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.FolderCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FolderColumns.Id">
            <summary>
            Gets the column name for the ID of folder.
            </summary>
            <value>The column name for the ID of folder.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Folder.Id"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FolderColumns.Path">
            <summary>
            Gets the column name for the path of folder.
            </summary>
            <value>The column name for the path of folder.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Folder.Path"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FolderColumns.Name">
            <summary>
            Gets the column name for the name of folder.
            </summary>
            <value>The column name for the name of folder.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Folder.Name"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.PlaylistColumns">
            <summary>
            Provides the playlist column names that can be used for Select and Count commands.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.SelectArguments"/>
            <seealso cref="T:Tizen.Content.MediaContent.CountArguments"/>
            <seealso cref="P:Tizen.Content.MediaContent.QueryArguments.FilterExpression"/>
            <seealso cref="P:Tizen.Content.MediaContent.SelectArguments.SortOrder"/>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlaylistColumns.Name">
            <summary>
            Gets the column name for the name of playlist.
            </summary>
            <value>The column name for the name of playlist.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Playlist.Name"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlaylistColumns.Id">
            <summary>
            Gets the column name for the ID of playlist.
            </summary>
            <value>The column name for the ID of playlist.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Playlist.Id"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlaylistColumns.MemberOrder">
            <summary>
            Gets the column name for the member order of playlist.
            </summary>
            <value>The column name for the member order of playlist.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.UpdatePlayOrder(System.Int32,Tizen.Content.MediaContent.PlayOrder)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlaylistColumns.Count">
            <summary>
            Gets the column name for the number of members of playlist.
            </summary>
            <value>The column name for the number of members of playlist.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.AddMember(System.Int32,System.String)"/>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.RemoveMember(System.Int32,System.Int32)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.TagColumns">
            <summary>
            Provides the tag column names that can be used for the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.SelectArguments"/>
            <seealso cref="T:Tizen.Content.MediaContent.CountArguments"/>
            <seealso cref="P:Tizen.Content.MediaContent.QueryArguments.FilterExpression"/>
            <seealso cref="P:Tizen.Content.MediaContent.SelectArguments.SortOrder"/>
            <seealso cref="M:Tizen.Content.MediaContent.MediaInfoCommand.CountTag(System.String,Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectTag(System.String,Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.CountMedia(System.Int32,Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.SelectMedia(System.Int32,Tizen.Content.MediaContent.SelectArguments)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.TagColumns.Name">
            <summary>
            Gets the column name for the name of tag.
            </summary>
            <value>The column name for the name of tag.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Tag.Name"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.TagColumns.Count">
            <summary>
            Gets the column name for the number of media of tag.
            </summary>
            <value>The column name for the number of media of tag.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.AddMedia(System.Int32,System.String)"/>
            <seealso cref="M:Tizen.Content.MediaContent.TagCommand.RemoveMedia(System.Int32,System.String)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.TagColumns.Id">
            <summary>
            Gets the column name for the ID of tag.
            </summary>
            <value>The column name for the ID of tag.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Tag.Id"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.BookmarkColumns">
            <summary>
            Provides the bookmark column names that can be used for Select and Count commands.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.SelectArguments"/>
            <seealso cref="T:Tizen.Content.MediaContent.CountArguments"/>
            <seealso cref="P:Tizen.Content.MediaContent.QueryArguments.FilterExpression"/>
            <seealso cref="P:Tizen.Content.MediaContent.SelectArguments.SortOrder"/>
            <seealso cref="M:Tizen.Content.MediaContent.BookmarkCommand.Count(Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.BookmarkCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.MediaInfoCommand.CountBookmark(System.String,Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectBookmark(System.String,Tizen.Content.MediaContent.SelectArguments)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.BookmarkColumns.Offset">
            <summary>
            Gets the column name for the offset of the bookmark.
            </summary>
            <value>The column name for the offset of the bookmark.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Bookmark.Offset"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.BookmarkColumns.Id">
            <summary>
            Gets the column name for the ID of the bookmark.
            </summary>
            <value>The column name for the ID of the bookmark.</value>
            <remarks>
            The value type is integer.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Bookmark.Id"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.BookmarkColumns.Name">
            <summary>
            Gets the column name for the name of the bookmark.
            </summary>
            <value>The column name for the name of the bookmark.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.Bookmark.Name"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.FaceInfoColumns">
            <summary>
            Provides the face info column names that can be used for Select and Count commands.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.SelectArguments"/>
            <seealso cref="T:Tizen.Content.MediaContent.CountArguments"/>
            <seealso cref="P:Tizen.Content.MediaContent.QueryArguments.FilterExpression"/>
            <seealso cref="P:Tizen.Content.MediaContent.SelectArguments.SortOrder"/>
            <seealso cref="M:Tizen.Content.MediaContent.FaceInfoCommand.Select(Tizen.Content.MediaContent.SelectArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.MediaInfoCommand.CountFaceInfo(System.String,Tizen.Content.MediaContent.CountArguments)"/>
            <seealso cref="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectFaceInfo(System.String,Tizen.Content.MediaContent.SelectArguments)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FaceInfoColumns.Tag">
            <summary>
            Gets the column name for the tag of face information.
            </summary>
            <value>The column name for the tag of face information.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.FaceInfo.Tag"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FaceInfoColumns.Id">
            <summary>
            Gets the column name for the ID of face information.
            </summary>
            <value>The column name for the ID of face information.</value>
            <remarks>
            The value type is string.
            </remarks>
            <seealso cref="P:Tizen.Content.MediaContent.FaceInfo.Id"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.Collation">
            <summary>
            Specifies how the strings are compared.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Collation.Default">
            <summary>
            Default collation, binary.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Collation.NoCase">
            <summary>
            Case-insensitive.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Collation.Rtrim">
            <summary>
            Trailing space characters are ignored.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Collation.Localized">
            <summary>
            Localized, NoCase also applied.
            </summary>
        </member>
        <member name="T:Tizen.Content.MediaContent.StorageType">
            <summary>
            Specifies the storage types.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Content.MediaContent.StorageType.Internal">
            <summary>
            The device's internal storage.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.StorageType.External">
            <summary>
            The device's external storage like SD card.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.StorageType.ExternalUsb">
            <summary>
            The external USB storage.
            </summary>
        </member>
        <member name="T:Tizen.Content.MediaContent.OperationType">
            <summary>
            Specifies database operation types.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Content.MediaContent.OperationType.Insert">
            <summary>
            Insert operation.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.OperationType.Delete">
            <summary>
            Delete operation.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.OperationType.Update">
            <summary>
            Update operation.
            </summary>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaType">
            <summary>
            Specifies types of the <see cref="T:Tizen.Content.MediaContent.MediaInfo"/>.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaType.Image">
            <summary>
            The type of an image.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.ImageInfo"/>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaType.Video">
            <summary>
            The type of a video.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.VideoInfo"/>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaType.Sound">
            <summary>
            The type of sound.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.AudioInfo"/>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaType.Music">
            <summary>
            The type of music.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.AudioInfo"/>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaType.Other">
            <summary>
            The type of other.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaType.Book">
            <summary>
            The type of book.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.BookInfo"/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.Orientation">
            <summary>
            Specifies orientation types of media.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Content.MediaContent.Orientation.Rotate0">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Orientation.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Orientation.Rotate90">
            <summary>
            Rotate 90 degrees.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Orientation.Rotate180">
            <summary>
            Rotate 180 degrees.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Orientation.Rotate270">
            <summary>
            Rotate 270 degrees.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Orientation.FlipHorizontal">
            <summary>
            Flip horizontal.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Orientation.FlipVertical">
            <summary>
            Flip vertical.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Orientation.Transpose">
            <summary>
            Transpose.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.Orientation.Transverse">
            <summary>
            Transverse.
            </summary>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Content.MediaContent.MediaDatabase.MediaInfoUpdated"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs.ProcessId">
            <summary>
            Gets the process ID which triggers the event.
            </summary>
            <value>The process ID which triggers the event.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs.OperationType">
            <summary>
            Gets the operation type.
            </summary>
            <value>The operation type which triggers the event.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs.Id">
            <summary>
            Gets the ID of the media updated.
            </summary>
            <value>The ID of the media updated.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs.Path">
            <summary>
            Gets the path of the media updated.
            </summary>
            <value>The path of the media updated.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs.MediaType">
            <summary>
            Gets the type of the media updated.
            </summary>
            <value>The <see cref="T:Tizen.Content.MediaContent.MediaType"/> of the media updated.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfoUpdatedEventArgs.MimeType">
            <summary>
            The MIME type of the media updated.
            </summary>
            <value>The MIME type of the media updated.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.FolderUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Tizen.Content.MediaContent.MediaDatabase.FolderUpdated"/> event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FolderUpdatedEventArgs.OperationType">
            <summary>
            Gets the operation type.
            </summary>
            <value>The operation type which triggers the event.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FolderUpdatedEventArgs.Id">
            <summary>
            Gets the ID of the folder updated.
            </summary>
            <value>The ID of the folder updated.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FolderUpdatedEventArgs.Path">
            <summary>
            Gets the path of the folder updated.
            </summary>
            <value>The path of the folder updated.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.FaceInfo">
            <summary>
            Represents the face information for the media.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FaceInfo.Rect">
            <summary>
            Gets the region.
            </summary>
            <value>The region of face in the media.</value>
            <remarks>
            The coordinates of the rectangle are orientation-applied values.
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FaceInfo.Id">
            <summary>
            Gets the ID of face information.
            </summary>
            <value>The unique ID of face information.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FaceInfo.MediaInfoId">
            <summary>
            Gets the media ID that the face information is added.
            </summary>
            <value>The media ID that the face information is added.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FaceInfo.Tag">
            <summary>
            Gets the tag.
            </summary>
            <value>The tag of face information.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.FaceInfo.Orientation">
            <summary>
            Gets the orientation of face information.
            </summary>
            <value>The orientation of face information.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FaceInfo.ToString">
            <summary>
            Returns a string representation of the face information.
            </summary>
            <returns>A string representation of the current face info.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.FaceInfoCommand">
            <summary>
            Provides commands to manage face information in the database.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.Album"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FaceInfoCommand.#ctor(Tizen.Content.MediaContent.MediaDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.FaceInfoCommand"/> class with the specified <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/>.
            </summary>
            <param name="database">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> that the commands run on.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="database"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="database"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FaceInfoCommand.Delete(System.String)">
            <summary>
            Deletes the face information from the database.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="faceInfoId">The face information ID to delete.</param>
            <returns>true if the matched record was found and deleted, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="faceInfoId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="faceInfoId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FaceInfoCommand.Select">
            <summary>
            Retrieves the face information.
            </summary>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FaceInfoCommand.Select(Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the face information with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FaceInfoCommand.UpdateTag(System.String,System.String)">
            <summary>
            Updates a tag with the specified tag.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="faceInfoId">The face information ID to update.</param>
            <param name="tag">The tag value for update.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="faceInfoId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="faceInfoId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FaceInfoCommand.Insert(System.String,Tizen.Content.MediaContent.Rectangle,Tizen.Content.MediaContent.Orientation)">
            <summary>
            Inserts new face information to the database with the specified media ID, area, orientation.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="mediaId">The media ID to be associated with the face.</param>
            <param name="area">The region of face in the media.</param>
            <param name="orientation">The orientation of the specified media.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.FaceInfo"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null. </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaId"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="orientation"/> is not valid enumeration.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FaceInfoCommand.Insert(System.String,Tizen.Content.MediaContent.Rectangle,Tizen.Content.MediaContent.Orientation,System.String)">
            <summary>
            Inserts new face information to the database with the specified media ID, area, orientation, and tag.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="mediaId">The media ID to be associated with the face.</param>
            <param name="area">The region of face in the media.</param>
            <param name="orientation">The orientation of specified media.</param>
            <param name="tag">The tag value.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.FaceInfo"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null. </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaId"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="orientation"/> is not valid enumeration.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.Folder">
            <summary>
            Represents the folder information for the media.
            </summary>
            <remarks>
            The <see cref="T:Tizen.Content.MediaContent.Folder"/> is used to organize media content files, i.e., image, audio, and video files,
            in the physical storage of the device.
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Folder.Id">
            <summary>
            Gets the ID of the folder.
            </summary>
            <value>The unique ID of the folder.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Folder.Path">
            <summary>
            Gets the path of the folder.
            </summary>
            <value>The path of the folder.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Folder.Name">
            <summary>
            Gets the name of the folder.
            </summary>
            <value>The name of the folder.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Folder.ToString">
            <summary>
            Returns a string representation of the folder.
            </summary>
            <returns>A string representation of the current folder.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.FolderCommand">
            <summary>
            Provides commands to manage folders and query related media items in the database.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.#ctor(Tizen.Content.MediaContent.MediaDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.FolderCommand"/> class with the specified <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/>.
            </summary>
            <param name="database">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> that the commands run on.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="database"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="database"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.Count">
            <summary>
            Retrieves the number of folders.
            </summary>
            <returns>The number of folders.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.Count(Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of folders with the <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of folders.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.Select">
            <summary>
            Retrieves the folders.
            </summary>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.Select(Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the folders with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.Select(System.String)">
            <summary>
            Retrieves the folder.
            </summary>
            <param name="folderId">The folder ID to query with.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Folder"/> instance if the matched record was found in the database, otherwise null.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="folderId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.CountMedia(System.String)">
            <summary>
            Retrieves the number of media information under the folder.
            </summary>
            <param name="folderId">The ID of the folder to count media in the folder.</param>
            <returns>The number of media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="folderId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.CountMedia(System.String,Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of media information under the folder with the <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="folderId">The ID of the folder to count media in the folder.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="folderId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.SelectMedia(System.String)">
            <summary>
            Retrieves the media information under the folder.
            </summary>
            <param name="folderId">The ID of the folder to select media in the folder.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="folderId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.FolderCommand.SelectMedia(System.String,Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the media information under the folder with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="folderId">The ID of the folder to select media in the folder.</param>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="folderId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.ImageInfo">
            <summary>
            Represents the image media stored in the device.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.ImageInfo.Width">
            <summary>
            Gets the image width in pixels.
            </summary>
            <value>The image width in pixels.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.ImageInfo.Height">
            <summary>
            Gets the image height in pixels.
            </summary>
            <value>The image height in pixels.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.ImageInfo.Orientation">
            <summary>
            Gets the orientation of image.
            </summary>
            <value>The orientation of image.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.ImageInfo.DateTaken">
            <summary>
            Gets the date of the creation time as a formatted string.
            </summary>
            <value>The date of the creation time as a formatted string.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.ImageInfo.ExposureTime">
            <summary>
            Gets the exposure time from EXIF.
            </summary>
            <value>The exposure time from EXIF.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.ImageInfo.FNumber">
            <summary>
            Gets the FNumber from EXIF.
            </summary>
            <value>The FNumber from EXIF.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.ImageInfo.Iso">
            <summary>
            Gets the ISO from EXIF.
            </summary>
            <value>The iso from EXIF.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.ImageInfo.Model">
            <summary>
            Gets the model from EXIF.
            </summary>
            <value>The model from EXIF.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaCommand">
            <summary>
            The <see cref="T:Tizen.Content.MediaContent.MediaCommand"/> is a base class for command classes.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaCommand.#ctor(Tizen.Content.MediaContent.MediaDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.MediaCommand"/> class with the specified <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/>.
            </summary>
            <param name="database">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> that the commands run on.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="database"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="database"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaCommand.Database">
            <summary>
            Gets the <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/>.
            </summary>
            <value>The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> which commands execute on.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.IMediaDataReader">
            <summary>
            Provides a means of reading results obtained by executing a query.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.IMediaDataReader.Read">
            <summary>
            Advances to the next record.
            </summary>
            <returns>true if there are more rows; otherwise false.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.IMediaDataReader.Current">
            <summary>
            Gets the current record.
            </summary>
            <value>The current record object.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaDataReader`1">
            <summary>
            Provides a means of reading results obtained by executing a query.
            </summary>
            <typeparam name="TRecord"></typeparam>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaDataReader`1.Current">
            <summary>
            Gets the current record.
            </summary>
            <value>The current record if the position is valid; otherwise null.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDataReader`1.Read">
            <summary>
            Advances to the next record.
            </summary>
            <returns>true if there are more rows; otherwise false.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDataReader`1.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the MediaDataReader.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDataReader`1.Dispose">
            <summary>
            Releases all resources used by the current instance.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaDatabase">
            <summary>
            Provides the ability to connect to and manage the database.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> class.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.Connect">
            <summary>
            Connects to the database.
            </summary>
            <exception cref="T:System.InvalidOperationException">The database is already connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while connecting.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.Disconnect">
            <summary>
            Disconnects from the media database.
            </summary>
            <exception cref="T:System.InvalidOperationException">The database is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while connecting.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Content.MediaContent.MediaDatabase.MediaInfoUpdated">
            <summary>
            Occurs when there is a change for media in the database.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.Content.MediaContent.MediaDatabase.FolderUpdated">
            <summary>
            Occurs when there is a change for the folder in the database.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.ScanFile(System.String)">
            <summary>
            Requests to scan a media file.
            </summary>
            <param name="path">The path of the media to be scanned.</param>
            <remarks>
            It requests to scan a media file to the media server.<br/>
            If the specified file is not registered to the database yet,
            the media file information will be added to the database.<br/>
            If it is already registered to the database, the media information is refreshed.<br/>
            If the specified file does not exist,
            the record of the media file will be deleted from the database.<br/>
            <br/>
            If you want to access internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
            If you want to access external storage, you should add privilege http://tizen.org/privilege/externalstorage.<br/>
            <br/>
            If http://tizen.org/feature/content.scanning.others feature is not supported and the specified file is other-type,
            <see cref="T:System.NotSupportedException"/> will be thrown.
            </remarks>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <exception cref="T:System.InvalidOperationException">The database is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="path"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="path"/> contains a hidden path that starts with '.'.<br/>
                -or-<br/>
                <paramref name="path"/> contains a directory containing the ".scan_ignore" file.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <exception cref="T:System.NotSupportedException">The required feature is not supported.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.ScanFolderAsync(System.String)">
            <summary>
            Requests to scan a folder recursively.
            </summary>
            <remarks>
                If you want to access internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
                If you want to access external storage, you should add privilege http://tizen.org/privilege/externalstorage.
            </remarks>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="folderPath">The path to scan.</param>
            <remarks>Folders that contains a file named ".scan_ignore" will not be scanned.</remarks>
            <returns>A task that represents the asynchronous scan operation.</returns>
            <exception cref="T:System.InvalidOperationException">The database is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderPath"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="folderPath"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="folderPath"/> contains a hidden path that starts with '.'.<br/>
                -or-<br/>
                <paramref name="folderPath"/> contains a directory containing the ".scan_ignore" file.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.ScanFolderAsync(System.String,System.Boolean)">
            <summary>
            Requests to scan a folder.
            </summary>
            <remarks>
                If you want to access internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
                If you want to access external storage, you should add privilege http://tizen.org/privilege/externalstorage.
            </remarks>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="folderPath">The path to scan.</param>
            <param name="recursive">The value indicating if the folder is to be recursively scanned.</param>
            <remarks>Folders that contains a file named ".scan_ignore" will not be scanned.</remarks>
            <returns>A task that represents the asynchronous scan operation.</returns>
            <exception cref="T:System.InvalidOperationException">The database is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderPath"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="folderPath"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="folderPath"/> contains a hidden path that starts with '.'.<br/>
                -or-<br/>
                <paramref name="folderPath"/> contains a directory containing the ".scan_ignore" file.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.ScanFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Requests to scan a folder recursively.
            </summary>
            <remarks>
                If you want to access internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
                If you want to access external storage, you should add privilege http://tizen.org/privilege/externalstorage.
            </remarks>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="folderPath">The path to scan.</param>
            <param name="cancellationToken">The token to stop scanning.</param>
            <remarks>Folders that contains a file named ".scan_ignore" will not be scanned.</remarks>
            <returns>A task that represents the asynchronous scan operation.</returns>
            <exception cref="T:System.InvalidOperationException">The database is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderPath"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="folderPath"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="folderPath"/> contains a hidden path that starts with '.'.<br/>
                -or-<br/>
                <paramref name="folderPath"/> contains a directory containing the ".scan_ignore" file.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.ScanFolderAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests to scan a folder.
            </summary>
            <remarks>
                If you want to access internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
                If you want to access external storage, you should add privilege http://tizen.org/privilege/externalstorage.
            </remarks>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="folderPath">The path to scan.</param>
            <param name="recursive">The value indicating if the folder is to be recursively scanned.</param>
            <param name="cancellationToken">The token to stop scanning.</param>
            <remarks>Folders that contains a file named ".scan_ignore" will not be scanned.</remarks>
            <returns>A task that represents the asynchronous scan operation.</returns>
            <exception cref="T:System.InvalidOperationException">The database is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderPath"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="folderPath"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="folderPath"/> contains a hidden path that starts with '.'.<br/>
                -or-<br/>
                <paramref name="folderPath"/> contains a directory containing the ".scan_ignore" file.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the MediaDatabase.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaDatabase.Dispose">
            <summary>
            Releases all the resources.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaDatabase.IsDisposed">
            <summary>
            Gets the value indicating whether the database has been disposed.
            </summary>
            <value>true if the database has been disposed; otherwise, false.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaDatabaseError">
            <summary>
            Specifies the database errors.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaDatabaseError.OperationFailed">
            <summary>
            Operation failed.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaDatabaseError.DatabaseBusy">
            <summary>
            Operation failed because the database is busy.
            </summary>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaDatabaseException">
            <summary>
            The exception that is thrown when a database operation failed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaDatabaseException.Error">
            <summary>
            Gets the error that causes the exception.
            </summary>
            <value>The <see cref="T:Tizen.Content.MediaContent.MediaDatabaseError"/> that causes the exception.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaInfo">
            <summary>
            Represents the information related to the media stored.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.MediaInfoCommand"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.Id">
            <summary>
            Gets the ID of media.
            </summary>
            <value>The unique ID of media.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.Path">
            <summary>
            Gets the path to media.
            </summary>
            <value>The full path of the media file.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.DisplayName">
            <summary>
            Gets the name of media.
            </summary>
            <value>The base name of the media file.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.MediaType">
            <summary>
            Gets the <see cref="T:Tizen.Content.MediaContent.MediaType"/> of media.
            </summary>
            <value>The <see cref="T:Tizen.Content.MediaContent.MediaType"/> of media.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.MimeType">
            <summary>
            Gets the mime type from media.
            </summary>
            <value>The mime type of media.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.FileSize">
            <summary>
            Gets the file size of media in bytes.
            </summary>
            <value>The file size of media in bytes.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.DateAdded">
            <summary>
            Gets the date of addition of media.
            </summary>
            <value>The date of addition of media.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.DateModified">
            <summary>
            Gets the date of modification of media.
            </summary>
            <value>The date of modification of media.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.Timeline">
            <summary>
            Gets the timeline of media.
            </summary>
            <value>
            The creation date if the file has the creation information (like recorded date or image creation date),
            otherwise the modified date.
            </value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.ThumbnailPath">
            <summary>
            Gets the thumbnail of media.
            </summary>
            <value>The thumbnail path of media.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.Description">
            <summary>
            Gets the description of media.
            </summary>
            <value>The description from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.Longitude">
            <summary>
            Gets the longitude of media.
            </summary>
            <value>The longitude.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.Latitude">
            <summary>
            Gets the latitude of media.
            </summary>
            <value>The latitude.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.Altitude">
            <summary>
            Gets the altitude of media.
            </summary>
            <value>The altitude.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.Rating">
            <summary>
            Gets the rating of media.
            </summary>
            <value>The rating from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.IsFavorite">
            <summary>
            Gets the favorite status of media.
            </summary>
            <value>true if media is set as favorite, otherwise false.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.Title">
            <summary>
            Gets the title of media.
            </summary>
            <value>The title of media.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.MediaInfo.IsDrm">
            <summary>
            Gets the value indicating whether the media is DRM-protected.
            </summary>
            <value>A bool value indicating whether the media is DRM-protected.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfo.ToString">
            <summary>
            Returns a string representation of the media information.
            </summary>
            <returns>A string representation of the current media information.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaInfoColumnKey">
            <summary>
            Specifies the group keys for <see cref="T:Tizen.Content.MediaContent.MediaInfo"/>.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Type">
            <summary>
            Media type.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.MimeType">
            <summary>
            Mime type.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Size">
            <summary>
            File size.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.DateAdded">
            <summary>
            Date added.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.DateModified">
            <summary>
            Date modified.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Title">
            <summary>
            Content title.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Artist">
            <summary>
            Artist.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.AlbumArtist">
            <summary>
            Album artist.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Genre">
            <summary>
            Genre.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Composer">
            <summary>
            Composer.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Year">
            <summary>
            Year.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.DateRecorded">
            <summary>
            Date recorded.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Copyright">
            <summary>
            Copyright.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.TrackNumber">
            <summary>
            Track number.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Longitude">
            <summary>
            Longitude.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Latitude">
            <summary>
            Latitude.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Altitude">
            <summary>
            Altitude.
            </summary>
        </member>
        <member name="F:Tizen.Content.MediaContent.MediaInfoColumnKey.Rating">
            <summary>
            Rating.
            </summary>
        </member>
        <member name="T:Tizen.Content.MediaContent.MediaInfoCommand">
            <summary>
            Provides commands to manage the media information and query related items in the database.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.#ctor(Tizen.Content.MediaContent.MediaDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.FolderCommand"/> class with the specified <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/>.
            </summary>
            <param name="database">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> that the commands run on.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="database"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="database"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountBookmark(System.String)">
            <summary>
            Retrieves the number of the bookmarks added to the media.
            </summary>
            <param name="mediaId">The media ID to count the bookmarks added to the media.</param>
            <returns>The number of the bookmarks.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountBookmark(System.String,Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of the bookmarks added to the media with the <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="mediaId">The media ID to count the bookmarks added to the media.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of the bookmarks.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectBookmark(System.String)">
            <summary>
            Retrieves the bookmarks added to the media.
            </summary>
            <param name="mediaId">The media ID to select the bookmarks added to the media.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectBookmark(System.String,Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the bookmarks added to the media with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="mediaId">The media ID to select the bookmarks added to the media.</param>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountFaceInfo(System.String)">
            <summary>
            Retrieves the number of the face information added to or detected from the media.
            </summary>
            <param name="mediaId">The media ID to count face information added to the media.</param>
            <returns>The number of the face information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountFaceInfo(System.String,Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of the face information added to or detected from the media with filter.
            </summary>
            <param name="mediaId">The media ID to count the face information added to the media.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of the face information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectFaceInfo(System.String)">
            <summary>
            Retrieves the face information added to or detected from the media.
            </summary>
            <param name="mediaId">The media ID to select face information added to the media.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectFaceInfo(System.String,Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the face information added to or detected from the media with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="mediaId">The media ID to select the face information added to the media.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountTag(System.String)">
            <summary>
            Retrieves the number of tags that the media has.
            </summary>
            <returns>The number of tags.</returns>
            <param name="mediaId">The media ID to count tags added to the media.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountTag(System.String,Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of tags that the media has with the <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="mediaId">The media ID to count tags added to the media.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of tags.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectTag(System.String)">
            <summary>
            Retrieves the tags that the media has.
            </summary>
            <param name="mediaId">The media ID to select tags added to the media.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectTag(System.String,Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the tags that the media has with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="mediaId">The media ID to select tags added to the media.</param>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountMedia">
            <summary>
            Retrieves the number of the media information.
            </summary>
            <returns>The number of the media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountMedia(Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of the media information with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectMedia(System.String)">
            <summary>
            Retrieves the media.
            </summary>
            <param name="mediaId">The media ID to retrieve.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaInfo"/> instance if the matched record was found in the database, otherwise null.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountGroupBy(Tizen.Content.MediaContent.MediaInfoColumnKey)">
            <summary>
            Retrieves the number of values grouped by the specified column with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="columnKey">The column key.</param>
            <returns>The number of groups.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="columnKey"/> is invalid.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CountGroupBy(Tizen.Content.MediaContent.MediaInfoColumnKey,Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of values grouped by the specified column with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="columnKey">The column key.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of groups.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="columnKey"/> is invalid.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectGroupBy(Tizen.Content.MediaContent.MediaInfoColumnKey)">
            <summary>
            Retrieves the group values of the specified column.
            </summary>
            <param name="columnKey">The column key.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="columnKey"/> is invalid.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectGroupBy(Tizen.Content.MediaContent.MediaInfoColumnKey,Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the group values of the specified column with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="columnKey">The column key.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="columnKey"/> is invalid.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectMedia">
            <summary>
            Retrieves all the media.
            </summary>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectMedia(Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the media with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.SelectEbookPath(System.String)">
            <summary>
            Retrieves all matched ebook paths with given <paramref name="keyword"/>.
            </summary>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="keyword">The keyword to search.</param>
            <returns>A list of ebook paths which contain <paramref name="keyword"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.Delete(System.String)">
            <summary>
            Deletes the media from the database.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="mediaId">The media ID to delete.</param>
            <returns>true if the matched record was found and deleted, otherwise false.</returns>
            <remarks>
            The <see cref="M:Tizen.Content.MediaContent.MediaDatabase.ScanFile(System.String)"/> or the <see cref="M:Tizen.Content.MediaContent.MediaDatabase.ScanFolderAsync(System.String)"/> can be used instead.<br/>
            Since API level 6, if the file related with the <paramref name="mediaId"/> in DB still exists in file system before calling this method,
            <see cref="T:System.InvalidOperationException"/> will be thrown to keep consistency in DB.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.<br/>
                -or-<br/>
                The file related with the <paramref name="mediaId"/> in DB still exists in file system. (Since API level 6)
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.Add(System.String)">
            <summary>
            Adds the media to the database.
            </summary>
            <param name="path">The file path to add.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaInfo"/> instance that contains the record information in the database.</returns>
            <remarks>
                If the media already exists in the database, it returns the existing information.<br/>
                <br/>
                The <see cref="M:Tizen.Content.MediaContent.MediaDatabase.ScanFile(System.String)"/> or the <see cref="M:Tizen.Content.MediaContent.MediaDatabase.ScanFolderAsync(System.String)"/> can be used instead.<br/>
                <br/>
                If you want to access internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
                If you want to access external storage, you should add privilege http://tizen.org/privilege/externalstorage.<br/>
                <br/>
                If http://tizen.org/feature/content.scanning.others feature is not supported and the specified file is other-type,
                <see cref="T:System.NotSupportedException"/> will be thrown.
            </remarks>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="path"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="path"/> contains a hidden path that starts with '.'.<br/>
                -or-<br/>
                <paramref name="path"/> contains a directory containing the ".scan_ignore" file.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> does not exists.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <exception cref="T:System.NotSupportedException">The required feature is not supported.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.AddAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds media files into the media database.
            </summary>
            <remarks>
                The paths that already exist in the database will be ignored.<br/>
                At most 300 items can be added at once.<br/>
                <br/>
                If you want to access internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
                If you want to access external storage, you should add privilege http://tizen.org/privilege/externalstorage.<br/>
                <br/>
                If http://tizen.org/feature/content.scanning.others feature is not supported and the specified file is other-type,
                <see cref="T:System.NotSupportedException"/> will be thrown.
            </remarks>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="paths">The paths of the media files to add.</param>
            <returns>A task that represents the asynchronous add operation.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="paths"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="paths"/> contains null.<br/>
                -or-<br/>
                <paramref name="paths"/> contains the invalid path.<br/>
                -or-<br/>
                The number of <paramref name="paths"/> is 300 or more items.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="paths"/> contains a path that does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <exception cref="T:System.NotSupportedException">The required feature is not supported.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.UpdateFavorite(System.String,System.Boolean)">
            <summary>
            Updates the media with the favorite value.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="mediaId">The media ID to update.</param>
            <param name="value">The value indicating whether the media is favorite.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.Move(System.String,System.String)">
            <summary>
            Updates the path of the media to the specified destination path in the database.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="mediaId">The media ID to move.</param>
            <param name="newPath">The path that the media has been moved to.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>
                Usually, it is used after the media file is moved to the another path.<br/>
                <br/>
                If you want to access internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
                If you want to access external storage, you should add privilege http://tizen.org/privilege/externalstorage.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="mediaId"/> is null.<br/>
                -or-<br/>
                <paramref name="newPath"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaId"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="newPath"/> is a zero-length string, contains only white space.<br/>
                -or-<br/>
                <paramref name="newPath"/> contains a hidden directory that starts with '.'.<br/>
                -or-<br/>
                <paramref name="newPath"/> contains a directory containing the ".scan_ignore" file.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="newPath"/> does not exists.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CreateThumbnailAsync(System.String)">
            <summary>
            Creates the thumbnail image for the given media.
            If the thumbnail already exists for the given media, the existing path will be returned.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="mediaId">The media ID to create the thumbnail.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the thumbnail path.</returns>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.<br/>
                -or-<br/>
                An internal error occurred while executing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:Tizen.Content.MediaContent.RecordNotFoundException"><paramref name="mediaId"/> does not exist in the database.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaId"/> is a zero-length string, contains only white space.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file of the media does not exists; moved or deleted.</exception>
            <exception cref="T:Tizen.Content.MediaContent.UnsupportedContentException">
                The thumbnail is not available for the given media.<br/>
                -or-<br/>
                The media is in the external USB storage.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CreateThumbnailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates the thumbnail image for the given media.
            If the thumbnail already exists for the given media, the existing path will be returned.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="mediaId">The media ID to create the thumbnail.</param>
            <param name="cancellationToken">The token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the thumbnail path.</returns>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.<br/>
                -or-<br/>
                An internal error occurred while executing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:Tizen.Content.MediaContent.RecordNotFoundException"><paramref name="mediaId"/> does not exist in the database.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaId"/> is a zero-length string, contains only white space.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file of the media does not exists; moved or deleted.</exception>
            <exception cref="T:Tizen.Content.MediaContent.UnsupportedContentException">
                The thumbnail is not available for the given media.<br/>
                -or-<br/>
                The media is in the external USB storage.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.CreateThumbnail(System.String)">
            <summary>
            Creates the thumbnail image for the given media.
            If the thumbnail already exists for the given media, the existing path will be returned.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="mediaId">The ID of the media for which the thumbnail will be created.</param>
            <returns>A created thumbnail path.</returns>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.<br/>
                -or-<br/>
                An internal error occurred while executing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:Tizen.Content.MediaContent.RecordNotFoundException"><paramref name="mediaId"/> does not exist in the database.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaId"/> is a zero-length string, contains only white space.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file of the media does not exists; moved or deleted.</exception>
            <exception cref="T:Tizen.Content.MediaContent.UnsupportedContentException">
                The thumbnail is not available for the given media.<br/>
                -or-<br/>
                The media is in the external USB storage.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.DetectFaceAsync(System.String)">
            <summary>
            Detects faces from the given media.
            If the thumbnail already exists for the given media, the existing path will be returned.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <feature>http://tizen.org/feature/vision.face_recognition</feature>
            <param name="mediaId">The media ID to create the thumbnail.</param>
            <returns>A task that represents the asynchronous add operation. The task result contains the number of faces detected.</returns>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.<br/>
                -or-<br/>
                An internal error occurred while executing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:Tizen.Content.MediaContent.RecordNotFoundException"><paramref name="mediaId"/> does not exist in the database.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaId"/> is a zero-length string, contains only white space.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file of the media does not exists; moved or deleted.</exception>
            <exception cref="T:Tizen.Content.MediaContent.UnsupportedContentException">Face detection is not available for the given media.</exception>
            <exception cref="T:System.NotSupportedException">The required feature is not supported.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.MediaInfoCommand.DetectFaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates the thumbnail image for the given media.
            If the thumbnail already exists for the given media, the existing path will be returned.
            </summary>
            <remarks>
                Media in the external storage is not supported, with the exception of MMC.
                Only JPEG, PNG, BMP images are supported.
            </remarks>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <feature>http://tizen.org/feature/vision.face_recognition</feature>
            <param name="mediaId">The media ID to create the thumbnail.</param>
            <param name="cancellationToken">The token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the number of faces detected.</returns>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.<br/>
                -or-<br/>
                An internal error occurred while executing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:Tizen.Content.MediaContent.RecordNotFoundException"><paramref name="mediaId"/> does not exist in the database.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaId"/> is a zero-length string, contains only white space.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file of the media does not exists; moved or deleted.</exception>
            <exception cref="T:Tizen.Content.MediaContent.UnsupportedContentException">
                Face detection is not available for the given media.<br/>
                -or-<br/>
                The media is in the external USB storage.
            </exception>
            <exception cref="T:System.NotSupportedException">The required feature is not supported.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.Playlist">
            <summary>
            Represents the playlist that is a group of media (usually songs).
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Playlist.Id">
            <summary>
            Gets the ID of the playlist.
            </summary>
            <value>The unique ID of the playlist.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Playlist.Name">
            <summary>
            Gets the name of the playlist.
            </summary>
            <value>The name of the playlist.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Playlist.ThumbnailPath">
            <summary>
            Gets the path to the thumbnail.
            </summary>
            <value>The path to the thumbnail.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Playlist.ToString">
            <summary>
            Returns a string representation of the playlist.
            </summary>
            <returns>A string representation of the current playlist.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.PlaylistUpdateValues">
            <summary>
            Provides means to set values used for the update command.
            </summary>
            <remarks>
            The values only set in the object will be affected to the update command.
            </remarks>
            <seealso cref="M:Tizen.Content.MediaContent.PlaylistCommand.Update(System.Int32,Tizen.Content.MediaContent.PlaylistUpdateValues)"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlaylistUpdateValues.Name">
            <summary>
            Gets or sets the name of the playlist for an update.
            </summary>
            <remarks>If the value is null, the update operation will have no effect on the field.</remarks>
            <value>A string for name; the field will not be updated if null.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlaylistUpdateValues.ThumbnailPath">
            <summary>
            Gets or sets the thumbnail path of the playlist for an update.
            </summary>
            <remarks>If the value is null, the update operation will have no effect on the field.</remarks>
            <value>A string for the thumbnail path; the field will not be updated if null.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.PlayOrder">
            <summary>
            Represents an order of a member of the playlist.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlayOrder.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.Playlist"/> class with the specified member ID and the order value.
            </summary>
            <param name="memberId">The ID of the member.</param>
            <param name="orderValue">The order value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="memberId"/> is less than or equal to zero.<br/>
                -or-<br/>
                <paramref name="orderValue"/> is less than zero.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlayOrder.MemberId">
            <summary>
            Gets or sets the member ID.
            </summary>
            <value>The member ID.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than or equal to zero.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlayOrder.Value">
            <summary>
            Gets or sets the value indicating the order of the member in the playlist.
            </summary>
            <value>An integer value indicating the order of the member in the playlist.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="value"/> is less than zero.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.PlaylistCommand">
            <summary>
            Provides the commands to manage playlists in the database.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.Playlist"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.#ctor(Tizen.Content.MediaContent.MediaDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.PlaylistCommand"/> class with the specified <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/>.
            </summary>
            <param name="database">A <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> that the commands run on.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="database"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="database"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.Count">
            <summary>
            Retrieves the number of playlists.
            </summary>
            <returns>The number of playlists.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.Count(Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of playlists with the <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of playlists.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.GetPlayOrder(System.Int32,System.Int32)">
            <summary>
            Retrieves the play order of the member.
            </summary>
            <param name="playlistId">The playlist ID.</param>
            <param name="memberId">The member ID of the playlist.</param>
            <returns>The order of the member in the playlist.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="playlistId"/> is less than or equal to zero.<br/>
                -or-<br/>
                <paramref name="memberId"/> is less than or equal to zero.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.Delete(System.Int32)">
            <summary>
            Deletes a playlist from the database.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="playlistId">The playlist ID to delete.</param>
            <returns>true if the matched record was found and deleted, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.InsertFromFile(System.String,System.String)">
            <summary>
            Inserts the playlist into the database from the specified M3U file.
            </summary>
            <remarks>
                If you want to access an internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
                If you want to access an external storage, you should add privilege http://tizen.org/privilege/externalstorage.
            </remarks>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="name">The name of the playlist.</param>
            <param name="path">The path to a M3U file to import.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Playlist"/> instance that contains the record information inserted.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="name"/> is null.<br/>
                -or-<br/>
                <paramref name="path"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="name"/> is a zero-length string.<br/>
                -or-<br/>
                <paramref name="path"/> is a zero-length string, contains only white space.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> does not exists.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.ExportToFile(System.Int32,System.String)">
            <summary>
            Exports the playlist to a M3U file.
            </summary>
            <remarks>
                If the file already exists in the file system, then it will be overwritten.<br/>
                <br/>
                If you want to access an internal storage, you should add privilege http://tizen.org/privilege/mediastorage.<br/>
                If you want to access an external storage, you should add privilege http://tizen.org/privilege/externalstorage.
            </remarks>
            <privilege>http://tizen.org/privilege/mediastorage</privilege>
            <privilege>http://tizen.org/privilege/externalstorage</privilege>
            <param name="playlistId">The playlist ID to export.</param>
            <param name="path">The path to a M3U file.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <exception cref="T:Tizen.Content.MediaContent.RecordNotFoundException">No matching playlist exists.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.Insert(System.String)">
            <summary>
            Inserts the playlist into the database with the specified name.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="name">The name of the playlist.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Playlist"/> instance that contains the record information inserted.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is a zero-length string.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.Insert(System.String,System.String)">
            <summary>
            Inserts the playlist into the database with the specified name and the thumbnail path.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="name">The name of the playlist.</param>
            <param name="thumbnailPath">The path of the thumbnail for the playlist. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Playlist"/> instance that contains the record information inserted.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is a zero-length string.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.Select">
            <summary>
            Retrieves the playlists.
            </summary>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.Select(Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the playlists with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.Select(System.Int32)">
            <summary>
            Retrieves the playlist with the specified playlist ID.
            </summary>
            <param name="playlistId">The playlist ID to select.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Playlist"/> instance if the matched record was found in the database, otherwise null.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.CountMember(System.Int32)">
            <summary>
            Retrieves the number of media information of the playlist.
            </summary>
            <param name="playlistId">The playlist ID to count media added to the playlist.</param>
            <returns>The number of media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.CountMember(System.Int32,Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of media information of the playlist with the <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="playlistId">The playlist ID to count the media added to the playlist.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.GetMemberId(System.Int32,System.String)">
            <summary>
            Retrieves the member ID of the media in the playlist.
            </summary>
            <param name="playlistId">The playlist ID.</param>
            <param name="mediaId">The media ID.</param>
            <returns>The member ID if the member was found in the playlist, otherwise -1.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.SelectMember(System.Int32)">
            <summary>
            Retrieves the media information of the playlist.
            </summary>
            <param name="playlistId">The playlist ID to query with.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.SelectMember(System.Int32,Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the media information of the playlist with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="playlistId">The playlist ID to query with.</param>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.Update(System.Int32,Tizen.Content.MediaContent.PlaylistUpdateValues)">
            <summary>
            Updates the playlist with the specified values.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="playlistId">The playlist ID to update.</param>
            <param name="values">The values for the update.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>Only values set in the <see cref="T:Tizen.Content.MediaContent.PlaylistUpdateValues"/> are updated.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.AddMember(System.Int32,System.String)">
            <summary>
            Adds the media to the playlist.
            </summary>
            <param name="playlistId">The playlist ID that the media will be added to.</param>
            <param name="mediaId">The media ID to add to the playlist.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The invalid media ID will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.AddMembers(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the media set to the playlist.
            </summary>
            <param name="playlistId">The playlist ID that the media will be added to.</param>
            <param name="mediaIds">The collection of media ID to add to the playlist.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The invalid media IDs will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaIds"/> has no element.<br/>
                -or-<br/>
                <paramref name="mediaIds"/> contains null value.<br/>
                -or-<br/>
                <paramref name="mediaIds"/> contains a zero-length string or white space.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.RemoveMember(System.Int32,System.Int32)">
            <summary>
            Removes a member from the playlist.
            </summary>
            <param name="playlistId">The playlist ID.</param>
            <param name="memberId">The member ID to be removed.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The invalid ID will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="playlistId"/> is less than or equal to zero.<br/>
                -or-<br/>
                <paramref name="memberId"/> is less than or equal to zero.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.RemoveMembers(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes a media set from the playlist.
            </summary>
            <param name="playlistId">The playlist ID.</param>
            <param name="memberIds">The collection of member ID to remove from to the playlist.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The invalid IDs will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="memberIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="memberIds"/> has no element.<br/>
                -or-<br/>
                <paramref name="memberIds"/> contains a value which is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.UpdatePlayOrder(System.Int32,Tizen.Content.MediaContent.PlayOrder)">
            <summary>
            Updates a play order of the playlist.
            </summary>
            <param name="playlistId">The playlist ID.</param>
            <param name="playOrder">The <see cref="T:Tizen.Content.MediaContent.PlayOrder"/> to apply.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The <see cref="P:Tizen.Content.MediaContent.PlayOrder.MemberId"/> that is invalid will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="playOrder"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.PlaylistCommand.UpdatePlayOrders(System.Int32,System.Collections.Generic.IEnumerable{Tizen.Content.MediaContent.PlayOrder})">
            <summary>
            Updates play orders of the playlist.
            </summary>
            <param name="playlistId">The playlist ID.</param>
            <param name="orders">The collection of the <see cref="T:Tizen.Content.MediaContent.PlayOrder"/> to apply.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The <see cref="P:Tizen.Content.MediaContent.PlayOrder.MemberId"/> that is invalid will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="orders"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="orders"/> has no element.<br/>
                -or-<br/>
                <paramref name="orders"/> contains a null value.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="playlistId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.PlaylistMember">
            <summary>
            Represents a member of the <see cref="T:Tizen.Content.MediaContent.Playlist"/>.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlaylistMember.MemberId">
            <summary>
            Gets the member ID.
            </summary>
            <value>The member ID of the playlist.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.PlaylistMember.MediaInfo">
            <summary>
            Gets the media information of the member.
            </summary>
            <value>The <see cref="P:Tizen.Content.MediaContent.PlaylistMember.MediaInfo"/> of the member.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.QueryArguments">
            <summary>
            The Base class for query arguments.
            </summary>
            <remarks>
            A filter is required for filtering information associated with Album, Folder, Tag, Bookmark, Playlist,
            and MediaInfo on the basis of details like limit, order, and condition.
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.QueryArguments.FilterExpression">
            <summary>
            Gets or sets the filtering expression that is applied.
            </summary>
            <value>A string that represents a filtering expression applied when data is retrieved.</value>
            <remarks>
            Expressions for the filter can be one of the following forms:<br/>
            - column = value
            - column > value
            - column >= value
            - <![CDATA[column < value]]>
            - <![CDATA[column <= value]]>
            - value = column
            - value >= column
            - <![CDATA[value < column]]>
            - <![CDATA[value <= column]]>
            - column IN (value)
            - column IN(value-list)
            - column NOT IN(value)
            - column NOT IN(value-list)
            - column LIKE value
            - expression COLLATE NOCASE
            - expression COLLATE RTRIM
            - expression COLLATE LOCALIZED
            - expression1 AND expression2 OR expression3 ...
            <br/>
            Note that if you want to set quotation (" ' " or " " ") as value of LIKE operator, you should use two times. (" '' " or " "" ").
            And the optional ESCAPE clause is supported. Both percent symbol("%") and underscore symbol("_") are used in the LIKE pattern.
            If these characters are used as values of the LIKE operation, then the expression following the ESCAPE clause of sqlite will be ignored.<br/>
            <br/>
            For example, column LIKE ('#%') ESCAPE ('#') - "#" is an escape character, it will be ignored.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is a zero-length string, contains only white space.</exception>
            <seealso cref="T:Tizen.Content.MediaContent.MediaInfoColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.AlbumColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.FolderColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.PlaylistColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.TagColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.BookmarkColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.FaceInfoColumns"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.SelectArguments">
            <summary>
            Provides the ability to filter the result of a Select command.
            </summary>
            <remarks>
            A filter is required for filtering information associated with Album, Folder, Tag, Bookmark, Playlist,
            and MediaInfo.
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.SelectArguments.StartRowIndex">
            <summary>
            Gets or sets the starting row position of a query (starting from zero).
            </summary>
            <value>An integer value that indicates the starting row position of a query.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero.<br/></exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.SelectArguments.TotalRowCount">
            <summary>
            Gets or sets the number of rows to be retrieved.
            </summary>
            <value>An integer value that indicates the limit of rows of the result.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.SelectArguments.SortOrder">
            <summary>
            Gets or sets the sort order of the results.
            </summary>
            <value>The expression for the sort order.</value>
            <remarks>
            Expressions for the sort order can be:<br/>
            column [COLLATE NOCASE/RTRIM/LOCALIZED] [ASC/DESC], column2 ...
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is a zero-length string, contains only white space.</exception>
            <seealso cref="T:Tizen.Content.MediaContent.MediaInfoColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.AlbumColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.FolderColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.PlaylistColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.TagColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.BookmarkColumns"/>
            <seealso cref="T:Tizen.Content.MediaContent.FaceInfoColumns"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.CountArguments">
            <summary>
            Provides the ability to filter the result of the Count command.
            </summary>
            <remarks>
            A filter is required for filtering information associated with Album, Folder, Tag, Bookmark, Playlist,
            and MediaInfo.
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.RecordNotFoundException">
            <summary>
            The exception that is thrown when no record is found in the database.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.RecordNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.RecordNotFoundException"/> class.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.RecordNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.RecordNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.RecordNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.RecordNotFoundException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.Rectangle">
            <summary>
            Represents the location of the object bounded by the rectangle defined by
            coordinates of top left corner, width, and height.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the rectangle with the specified values.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Rectangle.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of the rectangle.
            </summary>
            <value>The x-coordinate of the upper-left edge of the rectangle.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Rectangle.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of the rectangle.
            </summary>
            <value>The y-coordinate of the upper-left edge of the rectangle.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Rectangle.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
            <value>The width of the rectangle.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Rectangle.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
            <value>The height of the rectangle.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Rectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of the rectangle.
            </summary>
            <value>The x-coordinate of the left edge of the rectangle.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Rectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of the rectangle.
            </summary>
            <value>The y-coordinate of the top edge of the rectangle.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Rectangle.Right">
            <summary>
            Gets the x-coordinate of the right edge of the rectangle.
            </summary>
            <value>The x-coordinate of the right edge of the rectangle.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Rectangle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the rectangle.
            </summary>
            <value>The y-coordinate of the bottom edge of the rectangle.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Rectangle.ToString">
            <summary>
            Returns a string representation of the rectangle.
            </summary>
            <returns>A string representation of the current rectangle.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Rectangle.GetHashCode">
            <summary>
            Returns the hash code for this rectangle structure.
            </summary>
            <returns>An integer that represents the hash code for this rectangle.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Rectangle.Equals(System.Object)">
            <summary>
            Tests whether object is a rectangle structure with the same location and size of this rectangle structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns>
            true if object is a rectangle structure and its x, y, width, and height properties are
            equal to the corresponding properties of this rectangle structure; otherwise, false.
            </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Rectangle.op_Equality(Tizen.Content.MediaContent.Rectangle,Tizen.Content.MediaContent.Rectangle)">
            <summary>
            Tests whether two rectangle structures have equal location and size.
            </summary>
            <param name="rect1">The <see cref="T:Tizen.Content.MediaContent.Rectangle"/> to compare.</param>
            <param name="rect2">The <see cref="T:Tizen.Content.MediaContent.Rectangle"/> to compare.</param>
            <returns>true if the two rectangle structures have equal x, y, width, and height properties; otherwise, false.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Rectangle.op_Inequality(Tizen.Content.MediaContent.Rectangle,Tizen.Content.MediaContent.Rectangle)">
            <summary>
            Tests whether two rectangle structures differ in location or size.
            </summary>
            <param name="rect1">The <see cref="T:Tizen.Content.MediaContent.Rectangle"/> to compare.</param>
            <param name="rect2">The <see cref="T:Tizen.Content.MediaContent.Rectangle"/> to compare.</param>
            <returns>true if any of the x, y, width, or height properties of the two rectangle structures are unequal; otherwise false.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.Tag">
            <summary>
            Represents a special piece of information that may be associated with media.
            Tagging allows a user to organize large number of items into logical groups providing
            a simplified and faster way of accessing media items.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Tag.Id">
            <summary>
            Gets the ID of the tag.
            </summary>
            <value>The unique ID of the tag.</value>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.Tag.Name">
            <summary>
            Gets the name of the tag.
            </summary>
            <value>The name of the tag.</value>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.Tag.ToString">
            <summary>
            Returns a string representation of the tag.
            </summary>
            <returns>A string representation of the current tag.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.TagCommand">
            <summary>
            Provides the commands to manage tags in the database.
            </summary>
            <seealso cref="T:Tizen.Content.MediaContent.Tag"/>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.#ctor(Tizen.Content.MediaContent.MediaDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.TagCommand"/> class with the specified <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/>.
            </summary>
            <param name="database">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> that the commands run on.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="database"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="database"/> has already been disposed.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.Count">
            <summary>
            Retrieves the number of tags.
            </summary>
            <returns>The number of tags.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.Count(Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of tags with the <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of tags filtered.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.Delete(System.Int32)">
            <summary>
            Deletes a tag from the database.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="tagId">The tag ID to delete.</param>
            <returns>true if the matched record was found and deleted, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.Insert(System.String)">
            <summary>
            Inserts a tag into the database with the specified name.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="name">The name of tag.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Tag"/> instance that contains the record information inserted.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.UpdateName(System.Int32,System.String)">
            <summary>
            Updates a tag with the specified name.
            </summary>
            <privilege>http://tizen.org/privilege/content.write</privilege>
            <param name="tagId">The tag ID to update.</param>
            <param name="name">The new name.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller has no required privilege.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.Select(System.Int32)">
            <summary>
            Retrieves the tag with the specified ID.
            </summary>
            <param name="tagId">The tag ID to select.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.Tag"/> instance if the matched record was found in the database, otherwise null.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.Select">
            <summary>
            Retrieves all the tags.
            </summary>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.Select(Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the tags with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.CountMedia(System.Int32)">
            <summary>
            Retrieves the number of media info of the tag.
            </summary>
            <param name="tagId">The tag ID.</param>
            <returns>The number of the media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.CountMedia(System.Int32,Tizen.Content.MediaContent.CountArguments)">
            <summary>
            Retrieves the number of the media information of the tag with the <see cref="T:Tizen.Content.MediaContent.CountArguments"/>.
            </summary>
            <param name="tagId">The tag ID to query with.</param>
            <param name="arguments">The criteria to use to filter. This value can be null.</param>
            <returns>The number of the media information.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.SelectMedia(System.Int32)">
            <summary>
            Retrieves the media information of the tag.
            </summary>
            <param name="tagId">The tag ID.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.SelectMedia(System.Int32,Tizen.Content.MediaContent.SelectArguments)">
            <summary>
            Retrieves the media information of the tag with the <see cref="T:Tizen.Content.MediaContent.SelectArguments"/>.
            </summary>
            <param name="tagId">The tag ID.</param>
            <param name="filter">The criteria to use to filter. This value can be null.</param>
            <returns>The <see cref="T:Tizen.Content.MediaContent.MediaDataReader`1"/> containing the results.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.AddMedia(System.Int32,System.String)">
            <summary>
            Adds the media to a tag.
            </summary>
            <param name="tagId">The tag ID that the media will be added to.</param>
            <param name="mediaId">The media ID to add to the tag.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The invalid media ID will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.AddMedia(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the media set to a tag.
            </summary>
            <param name="tagId">The tag ID that the media will be added to.</param>
            <param name="mediaIds">The media ID to add to the tag.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The invalid media IDs will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaIds"/> has no element.<br/>
                -or-<br/>
                <paramref name="mediaIds"/> contains null value.<br/>
                -or-<br/>
                <paramref name="mediaIds"/> contains a zero-length string, contains only white space.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.RemoveMedia(System.Int32,System.String)">
            <summary>
            Removes the media from a tag.
            </summary>
            <param name="tagId">The tag ID.</param>
            <param name="mediaId">The media ID to remove from the tag.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The invalid media ID will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mediaId"/> is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.TagCommand.RemoveMedia(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the media set from a tag.
            </summary>
            <param name="tagId">The tag ID.</param>
            <param name="mediaIds">The collection of media ID to remove from the tag.</param>
            <returns>true if the matched record was found and updated, otherwise false.</returns>
            <remarks>The invalid IDs will be ignored.</remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> is disconnected.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Tizen.Content.MediaContent.MediaDatabase"/> has already been disposed.</exception>
            <exception cref="T:Tizen.Content.MediaContent.MediaDatabaseException">An error occurred while executing the command.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mediaIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="mediaIds"/> has no element.<br/>
                -or-<br/>
                <paramref name="mediaIds"/> contains null value.<br/>
                -or-<br/>
                <paramref name="mediaIds"/> contains a zero-length string or white space.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="tagId"/> is less than or equal to zero.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.UnsupportedContentException">
            <summary>
            The exception that is thrown when a requested operation is not supported for content.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.UnsupportedContentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.UnsupportedContentException"/> class.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.UnsupportedContentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.UnsupportedContentException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Content.MediaContent.UnsupportedContentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.Content.MediaContent.UnsupportedContentException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Content.MediaContent.VideoInfo">
            <summary>
            Represents a video media information.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.Album">
            <summary>
            Gets the album name.
            </summary>
            <value>The album name from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.Artist">
            <summary>
            Gets the artist name.
            </summary>
            <value>The artist name from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.AlbumArtist">
            <summary>
            Gets the album artist name.
            </summary>
            <value>The album artist name from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.Genre">
            <summary>
            Gets the genre.
            </summary>
            <value>The genre name from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.Composer">
            <summary>
            Gets the composer name.
            </summary>
            <value>The composer name from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.Year">
            <summary>
            Gets the year.
            </summary>
            <value>The year from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.DateRecorded">
            <summary>
            Gets the recorded date.
            </summary>
            <value>The recorded date information from the metadata if exists; otherwise, the modified date of the file.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.Copyright">
            <summary>
            Gets the copyright notice.
            </summary>
            <value>The copyright notice from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.TrackNumber">
            <summary>
            Gets the track number.
            </summary>
            <value>The track number from the metadata.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.BitRate">
            <summary>
            Gets the bitrate in bit per second.
            </summary>
            <value>The bit rate of the video.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.Duration">
            <summary>
            Gets the track duration in milliseconds.
            </summary>
            <value>The track duration of the video in milliseconds.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.Width">
            <summary>
            Gets the video width in pixels.
            </summary>
            <value>The width of the video in pixels.</value>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.Content.MediaContent.VideoInfo.Height">
            <summary>
            Gets the video height in pixels.
            </summary>
            <value>The height of the video in pixels.</value>
            <since_tizen> 4 </since_tizen>
        </member>
    </members>
</doc>
