<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tizen.Applications.WatchfaceComplication</name>
    </assembly>
    <members>
        <member name="T:Tizen.Applications.WatchfaceComplication.Complication">
            <summary>
            Represents the complication for a watch application.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.#ctor(System.Int32,Tizen.Applications.WatchfaceComplication.ComplicationTypes,Tizen.Applications.WatchfaceComplication.EventTypes,System.String,Tizen.Applications.WatchfaceComplication.ComplicationTypes)">
             <summary>
             Initializes the Complication class.
             </summary>
             <param name="complicationId">The id of the complication.</param>
             <param name="supportTypes">The complication support types.</param>
             <param name="supportEvents">The complication's support events.</param>
             <param name="defaultProviderId">The complication's default provider ID.</param>
             <param name="defaultType">The complication's default type.</param>
             <privilege>http://tizen.org/privilege/datasharing</privilege>
             <privilege>http://tizen.org/privilege/packagemanager.info</privilege>
             <exception cref="T:System.ArgumentException">Thrown when the invalid parameter is passed.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <exception cref="T:System.UnauthorizedAccessException">Thrown when the application does not have privilege to access this method.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                }
             }
             _complication = new MyComplication(_complicationId, (int)(ComplicationTypes.ShortText | ComplicationTypes.Image),
                   (int) EventTypes.EventNone, _complicationProviderId, ComplicationTypes.ShortText, _complicationBtn);
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.Finalize">
            <summary>
            Destructor of the complication class.
            </summary>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Complication.SupportTypes">
            <summary>
            Gets the support types.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Complication.SupportEvents">
            <summary>
            Gets the support event types.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Complication.Tizen#Applications#WatchfaceComplication#IEditable#Highlight">
            <summary>
            The information of the editable's highlight.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Complication.AllowedList">
            <summary>
            The information of specific allowed provider id, support types list for complication
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Complication.Highlight">
            <summary>
            The information of the complication's highlight.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Complication.ComplicationId">
            <summary>
            The information of complication ID.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Complication.Tizen#Applications#WatchfaceComplication#IEditable#EditableId">
            <summary>
            The information of editable ID.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Complication.Tizen#Applications#WatchfaceComplication#IEditable#Name">
            <summary>
            The information of editable name.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.Tizen#Applications#WatchfaceComplication#IEditable#GetCurrentDataIndex">
            <summary>
            Gets the editable's current data index.
            </summary>
            <returns>The index of current data</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <example>
            <code>
            MyComplication comp = new MyComplication();
            Bundle curData = comp.GetCurrentDataIndex();
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.Tizen#Applications#WatchfaceComplication#IEditable#GetCurrentData">
            <summary>
            Gets the editable's current data.
            </summary>
            <returns>The current data</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <example>
            <code>
            MyComplication comp = new MyComplication();
            Bundle curData = comp.GetCurrentData();
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetCurrentProviderId">
            <summary>
            Gets the current provider ID.
            </summary>
            <returns>The current provider ID</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <example>
            <code>
            MyComplication comp = new MyComplication();
            string providerId = comp.GetCurrentProviderId();
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetCurrentType">
            <summary>
            Gets the current complication type.
            </summary>
            <returns>The current complication type</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <example>
            <code>
            MyComplication comp = new MyComplication();
            ComplicationTypes type = comp.GetCurrentType();
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.SendUpdateRequest">
            <summary>
            Sends the complication update requests.
            </summary>
            <privilege>http://tizen.org/privilege/appmanager.launch</privilege>
            <privilege>http://tizen.org/privilege/datasharing</privilege>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the application does not have privilege to access this method.</exception>
            <example>
            <code>
            MyComplication comp = new MyComplication();
            ComplicationError err = comp.SendUpdateRequest();
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.TransferEvent(Tizen.Applications.WatchfaceComplication.EventTypes)">
            <summary>
            Transfers event to the provider.
            </summary>
            <param name="eventType">The complication event type.</param>
            <privilege>http://tizen.org/privilege/appmanager.launch</privilege>
            <privilege>http://tizen.org/privilege/datasharing</privilege>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the application does not have privilege to access this method.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the invalid argument is passed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <example>
            <code>
            void OnButtonClicked()
            {
                comp.TransferEvent(EventTypes.EventTap);
            }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetType(Tizen.Applications.Bundle)">
            <summary>
            Gets the complication data type.
            </summary>
            <param name="data">The data from OnComplicationUpdate callback.</param>
            <returns>The complication type of data</returns>
            <exception cref="T:System.ArgumentException">Thrown when the invalid argument is passed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <example>
            <code>
            ComplicationTypes type = Complication.GetType(dupData);
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetShortText(Tizen.Applications.Bundle)">
             <summary>
             Gets the short text.
             </summary>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <returns>The short text data</returns>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.ShortText)
                    {
                        string shortText = Complication.GetShortText(data);
                        layout.Text = shortText;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetLongText(Tizen.Applications.Bundle)">
             <summary>
             Gets the long text.
             </summary>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <returns>The long text data</returns>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.LongText)
                    {
                        string longText = Complication.GetLongText(data);
                        layout.Text = longText;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetTitle(Tizen.Applications.Bundle)">
             <summary>
             Gets the title.
             </summary>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <returns>The title data</returns>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.ShortText)
                    {
                        string title = Complication.GetTitle(data);
                        layout.Text = title;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetTimestamp(Tizen.Applications.Bundle)">
             <summary>
             Gets the timestamp.
             </summary>
             <returns>The timestamp data in long value</returns>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.Time)
                    {
                        long time = Complication.GetTimestamp(data);
                        layout.Text = time;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetImagePath(Tizen.Applications.Bundle)">
             <summary>
             Gets the image path.
             </summary>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <returns>The image path data</returns>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.Image)
                    {
                        string imagePath = Complication.GetImagePath(data);
                        layout.Text = imagePath;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetCurrentValueOfRange(Tizen.Applications.Bundle)">
             <summary>
             Gets the current value of ranged type data.
             </summary>
             <returns>The current value of range type data</returns>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.RangedValue)
                    {
                        double currentValue = Complication.GetCurrentValueOfRange(data);
                        layout.Text = currentValue;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetMinValueOfRange(Tizen.Applications.Bundle)">
             <summary>
             Gets the minimum value of ranged type data.
             </summary>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <returns>The minimum value of range type data</returns>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.RangedValue)
                    {
                        double currentValue = Complication.GetMinValueOfRange(data);
                        layout.Text = currentValue;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetMaxValueOfRange(Tizen.Applications.Bundle)">
             <summary>
             Gets the max value of ranged type data.
             </summary>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <returns>The maximum value of range type data</returns>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.RangedValue)
                    {
                        double maxValue = Complication.GetMaxValueOfRange(data);
                        layout.Text = maxValue;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetIconPath(Tizen.Applications.Bundle)">
             <summary>
             Gets the icon path.
             </summary>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <returns>The icon path data</returns>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.Icon)
                    {
                        string iconPath = Complication.GetIconPath(data);
                        layout.Text = iconPath;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetExtraData(Tizen.Applications.Bundle)">
             <summary>
             Gets the extra data.
             </summary>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <returns>The extra string data</returns>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.Icon)
                    {
                        string extraData = Complication.GetExtraData(data);
                        layout.Text = extraData;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.GetScreenReaderText(Tizen.Applications.Bundle)">
             <summary>
             Gets the screen reader text.
             </summary>
             <param name="data">The data from OnComplicationUpdate callback.</param>
             <returns>The screen reader text data</returns>
             <exception cref="T:System.ArgumentException">Thrown when data is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
            
             public class MyComplication : Complication
             {
                public MyComplication(int complicationId, int supportTypes, int supportEvents, string defaultProviderId,
                    ComplicationTypes defaultType)
                    : base(complicationId, supportTypes, supportEvents, defaultProviderId, defaultType)
                {
                }
                protected override void OnComplicationUpdated(string providerId, ComplicationTypes type, Bundle data)
                {
                    if (type == ComplicationTypes.LongText)
                    {
                        string screenReaderText = Complication.GetScreenReaderText(data);
                        layout.Text = screenReaderText;
                    }
                }
             }
            
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.OnComplicationUpdated(System.String,Tizen.Applications.WatchfaceComplication.ComplicationTypes,Tizen.Applications.Bundle)">
            <summary>
            Overrides this method to handle the behavior when the complication update event comes.
            </summary>
            <param name="providerId">The updated provider's ID.</param>
            <param name="type">The updated type.</param>
            <param name="data">The updated data.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.OnComplicationError(System.String,Tizen.Applications.WatchfaceComplication.ComplicationTypes,Tizen.Applications.WatchfaceComplication.ComplicationError)">
            <summary>
            Overrides this method to handle the behavior when the complication error occurs.
            </summary>
            <param name="providerId">The updated provider's ID.</param>
            <param name="type">The updated type.</param>
            <param name="errorReason">The occured error.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Complication class specifying whether to perform a normal dispose operation.
            </summary>
            <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Complication.Dispose">
            <summary>
            Releases all resources used by the Complication class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.ComplicationData">
            <summary>
            Represents the Complication data class.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.ComplicationError">
            <summary>
            Enumeration for the complication error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.None">
            <summary>
            Error none.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.OutOfMemory">
            <summary>
            Out of memory error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.InvalidParam">
            <summary>
            Invalid parameter error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.IO">
            <summary>
            IO error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.NoData">
            <summary>
            No data error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.PermissionDeny">
            <summary>
            Permission deny error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.NotSupported">
            <summary>
            The complication API is not supported error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.DB">
            <summary>
            DB operation error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.DBus">
            <summary>
            DBus operation error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.EditNotReady">
            <summary>
            The editor is not ready for editing error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.ExistID">
            <summary>
            Already exist ID error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.NotExist">
            <summary>
            Not exist error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationError.NotAvailable">
            <summary>
            Not available error.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.ComplicationProvider">
            <summary>
            Represents the complication provider for a service application.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ComplicationProvider class.
            </summary>
            <param name="providerId">The id of the complication provider.</param>
            <privilege>http://tizen.org/privilege/datasharing</privilege>
            <exception cref="T:System.ArgumentException">Thrown when providerId is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the application does not have privilege to access this method.</exception>
            <example>
            <code>
            public class MyComplicationProvider : ComplicationProvider
            {
                public MyComplicationProvider(string providerId)
                 : base(providerId)
                {
                }
                protected override void OnDataUpdateRequested(string reqestAppId, ComplicationTypes type, Bundle contextData)
                {
                }
            }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.Finalize">
            <summary>
            Destructor of the provider class.
            </summary>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.ComplicationProvider.Id">
            <summary>
            Gets the provider ID.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.OnDataUpdateRequested(System.String,Tizen.Applications.WatchfaceComplication.ComplicationTypes,Tizen.Applications.Bundle)">
            <summary>
            Overrides this method to handle the behavior when the event for requesting the update of complication data comes from watchface complication.
            </summary>
            <param name="reqestAppId">The ID of application which sent update request.</param>
            <param name="type">The requested type.</param>
            <param name="contextData">The complication's context which is set by complication setup application.</param>
            <returns>The requested ComplicationData</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.NotifyUpdate">
            <summary>
            Emits the update event for complications.
            </summary>
            <privilege>http://tizen.org/privilege/datasharing</privilege>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the application does not have privilege to access this method.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.GetEventType(Tizen.Applications.ReceivedAppControl)">
            <summary>
            Gets the received event type.
            </summary>
            <param name="recvAppCtrl">The received appcontrol.</param>
            <exception cref="T:System.ArgumentException">Thrown when the invalid parameter is passed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <example>
            <code>
            protected override void OnAppControlReceived(AppControlReceivedEventArgs e)
            {
                EventTypes type = ComplicationProvider.GetEventType(e.ReceivedAppControl);
                if (type == EventTypes.EventDoubleTap)
                {
                    // do something
                }
                base.OnAppControlReceived(e);
            }
            </code>
            </example>
            <returns>The type of received event</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.GetEventProviderId(Tizen.Applications.ReceivedAppControl)">
            <summary>
            Gets the provider ID of appcontrol that raises the event.
            </summary>
            <param name="recvAppCtrl">The received appcontrol.</param>
            <exception cref="T:System.ArgumentException">Thrown when e is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <example>
            <code>
            protected override void OnAppControlReceived(AppControlReceivedEventArgs e)
            {
                string providerId = ComplicationProvider.GetEventProviderId(e.ReceivedAppControl);
                base.OnAppControlReceived(e);
            }
            </code>
            </example>
            <returns>The target provider ID of received event</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.GetEventComplicationType(Tizen.Applications.ReceivedAppControl)">
            <summary>
            Gets the complication type of the received appcontrol.
            </summary>
            <param name="recvAppCtrl">The received appcontrol.</param>
            <exception cref="T:System.ArgumentException">Thrown when e is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <example>
            <code>
            protected override void OnAppControlReceived(AppControlReceivedEventArgs e)
            {
                ComplicationTypes type = ComplicationProvider.GetEventComplicationType(e.ReceivedAppControl);
                base.OnAppControlReceived(e);
            }
            </code>
            </example>
            <returns>The target complication type of received event</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.GetEventContext(Tizen.Applications.ReceivedAppControl)">
            <summary>
            Gets the complication context of appcontrol that raises the event.
            </summary>
            <param name="recvAppCtrl">The received appcontrol.</param>
            <exception cref="T:System.ArgumentException">Thrown when e is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <example>
            <code>
            protected override void OnAppControlReceived(AppControlReceivedEventArgs e)
            {
                Bundle context = ComplicationProvider.GetEventContext(e.ReceivedAppControl);
                base.OnAppControlReceived(e);
            }
            </code>
            </example>
            <returns>The context of received event</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ComplicationProvider instance specifying whether to perform a normal dispose operation.
            </summary>
            <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProvider.Dispose">
            <summary>
            Releases all resources used by the ComplicationProvider class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.ComplicationProviderSetup">
            <summary>
            Represents the complication setup for a setup application.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProviderSetup.IsEditing(Tizen.Applications.ReceivedAppControl)">
            <summary>
            Gets the received appcontrol containing information about edit.
            </summary>
            <param name="recvAppCtrl">The received appcontrol.</param>
            <exception cref="T:System.ArgumentException">Thrown when e is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <example>
            <code>
            protected override void OnAppControlReceived(AppControlReceivedEventArgs e)
            {
                if (ComplicationProviderSetup.IsEditing(e.ReceivedAppControl))
                {
                    // do something
                }
                base.OnAppControlReceived(e);
            }
            </code>
            </example>
            <returns>The boolean value.</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProviderSetup.ReplyToEditor(Tizen.Applications.ReceivedAppControl,Tizen.Applications.Bundle)">
            <summary>
            Replies the setup context to the editor
            </summary>
            <param name="recvAppCtrl">The received appcontrol.</param>
            <param name="context">The context created by complication setup app.</param>
            <privilege>http://tizen.org/privilege/datasharing</privilege>
            <exception cref="T:System.ArgumentException">Thrown when e is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the application does not have privilege to access this method.</exception>
            <example>
            <code>
            protected override void OnAppControlReceived(AppControlReceivedEventArgs e)
            {
                if (ComplicationProviderSetup.IsEditing(e.ReceivedAppControl))
                {
                    Bundle context = ComplicationProviderSetup.GetContext(e.ReceivedAppControl);
                    context.AddItem("TEST_KEY", "NEW CONTEXT");
                    ComplicationProviderSetup.ReplyToEditor(e.ReceivedAppControl, context);
                }
                base.OnAppControlReceived(e);
            }
            </code>
            </example>
            <returns>Event target complication type</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ComplicationProviderSetup.GetContext(Tizen.Applications.ReceivedAppControl)">
            <summary>
            Gets complication's setup context.
            </summary>
            <param name="recvAppCtrl">The received appcontrol.</param>
            <exception cref="T:System.ArgumentException">Thrown when e is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <example>
            <code>
            protected override void OnAppControlReceived(AppControlReceivedEventArgs e)
            {
                if (ComplicationProviderSetup.IsEditing(e.ReceivedAppControl))
                {
                    Bundle context = ComplicationProviderSetup.GetContext(e.ReceivedAppControl);
                    context.AddItem("TEST_KEY", "NEW CONTEXT");
                    ComplicationProviderSetup.ReplyToEditor(e.ReceivedAppControl, context);
                }
                base.OnAppControlReceived(e);
            }
            </code>
            </example>
            <returns>The setup context.</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.ComplicationTypes">
            <summary>
            Enumeration for the complication type.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationTypes.NoData">
            <summary>
            The complication type NoData do not displays anything.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationTypes.ShortText">
            <summary>
            The complication type ShortText displays short text.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationTypes.LongText">
            <summary>
            The complication type LongText displays long text.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationTypes.RangedValue">
            <summary>
            The complication type RangedValue displays minimum, maximum, current value.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationTypes.Time">
            <summary>
            The complication type Time displays time.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationTypes.Icon">
            <summary>
            The complication type Icon displays icon.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ComplicationTypes.Image">
            <summary>
            The complication type Image displays image.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.DesignElement">
            <summary>
            Represents the design element for a watch application.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.DesignElement.#ctor(System.Collections.Generic.IEnumerable{Tizen.Applications.Bundle},System.Int32,System.String)">
             <summary>
             Initializes a new instance of the DesignElement class.
             </summary>
             <param name="candidates">The candidates list.</param>
             <param name="currentDataIndex">The index of selected data among candidate list.</param>
             <param name="editableName">The design element name.</param>
             <exception cref="T:System.ArgumentException">Thrown when e is invalid.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
             <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
             <example>
             <code>
             public class ColorDesign : DesignElement
             {
                 private Button _layout;
                 private static string _colorKey = "TEST_COLOR";
                 public ColorDesign(IEnumerable candidates, int curDataIdx, string editableName, Button layout)
                     : base(candidates, curDataIdx, editableName)
                 {
                     _layout = layout;
                 }
                 protected override void OnDesignUpdated(int selectedIdx, State state)
                 {
                     int idx = 0;
                     string color = "";
                     foreach (Bundle candidate in this.Candidates)
                     {
                         if (idx++ != selectedIdx)
                             continue;
                         color = candidate.GetItem(_colorKey);
                         break;
                     }
                     Log.Warn(_logTag, "Color : " + color);
                     if (color.Equals("YELLOW"))
                     {
                         _layout.BackgroundColor = Color.Yellow;
                     }
                }
             }
            
             List&lt;Bundle&gt; candidatesList = new List&lt;Bundle&gt;();
             data = new Bundle();
             data.AddItem(_colorKey, "RED");
             candidatesList.Add(data);
             data.AddItem(_colorKey, "BLUE");
             candidatesList.Add(data);
             ColorDesign colorEdit = new ColorDesign(candidatesList, curIdx, "COLOR", _complicationBtn);
             </code>
             </example>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.DesignElement.Tizen#Applications#WatchfaceComplication#IEditable#EditableId">
            <summary>
            The information of Editable ID.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.DesignElement.Candidates">
            <summary>
            The information of Editable candidates.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.DesignElement.Tizen#Applications#WatchfaceComplication#IEditable#Name">
            <summary>
            The information of Editable name.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.DesignElement.Tizen#Applications#WatchfaceComplication#IEditable#Highlight">
            <summary>
            The information of editable's highlight.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.DesignElement.Highlight">
            <summary>
            The information of design element's highlight.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.DesignElement.Tizen#Applications#WatchfaceComplication#IEditable#GetCurrentDataIndex">
            <summary>
            Gets the editable's currently selected data index of candidate list.
            </summary>
            <returns>The index of selected data among candidate list.</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.DesignElement.Tizen#Applications#WatchfaceComplication#IEditable#GetCurrentData">
            <summary>
            Gets the editable's currently selected data.
            </summary>
            <returns>The currently selected data.</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.DesignElement.OnDesignUpdated(System.Int32,Tizen.Applications.WatchfaceComplication.State)">
            <summary>
            Overrides this method to handle the behavior when the design element is updated.
            </summary>
            <param name="selectedIdx">The selected candidate index.</param>
            <param name="state">The update state.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.EditablesContainer">
            <summary>
            Represents the editables container for a watch application.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.#ctor">
            <summary>
            Initializes the EditablesContainer class.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when some parameter are invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.Finalize">
            <summary>
            Destructor of the EditablesContainer class.
            </summary>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.Add(Tizen.Applications.WatchfaceComplication.DesignElement,System.Int32)">
            <summary>
            Adds the DesignElement to edit list.
            </summary>
            <param name="de">The DesignElement object.</param>
            <param name="editableId">The editable id.</param>
            <exception cref="T:System.ArgumentException">Thrown when the invalid parameter is passed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.Add(Tizen.Applications.WatchfaceComplication.Complication,System.Int32)">
            <summary>
            Adds the Complication to edit list.
            </summary>
            <param name="comp">The Complication object.</param>
            <param name="editableId">The editable id.</param>
            <exception cref="T:System.ArgumentException">Thrown when the invalid parameter is passed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.Remove(System.Int32)">
            <summary>
            Removes the editable from edit list.
            </summary>
            <param name="editableId">The editable id.</param>
            <exception cref="T:System.ArgumentException">Thrown when the invalid parameter is passed.</exception>
            <example>
            <code>
            if (myContainer.IsExist(_colorEditId)
                myContainer.Remove(_colorEditId);
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.IsExist(System.Int32)">
            <summary>
            Checks whether editableId already exists in edit list.
            </summary>
            <param name="editableId">The target editable Id.</param>
            <returns>true if the editable already exists in edit list, otherwise false</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.RequestEdit">
            <summary>
            Requests edit to editor application.
            </summary>
            <privilege>http://tizen.org/privilege/datasharing</privilege>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the application does not have privilege to access this method.</exception>
            <example>
            <code>
            public class MyContainer : EditablesContainer {
                public MyContainer() : base()
                {
                }
                protected override void OnEditReady(string editorId)
                {
                    this.RequestEdit();
                }
            }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.OnEditReady(System.String)">
            <summary>
            Overrides this method if you want to handle the behavior when the editor is ready to edit.
            </summary>
            <param name="editorId">The appid of ready to edit editor.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.LoadCurrentData(System.Int32)">
            <summary>
            Loads the editable's current data.
            </summary>
            <returns>The editable's latest data that selected by editor.</returns>
            <exception cref="T:System.ArgumentException">Thrown when some parameter are invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the watchface complication is not supported.</exception>
            <remarks>
            This method loads the last editable data which is updated by editor application.
            </remarks>
            <param name="editableId">The id of the editable.</param>
            <example>
            <code>
            internal void InitEditables()
            {
                _container = new MyContainer();
                Bundle curData = EditablesContainer.LoadCurrentData(_colorEditId);
                List&lt;Bundle&gt; candidatesList = new List&lt;Bundle&gt;();
                int curIdx = 0;
                int i = 0;
                foreach (string str in _colorArr)
                {
                    Bundle data = new Bundle();
                    data.AddItem(_colorKey, str);
                    candidatesList.Add(data);
                    if (curData != null &amp;&amp; curData.GetItem(_colorKey) != null
                        &amp;&amp; curData.GetItem(_colorKey).Equals(str))
                    {
                        curIdx = i;
                    }
                    i++;
               }
               ColorDesign colorEdit = new ColorDesign(candidatesList, curIdx, "COLOR", _complicationBtn);
               colorEdit.Highlight = new Highlight(ShapeType.Circle, 0, 40, 10, 10);
               _container.Add(colorEdit, _colorEditId);
            }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the EditablesContainer class specifying whether or not to perform a normal dispose operation.
            </summary>
            <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.EditablesContainer.Dispose">
            <summary>
            Releases all resources used by the EditablesContainer instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.EventTypes">
            <summary>
            Enumeration for the complication event type.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.EventTypes.EventNone">
            <summary>
            The complication event none.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.EventTypes.EventTap">
            <summary>
            The complication event tap.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.EventTypes.EventDoubleTap">
            <summary>
            The complication event double tap.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.Highlight">
            <summary>
            Represents the highlight data for an editable.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Highlight.#ctor(Tizen.Applications.WatchfaceComplication.ShapeType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Highlight class.
            </summary>
            <param name="type">The highlight shape type.</param>
            <param name="x">The highlight geometry x.</param>
            <param name="y">The highlight geometry y.</param>
            <param name="w">The highlight geometry w.</param>
            <param name="h">The highlight geometry h.</param>
            <exception cref="T:System.ArgumentException">Thrown when some parameter are invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the method failed due to invalid operation.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.Highlight.Finalize">
            <summary>
            Destructor of the Highlight class.
            </summary>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Highlight.X">
            <summary>
            The x coordinate.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when some parameter are invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Highlight.Y">
            <summary>
            The y coordinate.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when some parameter are invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Highlight.W">
            <summary>
            The width of editable.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when some parameter are invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Highlight.H">
            <summary>
            The height of editable.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when some parameter are invalid.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.Highlight.ShapeType">
            <summary>
            The shape of editable.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.IconData">
            <summary>
            Represents the icon data for a complication.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.IconData.#ctor(System.String,System.String)">
            <summary>
            Initializes the IconData class.
            </summary>
            <param name="iconPath">The icon path.</param>
            <param name="extraData">The extra data.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter is invalid.</exception>
            <example>
            <code>
                protected override ComplicationData OnDataUpdateRequested(string reqestAppId, ComplicationTypes type, Bundle contextData)
                {
                    if (type == ComplicationTypes.Icon)
                    {
                        return new IconData("Icon", "extra");
                    }
                    else if (type == ComplicationTypes.LongText)
                    {
                        return new LongTextData("longlong", "icon path", "title", null);
                    }
                }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.IconData.IconPath">
            <summary>
            The icon path data.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when try to set invalid value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.IconData.ExtraData">
            <summary>
            The extra data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.IconData.ScreenReaderText">
            <summary>
            The information about the screen reader text of complication data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.IEditable">
            <summary>
            Represents the Editable interface.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.IEditable.EditableId">
            <summary>
            The information about editable's ID.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.IEditable.Name">
            <summary>
            The information about editable's name.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.IEditable.Highlight">
            <summary>
            The information about editable's geometry.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.IEditable.GetCurrentDataIndex">
            <summary>
            The information about editable's current data index.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.IEditable.GetCurrentData">
            <summary>
            The information about editable's current data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.ImageData">
            <summary>
            Represents the image data for a complication.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ImageData.#ctor(System.String,System.String)">
            <summary>
            Initializes the ImageData class.
            </summary>
            <param name="imagePath">The image path.</param>
            <param name="extraData">The extra data.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter is invalid.</exception>
            <example>
            <code>
                protected override ComplicationData OnDataUpdateRequested(string reqestAppId, ComplicationTypes type, Bundle contextData)
                {
                    if (type == ComplicationTypes.Image)
                    {
                        return new ImageData("Image path", "extra");
                    }
                    else if (type == ComplicationTypes.LongText)
                    {
                        return new LongTextData("longlong", "icon path", "title", null);
                    }
                }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.ImageData.ImagePath">
            <summary>
            The image path data.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when try to set invalid value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.ImageData.ExtraData">
            <summary>
            The extra data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.ImageData.ScreenReaderText">
            <summary>
            The information about the screen reader text of complication data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.LongTextData">
            <summary>
            Represents the long text data for a complication.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.LongTextData.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes the LongTextData class.
            </summary>
            <param name="longText">The long text.</param>
            <param name="iconPath">The icon path.</param>
            <param name="title">The title.</param>
            <param name="extraData">The extra data.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter is invalid.</exception>
            <example>
            <code>
                protected override ComplicationData OnDataUpdateRequested(string reqestAppId, ComplicationTypes type, Bundle contextData)
                {
                    if (type == ComplicationTypes.ShortText)
                    {
                        return new ShortTextData("short", "icon path", "title", "extra");
                    }
                    else if (type == ComplicationTypes.LongText)
                    {
                        return new LongTextData("longlong", "icon path", "title", null);
                    }
                }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.LongTextData.LongText">
            <summary>
            The long text data.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when try to set invalid value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.LongTextData.IconPath">
            <summary>
            The icon path data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.LongTextData.Title">
            <summary>
            The title data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.LongTextData.ExtraData">
            <summary>
            The extra data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.LongTextData.ScreenReaderText">
            <summary>
            The information about the screen reader text of complication data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.RangedValueData">
            <summary>
            Represents the ranged value data for a complication.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.RangedValueData.#ctor(System.Double,System.Double,System.Double,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes the RangedValueData class.
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The max value.</param>
            <param name="shortText">The short text.</param>
            <param name="iconPath">The icon path.</param>
            <param name="title">The title.</param>
            <param name="extraData">The extra data.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter is invalid.</exception>
            <example>
            <code>
                protected override ComplicationData OnDataUpdateRequested(string reqestAppId, ComplicationTypes type, Bundle contextData)
                {
                    if (type == ComplicationTypes.RangedValue)
                    {
                        return new RangedValueData(50, 0, 100, "short", "icon path", "title", "extra");
                    }
                    else if (type == ComplicationTypes.LongText)
                    {
                        return new LongTextData("longlong", "icon path", "title", null);
                    }
                }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.RangedValueData.RangeCurrent">
            <summary>
            The information about the current range value of complication data.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when try to set invalid value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.RangedValueData.RangeMin">
            <summary>
            The information about the min range value of complication data.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when try to set invalid value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.RangedValueData.RangeMax">
            <summary>
            The information about the max range value of complication data.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when try to set invalid value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.RangedValueData.ShortText">
            <summary>
            The short text data.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when try to set invalid value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.RangedValueData.IconPath">
            <summary>
            The icon path data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.RangedValueData.Title">
            <summary>
            The title data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.RangedValueData.ExtraData">
            <summary>
            The extra data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.RangedValueData.ScreenReaderText">
            <summary>
            The information about the screen reader text of complication data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.ShapeType">
            <summary>
            Represents the Editable shape type.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ShapeType.Circle">
            <summary>
            Shape circle.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.ShapeType.Rectangle">
            <summary>
            Shape rectangle.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.ShortTextData">
            <summary>
            Represents the short text data for a complication.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.ShortTextData.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ShortTextData class.
            </summary>
            <param name="shortText">The short text.</param>
            <param name="iconPath">The icon path.</param>
            <param name="title">The title.</param>
            <param name="extraData">The extra data.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter is invalid.</exception>
            <example>
            <code>
                protected override ComplicationData OnDataUpdateRequested(string reqestAppId, ComplicationTypes type, Bundle contextData)
                {
                    if (type == ComplicationTypes.ShortText)
                    {
                        return new ShortTextData("short", "icon path", "title", "extra");
                    }
                    else if (type == ComplicationTypes.LongText)
                    {
                        return new LongTextData("longlong", "icon path", "title", null);
                    }
                }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.ShortTextData.ShortText">
            <summary>
            The short text data.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when try to set invalid value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.ShortTextData.IconPath">
            <summary>
            The icon path data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.ShortTextData.Title">
            <summary>
            The title data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.ShortTextData.ExtraData">
            <summary>
            The extra data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.ShortTextData.ScreenReaderText">
            <summary>
            The information about the screen reader text of complication data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.State">
            <summary>
            Represents the Editable state.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.State.Complete">
            <summary>
            The editable editing is complete.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.State.OnGoing">
            <summary>
            The editable editing is on going now.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.Applications.WatchfaceComplication.State.Cancel">
            <summary>
            The editable editing is canceled.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.Applications.WatchfaceComplication.TimeData">
            <summary>
            Represents the time data for a complication.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.Applications.WatchfaceComplication.TimeData.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Initializes the TimeData class.
            </summary>
            <param name="timestamp">The timestamp value.</param>
            <param name="iconPath">The icon path.</param>
            <param name="extraData">The extra data.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter is invalid.</exception>
            <example>
            <code>
                protected override ComplicationData OnDataUpdateRequested(string reqestAppId, ComplicationTypes type, Bundle contextData)
                {
                    if (type == ComplicationTypes.Time)
                    {
                        return new TimeData((Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds, "icon path", "extra");
                    }
                    else if (type == ComplicationTypes.LongText)
                    {
                        return new LongTextData("longlong", "icon path", "title", null);
                    }
                }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.TimeData.Timestamp">
            <summary>
            The information about the timestamp of complication data.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when try to set invalid value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.TimeData.IconPath">
            <summary>
            The icon path data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.TimeData.ExtraData">
            <summary>
            The extra data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.Applications.WatchfaceComplication.TimeData.ScreenReaderText">
            <summary>
            The information about the screen reader text of complication data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
    </members>
</doc>
