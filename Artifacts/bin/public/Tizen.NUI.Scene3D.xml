<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tizen.NUI.Scene3D</name>
    </assembly>
    <members>
        <member name="T:Tizen.NUI.Scene3D.Camera">
             <summary>
             Camera class controls a camera in 3D space.
            
             Camera can be added on the SceneView and displays SceneView's virtual 3D world to the screen.
             Camera can be translated and rotated in the space.
             </summary>
             <remarks>
             Transform inheritance cannot be guaranteed when adding children to a camera.
             </remarks>
             <since_tizen> 10 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.ProjectionProperty">
            <summary>
            ProjectionModeProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.ProjectionDirectionProperty">
            <summary>
            ProjectionDirectionProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.FieldOfViewProperty">
            <summary>
            FieldOfViewProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.OrthographicSizeProperty">
            <summary>
            OrthographicSizeProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.AspectRatioProperty">
            <summary>
            AspectRatioProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.NearPlaneDistanceProperty">
            <summary>
            NearPlaneDistanceProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.FarPlaneDistanceProperty">
            <summary>
            FarPlaneDistanceProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.LeftPlaneDistanceProperty">
            <summary>
            LeftPlaneDistanceProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.RightPlaneDistanceProperty">
            <summary>
            RightPlaneDistanceProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.TopPlaneDistanceProperty">
            <summary>
            TopPlaneDistanceProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.BottomPlaneDistanceProperty">
            <summary>
            BottomPlaneDistanceProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.InvertYAxisProperty">
            <summary>
            InvertYAxisProperty
            </summary>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Camera.#ctor">
            <summary>
            Creates an uninitialized Camera.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Camera.#ctor(Tizen.NUI.Scene3D.Camera)">
            <summary>
            Copy constructor.
            </summary>
            <param name="camera">The Camera object to be copied.</param>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Camera.Assign(Tizen.NUI.Scene3D.Camera)">
            <summary>
            Assignment.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Camera.#ctor(Tizen.NUI.Vector2)">
            <summary>
            Creates a CameraActor object.
            Sets the default camera perspective projection for the given canvas size..
            </summary>
        </member>
        <member name="T:Tizen.NUI.Scene3D.Camera.ProjectionModeType">
            <summary>
            Enumeration for the projectionMode.
            ProjectionMode defines how the camera shows 3D objects or scene on a 2D plane with projection.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.ProjectionModeType.Perspective">
            <summary>
            Distance causes foreshortening; objects further from the camera appear smaller.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.ProjectionModeType.Orthographic">
            <summary>
            Relative distance from the camera does not affect the size of objects.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Scene3D.Camera.ProjectionDirectionType">
            <summary>
            Enumeration for the projectionDirection.
            </summary>
            This will be released at Tizen.NET API Level 10, so currently this would be used as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.ProjectionDirectionType.Vertical">
            <summary>
            Distance causes foreshortening; objects further from the camera appear smaller.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Scene3D.Camera.ProjectionDirectionType.Horizontal">
            <summary>
            Relative distance from the camera does not affect the size of objects.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.ProjectionMode">
            <summary>
            Sets/Gets the projection mode.
            The default is Perspective
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.ProjectionDirection">
            <summary>
            <para>
            Sets/Gets the projection direction.
            Projection direction determine basic direction of projection relative properties.
            It will be used when we need to calculate some values relative with aspect ratio.
            <see cref="P:Tizen.NUI.Scene3D.Camera.FieldOfView"/>, and <see cref="P:Tizen.NUI.Scene3D.Camera.OrthographicSize"/>
            </para>
            <para>
            For example, if aspect ratio is 4:3 and set fieldOfView as 60 degree.
            If ProjectionDirectionType.Vertical, basic direction is vertical. so, FoV of horizontal direction become ~75.2 degree
            If ProjectionDirectionType.Horizontal, basic direction is horizontal. so, FoV of vertical direction become ~46.8 degree
            </para>
            <note>
            This property doesn't change <see cref="P:Tizen.NUI.Scene3D.Camera.FieldOfView"/> and <see cref="P:Tizen.NUI.Scene3D.Camera.OrthographicSize"/> value automatically.
            So result scene might be changed.
            </note>
            <para>The default is Vertical.</para>
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.FieldOfView">
            <summary>
            Sets/Gets the field of view in Radians.
            FieldOfView depends on <see cref="P:Tizen.NUI.Scene3D.Camera.ProjectionDirection"/> value.
            The default field of view is 45 degrees.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.OrthographicSize">
            <summary>
            Sets/Gets Orthographic Size of this camera.
            OrthographicSize depends on <see cref="P:Tizen.NUI.Scene3D.Camera.ProjectionDirection"/> value.
            If ProjectoinDirection is Vertical, OrthographicSize is height/2 of viewing cube of Orthographic projection.
            If ProjectoinDirection is Horizontal, OrthographicSize is width/2 of viewing cube of Orthographic projection.
            Remained Width or Height of viewing cube is internally computed by using aspect ratio of Viewport.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.AspectRatio">
            <summary>
            Gets the aspect ratio of the camera.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.NearPlaneDistance">
            <summary>
            Sets/Gets the near clipping plane distance.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.FarPlaneDistance">
            <summary>
            Sets/Gets the far clipping plane distance.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.LeftPlaneDistance">
            <summary>
            Gets the left clipping plane distance.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.RightPlaneDistance">
            <summary>
            Gets the right clipping plane distance.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.TopPlaneDistance">
            <summary>
            Gets the top clipping plane distance.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.BottomPlaneDistance">
            <summary>
            Gets the bottom clipping plane distance.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.InvertYAxis">
            <summary>
            Requests for an inversion on the Y axis on the projection calculation.
            or gets whether the Y axis is inverted.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.ProjectionMatrix">
            <summary>
            Gets ProjectionMatrix of this Camera
            TODO : Open Matrix
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Camera.ViewMatrix">
            <summary>
            Gets ViewMatrix of this Camera
            TODO : Open Matrix
            </summary>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Camera.ConvertFovFromVerticalToHorizontal(System.Single,Tizen.NUI.Radian@)">
            <summary>
            Convert from vertical fov to horizontal fov consider with camera's AspectRatio.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Camera.ConvertFovFromHorizontalToVertical(System.Single,Tizen.NUI.Radian@)">
            <summary>
            Convert from horizontal fov to vertical fov consider with camera's AspectRatio.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Camera.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release swigCPtr.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Scene3D.Model">
             <summary>
             Model is a Class to show 3D mesh objects.
             Model supports glTF 2.0 and DLI model formats.
             Physically Based Rendering with Image Based Lighting is also supported.
             </summary>
            
             <remarks>
             Since NUI uses a left-handed coordinate system, loaded models are transformed into a left-handed coordinate system with Y pointing down.
             The Animations defined in the glTF or DLI are also loaded and can be retrieved by using <see cref="M:Tizen.NUI.Scene3D.Model.GetAnimation(System.UInt32)"/> and <see cref="M:Tizen.NUI.Scene3D.Model.GetAnimation(System.String)"/> methods.
             The number of animation is also retrieved by GetAnimationCount() method.
            
             Model also supports Physically Based Rendering(PBR) with Image Based Lighting(IBL).
             For the IBL, two cube map textures(diffuse and specular) are required.
             Model supports 4 types layout for Cube Map: Vertical/Horizontal Cross layouts, and Vertical/Horizontal Array layouts.
             And also, ktx format with cube map is supported.
            
             The model and IBL textures start to be loaded asynchronously when the Model object is on Window.
             ResourcesLoaded signal notifies that the loading of the model and IBL resources have been completed.
             If Model or IBL is requested to be loaded before the other loading is completed, the ResourcesLoaded signal is called after all resources are loaded.
             <see cref="M:Tizen.NUI.Scene3D.Model.GetAnimation(System.UInt32)"/> and <see cref="M:Tizen.NUI.Scene3D.Model.GetAnimation(System.String)"/> methods can be used after the model loading is finished.
            
             By default, the loaded mesh has its own size and <see cref="T:Tizen.NUI.PivotPoint"/> inferred from position of vertices.
             The <see cref="T:Tizen.NUI.PivotPoint"/> can be modified after model loading is finished.
             If user set size property, the mesh will be scaled to the input size.
             Default value of <see cref="T:Tizen.NUI.ParentOrigin"/> of the Model is Center.
             </remarks>
            
             <example>
             <code>
             Model model = new Model(modelUrl)
             {
                 Size = new Size(width, height),
             };
             model.ResourcesLoaded += (s, e) =>
             {
                 model.PivotPoint = new Vector3(0.5f, 0.5f, 0.5f); // Use center as a Pivot.
            
                 int animationCount = model.GetAnimationCount();
                 if(animationCount > 0)
                 {
                     // Play an Animation of index 0.
                     model.GetAnimation(0).Play();
                 }
             };
             model.SetImageBasedLightSource(diffuseUrl, specularUrl, scaleFactor);
             window.Add(model);
            
             </code>
             </example>
             <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.#ctor(System.String,System.String)">
             <summary>
             Create an initialized Model.
             </summary>
             <param name="modelUrl">model file url.(e.g. glTF, and DLI).</param>
             <param name="resourceDirectoryUrl"> The url to derectory containing resources: binary, image etc.</param>
             <remarks>
             If resourceDirectoryUrl is empty, the parent directory url of modelUrl is used for resource url.
            
             http://tizen.org/privilege/mediastorage for local files in media storage.
             http://tizen.org/privilege/externalstorage for local files in external storage.
             </remarks>
             <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.#ctor(Tizen.NUI.Scene3D.Model)">
            <summary>
            Copy constructor.
            </summary>
            <param name="model">Source object to copy.</param>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.Assign(Tizen.NUI.Scene3D.Model)">
            <summary>
            Assignment operator.
            </summary>
            <param name="model">Source object to be assigned.</param>
            <returns>Reference to this.</returns>
        </member>
        <member name="P:Tizen.NUI.Scene3D.Model.ImageBasedLightScaleFactor">
            <summary>
            Set/Get the ImageBasedLight ScaleFactor.
            Scale factor controls light source intensity in [0.0f, 1.0f]
            </summary>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.SetImageBasedLightSource(System.String,System.String,System.Single)">
            <summary>
            Changes Image Based Light according to the given input textures.
            </summary>
            <param name="diffuseUrl">The path of Cube map image that will be used as a diffuse IBL source.</param>
            <param name="specularUrl">The path of Cube map image that will be used as a specular IBL source.</param>
            <param name="scaleFactor">Scale factor that controls light source intensity in [0.0f, 1.0f]. Default value is 1.0f.</param>
            <remarks>
            http://tizen.org/privilege/mediastorage for local files in media storage.
            http://tizen.org/privilege/externalstorage for local files in external storage.
            </remarks>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.GetAnimationCount">
            <summary>
            Gets number of animations that has been loaded from model file.
            </summary>
            <remarks>
            This method should be called after Model load has been finished.
            </remarks>
            <returns>The number of loaded animations.</returns>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.GetAnimation(System.UInt32)">
            <summary>
            Gets animation at the index.
            </summary>
            <remarks>
            This method should be called after Model load has been finished.
            </remarks>
            <param name="index">Index of animation to be retrieved.</param>
            <returns>Animation at the index.</returns>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.GetAnimation(System.String)">
            <summary>
            Retrieves animation with the given name.
            Note: This method should be called after Model load finished.
            </summary>
            <param name="name">String name of animation to be retrieved.</param>
            <returns>Animation that has the given name.</returns>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.GetCameraCount">
            <summary>
            Gets number of camera parameters that has been loaded from model file.
            </summary>
            <remarks>
            This method should be called after Model load has been finished.
            </remarks>
            <returns>The number of loaded camera parameters.</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.GenerateCamera(System.UInt32)">
            <summary>
            Generate Camera using camera parameters at the index.
            If camera parameter is valid, create new Camera.
            Else, return empty Handle.
            </summary>
            <remarks>
            This method should be called after Model load has been finished.
            </remarks>
            <param name="index">Index of camera to be generated.</param>
            <returns>Generated Camera by the index, or empty Handle if generation failed.</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.ApplyCamera(System.UInt32,Tizen.NUI.Scene3D.Camera)">
            <summary>
            Apply camera parameters at the index to inputed Camera.
            If camera parameter is valid and camera is not empty, apply parameters.
            It will change camera's transform and near / far / fov or orthographic size / aspect ratio (if defined)
            </summary>
            <remarks>
            This method should be called after Model load has been finished.
            </remarks>
            <param name="index">Index of camera to be retrieved.</param>
            <param name="camera">Camera to be applied parameter.</param>
            <returns>True if Apply successed. False otherwise.</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.LoadBvhAnimation(System.String,Tizen.NUI.Vector3)">
            <summary>
            Load bvh animation and assign to model.
            Scale is additional scale factor of bvh animation. It is possible that
            Model's scale may not matched with bvh animation scale.
            If scale is null, default use as Vector3.ONE
            </summary>
            <param name="bvhFilename">Name of bvh format file.</param>
            <param name="scale">Scale value of bvh animation match with model.</param>
            <returns>Animaion of bvh</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.LoadFacialAnimation(System.String)">
            <summary>
            Load facial animation and assign to model.
            </summary>
            <param name="facialFilename">Name of json format file what we predefined.</param>
            <returns>Animaion of facial</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.GetModelRoot">
            <summary>
            Retrieves model root Actor.
            </summary>
            <returns>Root View of the model.</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.SetImageBasedLightScaleFactor(System.Single)">
            <summary>
            Set the ImageBasedLight ScaleFactor.
            </summary>
            <param name="scaleFactor">Scale factor that controls light source intensity in [0.0f, 1.0f].</param>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.GetImageBasedLightScaleFactor">
            <summary>
            Get the ImageBasedLight ScaleFactor.
            </summary>
            <returns>ImageBasedLightScaleFactor that controls light source intensity.</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.Model.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release swigCPtr.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Scene3D.SceneView">
             <summary>
             SceneView is a Class to show multiple 3D objects in a single 2D screen.
             Each SceneView has its own 3D space, and 3D objects added to SceneView are positioned in the space.
             SceneView uses left-handed coordinate system same as NUI. X as right, Y as down, and Z as forward.
            
             SceneView has internal root container to control inner rendering process like depth test.
             When a View is added to the SceneView with <see cref="M:Tizen.NUI.BaseComponents.View.Add(Tizen.NUI.BaseComponents.View)"/> method, it is actually added on the root container.
             Therefore, the added Views exist in the sub tree of SceneView, but are not direct children.
             The sub tree of Views will be rendered with the SceneView's own Camera.
            
             SceneView has one built-in camera by default.
             The default Camera is not removed by using <see cref="M:Tizen.NUI.Scene3D.SceneView.RemoveCamera(Tizen.NUI.Scene3D.Camera)"/> method.
             <see cref="M:Tizen.NUI.Scene3D.SceneView.GetCamera(System.UInt32)"/> method with index "0" returns the default camera,
             and the minimum value returned by <see cref="M:Tizen.NUI.Scene3D.SceneView.GetCameraCount"/> method is 1.
            
             SceneView also provides multiple Camera and one of them can be used to render multiple objects.
             <see cref="M:Tizen.NUI.Scene3D.SceneView.AddCamera(Tizen.NUI.Scene3D.Camera)"/>, <see cref="M:Tizen.NUI.Scene3D.SceneView.RemoveCamera(Tizen.NUI.Scene3D.Camera)"/>, <see cref="M:Tizen.NUI.Scene3D.SceneView.GetCamera(System.UInt32)"/>,
             and <see cref="M:Tizen.NUI.Scene3D.SceneView.SelectCamera(System.UInt32)"/> are methods to manage Cameras of the SceneView.
             User can place multiple cameras in a scene to display the entire scene or to display individual objects.
             User can use the <see cref="M:Tizen.NUI.Scene3D.SceneView.SelectCamera(System.UInt32)"/> method to select the currently required camera.
            
             When the SceneView's size changes, some camera properties that depend on its size may also change.
             The changing properties are as follows: AspectRatio, LeftPlaneDistance, RightPlaneDistance, TopPlaneDistance, and BottomPlaneDistance.
             The Camera's FieldOfView is vertical fov. The horizontal fov is updated internally according to the SceneView size.
            
             The <see cref="M:Tizen.NUI.Scene3D.SceneView.SetImageBasedLightSource(System.String,System.String,System.Single)"/> method sets the same IBL to all Model objects added to the SceneView.
             For the IBL, two cube map textures(diffuse and specular) are required.
             SceneView supports 4 types layout for Cube Map: Vertical/Horizontal Cross layouts, and Vertical/Horizontal Array layouts.
             And also, ktx format with cube map is supported.
             If a model already has an IBL, it is batch overridden with the IBL of the SceneView.
             If the SceneView has IBL, the IBL of newly added models is also overridden.
            
             The IBL textures start to be loaded asynchronously when <see cref="M:Tizen.NUI.Scene3D.SceneView.SetImageBasedLightSource(System.String,System.String,System.Single)"/> method is called.
             ResourcesLoaded signal notifies that the loading of the IBL resources have been completed.
            
             If FBO is used, the rendering result of SceneView is drawn on the FBO and it is mapped on the plane of the SceneView.
             It could decreases performance slightly, but it is useful to show SceneView according to the rendering order with other Views.
            
             And since SceneView is a View, it can be placed together with other 2D UI components in the NUI window.
             </summary>
             <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.#ctor">
            <summary>
            Create an initialized SceneView.
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.#ctor(Tizen.NUI.Scene3D.SceneView)">
            <summary>
            Copy constructor.
            </summary>
            <param name="sceneView">The source object.</param>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.Assign(Tizen.NUI.Scene3D.SceneView)">
            <summary>
            Assignment operator.
            </summary>
            <param name="sceneView">Handle to an object.</param>
            <returns>Reference to this.</returns>
        </member>
        <member name="E:Tizen.NUI.Scene3D.SceneView.CameraTransitionFinished">
            <summary>
            An event emitted when Camera Transition is finished.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.SceneView.ImageBasedLightScaleFactor">
            <summary>
            Set/Get the ImageBasedLight ScaleFactor.
            Scale factor controls light source intensity in [0.0f, 1.0f]
            </summary>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Scene3D.SceneView.UseFramebuffer">
            <summary>
            Set/Get the UseFramebuffer.
            If this property is true, rendering result of SceneView is drawn on FBO and it is mapping on this SceneView plane.
            If this property is false, each item in SceneView is rendered on window directly.
            Default is false.
            </summary>
            <remarks>
            If UseFramebuffer is true, it could decrease performance but entire rendering order is satisfied.
            If UseFramebuffer is false, the performance becomes better but SceneView is rendered on the top of the other 2D components regardless tree order.
            </remarks>
        </member>
        <member name="P:Tizen.NUI.Scene3D.SceneView.FramebufferMultiSamplingLevel">
            <summary>
            Set/Get the Framebuffer's MultiSamplingLevel.
            Only has effects if UseFramebuffer is true, and Framebuffer MultiSampling is supported.
            Default is 0.
            </summary>
            <remarks>
            Getter didn't consider Framebuffer MultiSampling is supported or not.
            </remarks>
        </member>
        <member name="P:Tizen.NUI.Scene3D.SceneView.SkyboxUrl">
            <summary>
            Set/Get SkyboxUrl.
            If SkyboxUrl is set, the cube map image is loaded and skybox is attached on scene.
            Skybox texture is asynchronously loaded. When loading is finished, ResourcesLoaded is emitted.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.SceneView.SkyboxIntensity">
            <summary>
            Set/Get Skybox intensity.
            The skybox intensity is multiplied to the color of skybox texture.
            Default value is 1.0f.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Scene3D.SceneView.SkyboxOrientation">
            <summary>
            Set/Get angle of orientation of the skybox.
            If orientation is set, the skybox will be rotate by the Radian orientation along YAxis.
            Default value is 0.0f.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.AddCamera(Tizen.NUI.Scene3D.Camera)">
             <summary>
             Adds a Camera to the SceneView at the end of the camera list of SceneView.
             The Camera can be used as a selected camera to render the scene by using <see cref="M:Tizen.NUI.Scene3D.SceneView.SelectCamera(System.UInt32)"/> or <see cref="M:Tizen.NUI.Scene3D.SceneView.SelectCamera(System.String)"/>
             </summary>
             <param name="camera">Camera added on this SceneView.</param>
             <remarks>
             Some properties of the Camera will be change depending on the Size of this SceneView.
             Those properties are as follows:
             AspectRatio, LeftPlaneDistance, RightPlaneDistance, TopPlaneDistance, and BottomPlaneDistance.
            
             The FieldOfView of Camera is for vertical fov.
             When the size of the SceneView is changed, the vertical fov is maintained
             and the horizontal fov is automatically calculated according to the SceneView's AspectRatio.
             </remarks>
             <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.RemoveCamera(Tizen.NUI.Scene3D.Camera)">
            <summary>
            Removes a Camera from this SceneView.
            If removed Camera is selected Camera,
            first camera in the list becomes the selected Camera.
            </summary>
            <param name="camera"> camera Camera to be removed from this Camera.</param>
            <remarks>
            When Camera.Dispose() is called, the NUI object is disposed, but camera information is maintained internally.
            Therefore, even if Camera.Dispose() is called, RemoveCamera() or RemoveCamera() methods can be used.
            If RemoveCamera() is called too, all information is deleted together.
            </remarks>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.GetCameraCount">
            <summary>
            Retrieves the number of cameras.
            </summary>
            <returns>The number of Cameras.</returns>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.GetCamera(System.UInt32)">
            <summary>
            Retrieves a Camera of the index.
            </summary>
            <param name="index"> Index of Camera to be retrieved.</param>
            <returns>Camera of the index.</returns>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.GetCamera(System.String)">
            <summary>
            Retrieves a Camera of the input name.
            </summary>
            <param name="name"> string keyword of Camera to be retrieved.</param>
            <returns>Camera that has the name as a View.Name property</returns>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.SelectCamera(System.UInt32)">
            <summary>
            Makes SceneView use a Camera of index as a selected camera.
            </summary>
            <param name="index"> Index of Camera to be used as a selected camera.</param>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.SelectCamera(System.String)">
            <summary>
            Makes SceneView use a Camera of a name as a selected camera.
            </summary>
            <param name="name"> string keyword of Camera to be used as a selected camera.</param>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.CameraTransition(System.UInt32,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Starts camera transition from currently selected camera to a camera of index.
            Camera Position, Orientation and FieldOfView are smoothly animated.
            </summary>
            <remarks>
            The selected camera is switched to the Camera of the index when the transition is started.
            During camera transition, Selected Camera should not be changed by using SelectCamera() or CameraTransition() method.
            During camera transition, Camera properties of Selected Camera should not be changed.
            </remarks>
            <param name="index"> Index of destination Camera of Camera transition.</param>
            <param name="durationMilliSeconds">The duration in milliseconds.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.CameraTransition(System.String,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Starts camera transition from currently selected camera to a camera of input name.
            Camera Position, Orientation and FieldOfView are smoothly animated.
            </summary>
            <remarks>
            The selected camera is switched to the Camera of the input name when the transition is started.
            During camera transition, Selected Camera should not be changed by using SelectCamera() or CameraTransition() method.
            During camera transition, Camera properties of Selected Camera should not be changed.
            </remarks>
            <param name="name"> string keyword of destination Camera of Camera transition.</param>
            <param name="durationMilliSeconds">The duration in milliseconds.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.GetSelectedCamera">
            <summary>
            Retrieves selected Camera.
            </summary>
            <returns> Camera currently used in SceneView as a selected Camera.</returns>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.SetImageBasedLightSource(System.String,System.String,System.Single)">
            <summary>
            Changes Image Based Light as the input textures.
            </summary>
            <param name="diffuseUrl">The path of Cube map image that can be used as a diffuse IBL source.</param>
            <param name="specularUrl">The path of Cube map image that can be used as a specular IBL source.</param>
            <param name="scaleFactor">Scale factor that controls light source intensity in [0.0f, 1.0f]. Default value is 1.0f.</param>
            <remarks>
            http://tizen.org/privilege/mediastorage for local files in media storage.
            http://tizen.org/privilege/externalstorage for local files in external storage.
            </remarks>
            <since_tizen> 10 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.SetImageBasedLightScaleFactor(System.Single)">
            <summary>
            Set the ImageBasedLight ScaleFactor.
            </summary>
            <param name="scaleFactor">Scale factor that controls light source intensity in [0.0f, 1.0f].</param>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.GetImageBasedLightScaleFactor">
            <summary>
            Get the ImageBasedLight ScaleFactor.
            </summary>
            <returns>ImageBasedLightScaleFactor that controls light source intensity.</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.SetSkybox(System.String)">
            <summary>
            Set the Skybox from cube map image.
            Skybox texture is asynchronously loaded. When loading is finished, ResourcesLoaded is emitted.
            </summary>
            <param name="skyboxUrl">Cube map image url for skybox.</param>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.SetSkyboxIntensity(System.Single)">
            <summary>
            Sets Skybox intensity.
            The skybox intensity is multiplied to the color of skybox texture.
            Default value is 1.0f.
            </summary>
            <param name="intensity">Intensity value to be multiplied to the cube map color.</param>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.GetSkyboxIntensity">
            <summary>
            Gets Skybox intensity.
            Default value is 1.0f.
            </summary>
            <returns>skybox intensity.</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.SetSkyboxOrientation(Tizen.NUI.Rotation)">
            <summary>
            Sets orientation of the skybox.
            </summary>
            <param name="orientation">Rotation angle of the skybox along YAxis.</param>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.GetSkyboxOrientation">
            <summary>
            Gets Skybox orientation.
            </summary>
            <returns>skybox orientation.</returns>
        </member>
        <member name="M:Tizen.NUI.Scene3D.SceneView.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release swigCPtr.
            </summary>
        </member>
    </members>
</doc>
