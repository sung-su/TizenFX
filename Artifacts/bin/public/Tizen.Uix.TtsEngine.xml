<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tizen.Uix.TtsEngine</name>
    </assembly>
    <members>
        <member name="T:Interop">
            <summary>
            The Partial Interop class.
            </summary>
            <summary>
            The Partial Interop class.
            </summary>
        </member>
        <member name="T:Interop.Libraries">
            <summary>
            The Partial Libraries class.
            </summary>
        </member>
        <member name="T:Interop.TtsEngine">
            <summary>
            The TtsEngine Interop class.
            </summary>
        </member>
        <member name="T:Tizen.Uix.TtsEngine.AudioType">
            <summary>
            Enumeration for the audio types.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.AudioType.RawS16">
            <summary>
            Signed 16-bit audio type.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.AudioType.RawU8">
            <summary>
            Unsigned 8-bit audio type.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.AudioType.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Tizen.Uix.TtsEngine.ResultEvent">
            <summary>
            Enumeration for the results.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.ResultEvent.Fail">
            <summary>
            Event when the voice synthesis fails.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.ResultEvent.Start">
            <summary>
            Event when the sound data is the first data by the callback function.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.ResultEvent.Continue">
            <summary>
            Event when the next sound data exists, not the first and the last.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.ResultEvent.Finish">
            <summary>
            Event when the sound data is the last data or the sound data is the only result.
            </summary>
        </member>
        <member name="T:Tizen.Uix.TtsEngine.VoiceType">
            <summary>
            Enumeration for the voice types.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.VoiceType.Male">
            <summary>
            Male voice type.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.VoiceType.Female">
            <summary>
            Female voice type.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.VoiceType.Child">
            <summary>
            Child's voice type.
            </summary>
        </member>
        <member name="T:Tizen.Uix.TtsEngine.Error">
            <summary>
            Enumeration for the error values that can occur.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.None">
            <summary>
            Successful, no error.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.OutOfMemory">
            <summary>
            Out of memory.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.IoError">
            <summary>
            I/O error.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.InvalidParameter">
            <summary>
            Invalid parameter.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.NetworkDown">
            <summary>
            Network down (Out of network).
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.InvalidState">
            <summary>
            Invalid state.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.InvalidVoice">
            <summary>
            Invalid voice.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.OperationFailed">
            <summary>
            Operation failed.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.NotSupportedFeature">
            <summary>
            Not supported feature of the current engine.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.NotSupported">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Tizen.Uix.TtsEngine.Error.PermissionDenied">
            <summary>
            Permission denied.
            </summary>
        </member>
        <member name="T:Tizen.Uix.TtsEngine.Engine">
            <summary>
            This class represents the TTS engine, which has to be inherited to make the engine.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Uix.TtsEngine.Engine.Action`1">
            <summary>
            An action with 2 input parameters returning an error.
            </summary>
            <typeparam name="T">Generic type for parameter 1.</typeparam>
            <param name="a">The input parameter 1.</param>
            <param name="b">The input parameter 2.</param>
            <returns>Error value.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Uix.TtsEngine.Engine.OutAction`1">
            <summary>
            An action with 2 out parameters returning an error.
            </summary>
            <typeparam name="T">Generic type for parameter 1.</typeparam>
            <param name="a">The input parameter 1.</param>
            <param name="b">The input parameter 2.</param>
            <returns>Error value.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.Uix.TtsEngine.Engine.SupportedVoice">
            <summary>
            Called when the TTS engine informs the engine service user about whole supported language and voice type list.
            This callback function is implemented by the engine service user, therefore, the engine developer does NOT have to implement this callback function.
            </summary>
            <remarks>
            This callback function is called by ForEachSupportedVoices() to inform the whole supported voice list. userData must be transferred from ForEachSupportedVoices().
            </remarks>
            <param name="language">The language is specified as an ISO 3166 alpha-2 two-letter country code followed by an ISO 639-1 for the two-letter language code.
            For example, "ko_KR" for Korean, "en_US" for American English.</param>
            <param name="type">The voice type.</param>
            <param name="userData">The user data passed from ForEachSupportedVoices().</param>
            <returns>true to continue with the next iteration of the loop, false to break out of the loop.</returns>
            <precondition>ForEachSupportedVoices() will invoke this callback function.</precondition>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.StartSynthesis(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.IntPtr)">
            <summary>
            Called when the engine service user starts to synthesize a voice, asynchronously.
            </summary>
            <remarks>
            In this callback function, the TTS engine must transfer the synthesized result to the engine service user using SendResult().
            Also, if the TTS engine needs the application's credential, it can set the credential granted to the application.
            </remarks>
            <param name="language">The language is specified as an ISO 3166 alpha-2 two-letter country code followed by an ISO 639-1 for the two-letter language code.
            For example, "ko_KR" for Korean, "en_US" for American English.</param>
            <param name="type">The voice type.</param>
            <param name="text">Texts.</param>
            <param name="speed">The speed of speaking.</param>
            <param name="appid">The application ID.</param>
            <param name="credential">The credential granted to the application.</param>
            <param name="userData">The user data which must be passed to the SendResult() function.</param>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidState
            3. InvalidParameter
            4. InvalidVoice
            5. OperationFailed
            6. NetworkDown
            7. PermissionDenied
            </returns>
            <postcondition>This function invokes SendResult().</postcondition>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.GetInformation(System.String@,System.String@,System.String@,System.Boolean@)">
            <summary>
            Called when the engine service user requests the basic information of the TTS engine.
            </summary>
            <remarks>
            The allocated engineUuid, engineName, and engineSetting will be released internally.
            In order to upload the engine at Tizen Appstore, both a service application and a UI application are necessary.
            Therefore, engineSetting must be transferred to the engine service user.
            </remarks>
            <param name="engineUuid">UUID of the engine.</param>
            <param name="engineName">Name of the engine.</param>
            <param name="engineSetting">The engine setting application (UI application)'s ID.</param>
            <param name="useNetwork">The status for using the network.</param>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidState
            </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.Initialize">
            <summary>
            Called when the engine service user initializes the TTS engine.
            </summary>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidState
            3. NotSupportedFeature
            4. PermissionDenied
            </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.Deinitialize">
            <summary>
            Called when the engine service user deinitializes the TTS engine.
            </summary>
            <remarks>
            NOTE that the engine may be terminated automatically. When this callback function is invoked, the release of the resources is necessary.
            </remarks>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidState
            </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.ForEachSupportedVoices(Tizen.Uix.TtsEngine.Engine.SupportedVoice,System.IntPtr)">
            <summary>
            Called when the engine service user gets the whole supported voice list.
            </summary>
            <remarks>
            In this function, the engine service user's callback function 'SupportedVoice()' is invoked repeatedly for getting all the supported voices,
            and userData must be transferred to 'SupportedVoice()'. If 'SupportedVoice()' returns false, it should be stopped to call 'SupportedVoice()'.</remarks>
            <param name="callback">The callback function.</param>
            <param name="userData">The user data which must be passed to SupportedVoice().</param>
            <returns>
            The following error codes can be returned:
            1. None
            2. OperationFailed
            </returns>
            <postcondition>This callback function invokes SupportedVoice() repeatedly for getting all the supported voices.</postcondition>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.IsValidVoice(System.String,System.Int32,System.Boolean@)">
            <summary>
            Called when the engine service user checks whether the voice is valid or not in the TTS engine.
            </summary>
            <param name="language">The language is specified as an ISO 3166 alpha-2 two-letter country code followed by an ISO 639-1 for the two-letter language code.
            For example, "ko_KR" for Korean, "en_US" for American English.</param>
            <param name="type">The voice type.</param>
            <param name="isValid">A variable for checking whether the corresponding voice is valid or not. true to be valid, false to be invalid.</param>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidParameter
            </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.SetPitch(System.Int32)">
            <summary>
            Called when the engine service user sets the default pitch of the TTS engine.
            </summary>
            <param name="pitch">The default pitch.</param>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidState
            3. OperationFailed
            4. InvalidParameter
            </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.LoadVoice(System.String,System.Int32)">
            <summary>
            Called when the engine service user requests to load the corresponding voice type for the first time.
            </summary>
            <param name="language">The language is specified as an ISO 3166 alpha-2 two-letter country code followed by an ISO 639-1 for the two-letter language code.
            For example, "ko_KR" for Korean, "en_US" for American English.</param>
            <param name="type">The voice type.</param>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidState
            3. OperationFailed
            4. InvalidVoice
            5. InvalidParameter
            6. OutOfMemory
            </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.UnloadVoice(System.String,System.Int32)">
            <summary>
            Called when the engine service user requests to unload the corresponding voice type or to stop using voice.
            </summary>
            <param name="language">The language is specified as an ISO 3166 alpha-2 two-letter country code followed by an ISO 639-1 for the two-letter language code.
            For example, "ko_KR" for Korean, "en_US" for American English.</param>
            <param name="type">The voice type.</param>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidState
            3. OperationFailed
            4. InvalidVoice
            5. InvalidParameter
            </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.CheckAppAgreed(System.String,System.Boolean@)">
            <summary>
            Called when the engine service user requests for the TTS engine to check whether the application agreed the usage of the TTS engine.
            This callback function is called when the engine service user requests for the TTS engine to check the application's agreement about using the the engine.
            According to the need, the engine developer can provide some user interfaces to check the agreement.
            </summary>
            <remarks>
            If the TTS engine developer does not want to check the agreement, the developer needs to return proper values as isAgreed in accordance with the intention.
            true if the developer regards that every application agreed the usage of the engine, false if the developer regards that every application disagreed.
            NOTE that, however, there may be any legal issue unless the developer checks the agreement.
            Therefore, we suggest that the engine developers should provide a function to check the agreement.
            </remarks>
            <param name="appid">The application ID.</param>
            <param name="isAgreed">A variable for checking whether the application agreed to use the TTS engine or not. true to agree, false to disagree.</param>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidState
            3. NotSupportedFeature
            4. InvalidParameter
            </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.NeedAppCredential">
            <summary>
            Called when the engine service user checks whether the TTS engine needs the application's credentials.
            </summary>
            <returns>true if TTS engine needs the application's credentials, otherwise false. </returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.CancelSynthesis">
            <summary>
            Called when the engine service user cancels to synthesize a voice.
            </summary>
            <returns>
            The following error codes can be returned:
            1. None
            2. InvalidState
            </returns>
            <precondition>
            StartSynthesis should be performed.
            </precondition>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.#ctor">
            <summary>
            Public constructor.
            </summary>
            <feature>
            http://tizen.org/feature/speech.synthesis
            </feature>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.EngineMain(System.Int32,System.String[])">
            <summary>
            Main function for the Text-To-Speech (TTS) engine.
            This function is the main function for operating the TTS engine.
            </summary>
            <feature>
            http://tizen.org/feature/speech.synthesis
            </feature>
            <remarks>
            ServiceAppMain should be used for working the engine after this function.
            </remarks>
            <param name="argc">The argument count (original).</param>
            <param name="argv">The argument (original).</param>
            <exception cref="T:System.NotSupportedException">Thrown in case of not supported.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown in case of operation failure.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.GetSpeedRange(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the speed range from the Tizen platform.
            </summary>
            <feature>
            http://tizen.org/feature/speech.synthesis
            </feature>
            <remarks>
            This API is used when the TTS engine wants to get the speed range from the Tizen platform.
            </remarks>
            <param name="min">The minimum speed value.</param>
            <param name="normal">The normal speed value.</param>
            <param name="max">The maximum speed value.</param>
            <exception cref="T:System.NotSupportedException">Thrown in case of not supported.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown in case of operation failure.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.GetPitchRange(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the pitch range from the Tizen platform.
            </summary>
            <feature>
            http://tizen.org/feature/speech.synthesis
            </feature>
            <remarks>
            This API is used when the TTS engine wants to get the pitch range from the Tizen platform.
            </remarks>
            <param name="min">The minimum pitch value.</param>
            <param name="normal">The normal pitch value.</param>
            <param name="max">The maximum pitch value.</param>
            <exception cref="T:System.NotSupportedException">Thrown in case of not supported.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown in case of operation failure.</exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.SendResult(Tizen.Uix.TtsEngine.ResultEvent,System.IntPtr,System.Int32,Tizen.Uix.TtsEngine.AudioType,System.Int32)">
            <summary>
            Sends the synthesized result to the engine service user.
            </summary>
            <feature>
            http://tizen.org/feature/speech.synthesis
            </feature>
            <remarks>
            This API is used in StartSynthesis(), when the TTS engine sends the synthesized result to the engine service user.
            The synthesized result must be transferred to the engine service user through this function.
            </remarks>
            <param name="resultEvent">The result event.</param>
            <param name="data">The result data.</param>
            <param name="dataSize">The result data size.</param>
            <param name="audioType">The audio type.</param>
            <param name="rate">The sample rate.</param>
            <exception cref="T:System.ArgumentException">Thrown in case of an invalid parameter.</exception>
            <exception cref="T:System.NotSupportedException">Thrown in case of not supported.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown in case of operation failure.</exception>
            <precondition>
            EngineMain function should be invoked before this function is called. StartSynthesis() will invoke this function.
            </precondition>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.SendError(Tizen.Uix.TtsEngine.Error,System.String)">
            <summary>
            Sends the error to the engine service user.
            </summary>
            <feature>
            http://tizen.org/feature/speech.synthesis
            </feature>
            <param name="error">The error reason.</param>
            <param name="msg">The error message.</param>
            <exception cref="T:System.NotSupportedException">Thrown in case of not supported.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown in case of operation failure.</exception>
            <precondition>
            EngineMain function should be invoked before this function is called.
            </precondition>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.SetPrivateDataSetDelegate(Tizen.Uix.TtsEngine.Engine.Action{System.String})">
            <summary>
            Sets a callback function for setting the private data.
            </summary>
            <feature>
            http://tizen.org/feature/speech.synthesis
            </feature>
            <param name="callback">
            Called when the engine service user gets the private data from the TTS engine.
            In parameters:
            a = Key -- The key field of private data.
            b = data -- The data field of private data.
            The following error codes can be returned:
            1. None
            2. InvalidParameter
            3. OperationFailed
            4. NotSupported
            </param>
            <exception cref="T:System.ArgumentException">Thrown in case of an invalid parameter.</exception>
            <exception cref="T:System.NotSupportedException">Thrown in case of not supported.</exception>
            <exception cref="T:System.InvalidOperationException">thrown in case of operation failure.</exception>
            <precondition>
            Main function should be invoked before this function is called.
            </precondition>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.Uix.TtsEngine.Engine.SetPrivateDataRequestedDelegate(Tizen.Uix.TtsEngine.Engine.OutAction{System.String})">
            <summary>
            Sets a callback function for setting the private data.
            </summary>
            <feature>
            http://tizen.org/feature/speech.synthesis
            </feature>
            <param name="callback">The callback function.
            Called when the TTS engine receives the private data from the engine service user.
            This callback function is called when the engine service user sends the private data to the TTS engine.
            Out parameters:
            a = Key -- The key field of private data.
            b = data -- The data field of private data.
            The following error codes can be returned:
            1. None
            2. InvalidParameter
            3. OperationFailed
            4. NotSupported
            </param>
            <exception cref="T:System.ArgumentException">Thrown in case of an invalid parameter.</exception>
            <exception cref="T:System.NotSupportedException">Thrown in case of not supported.</exception>
            <exception cref="T:System.InvalidOperationException">thrown in case of operation failure.</exception>
            <precondition>
            Main function should be invoked before this function is called.
            </precondition>
            <since_tizen> 4 </since_tizen>
        </member>
    </members>
</doc>
