<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tizen.NUI.FLUX</name>
    </assembly>
    <members>
        <member name="T:Tizen.NUI.FLUX.Interop.BlurCapture">
            <summary>
            Interop Class for wrapping native BlurCapture calls.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.BlurUtility.GetBlurImageUrl_PropertyValue(System.String,System.Single,System.UInt32,System.Single)">
            <summary>
            Used to create BlurredImage of an existing Image and returns PropertyValue that contains BlurImage Url that can be set on ImageView 
            </summary>
            <param name="jarg1">Original Image url</param>
            <param name="jarg2">The constant controlling the Gaussian function, must be greater than 0.0f</param>
            <param name="jarg3">The size of the Gaussian blur kernel (number of samples in horizontal / vertical blur directions) and its value should be greater than 1.</param>
            <param name="jarg4">The scale factor applied during the blur process, scaling the size of the source image to the size of the final blurred image output.</param>
            <returns>PropertyValue containing BlurImage url string</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.BlurView">
            <summary>
            Interop Class for wraping native BgBlurView calls.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.CompressedTextureEffect.CreateCompressedTextureEffect(System.String)">
             <summary>
             Compressed Texture effect is used to display compressed image inside ImageView.
             This support ETC1 and ASTC format texture with extension.ktx.
             VD Compressed Texture also support ETC1 + ALPHA.
             Following is guideling for ETC1 + ALPHA
             1) Should Use Mali Texture Compression Tool or VDTool for creating
             ETC1 Compressed Texture with Alpha.We support Atlas Method.
            
             in which compressed ALPHA pixel of image is prepand to compressed RGB pixel of image.
            
            
             2) For Alpha enable compressed image name should be "image_name.etc_a".
            
             3) Extension should be '.ktx'.
             Usage exxample:
            
             IntPtr intPtr = Interop.CompressedTextureEffect.CreateCompressedTextureEffect("imagename.etc_a.ktx")
             PropertyMap map = new PropertyMap(intPtr, true);
             </summary>
             <param name="path"></param>
             <returns>IntPtr of PropertyMap</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.DynamicDropShadow">
            <summary>
            Interop Class for native DynamicDropShadow calls.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.New(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Create a DynamicDropShadow Object
            </summary>
            <param name="multiShadowViewHandle">multiShadowViewHandle Handle</param>
            <returns>DynamicDropShadow Handle</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.Delete(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Delete DynamicDropShadow handle
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.Activate(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Activate Shadow
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.Deactivate(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Deactivate Shadow
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.SetShadowArea(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
            Set Shadow Area
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowArea">Shadow Area value</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.GetShadowArea(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Get Shadow Area
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <returns>Shadow Area</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.SetShadowColor(System.Runtime.InteropServices.HandleRef,System.UInt32,System.Runtime.InteropServices.HandleRef)">
            <summary>
            Set Shadow Color
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowId">Shadow Id of shadow</param>
            <param name="shadowColor">Shadow Color value</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.GetShadowColor(System.Runtime.InteropServices.HandleRef,System.UInt32)">
            <summary>
            Get Shadow Color
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowId">Shadow Id of shadow</param>
            <returns>Color of shadow</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.SetShadowOffset(System.Runtime.InteropServices.HandleRef,System.UInt32,System.Runtime.InteropServices.HandleRef)">
            <summary>
            Set Shadow Offset
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowId">Shadow Id of shadow</param>
            <param name="shadowOffset">Shadow Offset value</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.GetShadowOffset(System.Runtime.InteropServices.HandleRef,System.UInt32)">
            <summary>
            Get Shadow Offset
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowId">Shadow Id of shadow</param>
            <returns>Offset of shadow</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.SetShadowBlurSize(System.Runtime.InteropServices.HandleRef,System.UInt32,System.UInt32)">
            <summary>
            Set Shadow BlurSize
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowId">Shadow Id of shadow</param>
            <param name="blurSize">Blur Size value</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.GetShadowBlurSize(System.Runtime.InteropServices.HandleRef,System.UInt32)">
            <summary>
            Get Shadow BlurSize
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowId">Shadow Id of shadow</param>
            <returns>Blur size of shadow</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.SetShadowBlurSigma(System.Runtime.InteropServices.HandleRef,System.UInt32,System.Single)">
            <summary>
            Set Shadow BlurSigma value
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowId">Shadow Id of shadow</param>
            <param name="blurSigma"> Blur sigma value</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.GetShadowBlurSigma(System.Runtime.InteropServices.HandleRef,System.UInt32)">
            <summary>
            Get Shadow BlurSigma
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowId">Shadow Id of shadow</param>
            <returns>Blur Sigma value of Shadow</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.AddShadow(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Add Shadow
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <returns>ShadowId</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.DynamicDropShadow.RemoveShadow(System.Runtime.InteropServices.HandleRef,System.UInt32)">
            <summary>
            Remove Shadow
            </summary>
            <param name="nativeHandle">DynamicDropShadow Handle</param>
            <param name="shadowId">Shadow Id of shadow to be removed. If 0 remove all shadows</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.FrameCallback">
            <summary>
            Interop Class for wraping native FrameCallback calls.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.GLSurfaceView">
            <summary>
            Interop Class for wraping native GLApplication calls.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.GLSurfaceView.GLInitCallback">
            <summary>
            Delegate that wrap Native GLInit callback.
            </summary>
            <param name="viewWidth">uint</param>
            <param name="viewHeight">uint</param>
            <returns>Return true to call GLDraw for rendering</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.GLSurfaceView.GLDrawCallback">
            <summary>
            Delegate that wrap Native GLDraw callback.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.GLSurfaceView.GLTerminateCallback">
            <summary>
            Delegate that wrap Native GLTerminateCallback callback.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.GLSurfaceView.New(System.UInt32,System.UInt32)">
            <summary>
            Create New Native GLSurfaceView.
            </summary>
            <returns>Native GLSurfaceView Object</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.GLSurfaceView.RegisterGLCallback(System.Runtime.InteropServices.HandleRef,Tizen.NUI.FLUX.Interop.GLSurfaceView.GLInitCallback,Tizen.NUI.FLUX.Interop.GLSurfaceView.GLDrawCallback,Tizen.NUI.FLUX.Interop.GLSurfaceView.GLTerminateCallback)">
            <summary>
            Creates the EGL Context and Initialize the wayland-window System with the given external GLWindow.
            <param name="glSurfaceHandle">Native GLSurfaceView Object</param>
            <param name="initCallback">Function Pointer to be call after successful EGL Initilization</param>          
            <param name="drawCallback">Function Pointer to be call per frame</param>          
            <param name="terminateCallback">Function Pointer to be call for egl resource cleanup</param>          
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.GLSurfaceView.SetRenderingMode(System.Runtime.InteropServices.HandleRef,Tizen.NUI.FLUX.GLSurfaceView.RenderMode)">
            <summary>
            Set RenderingMode.
            </summary>
            <returns>Native GLSurfaceView Object</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.GLSurfaceView.SetGLContentResizingMode(System.Runtime.InteropServices.HandleRef,Tizen.NUI.FLUX.GLSurfaceView.GLContentResizeMode)">
            <summary>
            Set GLContentResizingMode. 
            </summary>
            <returns>Native GLSurfaceView Object</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.GLSurfaceView.RequestRender(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Request Render
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.GLSurfaceView.ResetSurfaceSize(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32)">
            <summary>
            Reset surface size
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.GLSurfaceView.Upcast(System.IntPtr)">
            <summary>
            SWIGUpcast
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.GLSurfaceView.Delete(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Delete native glSurface handle
            </summary>
            <param name="nativeHandle"></param>
            <returns></returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.ImageColorPick">
            <summary>
            Interop Class for wraping native ImageColorPick APIs.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageColorPick.GetColorPickValueSync(System.String)">
            <summary>
            AvergaeColor value of a provided image in sync mode.
            </summary>
            <param name="imagePath"></param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageColorPick.GetColorPickValueAsync(System.String,Tizen.NUI.FLUX.Interop.ImageColorPick.NativeColorPickValueAsyncCallback)">
            <summary>
            AvergaeColor value of a provided image in async mode.
            </summary>
            <param name="imagePath"></param>
            <param name="colorPickValueCallback"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageColorPick.GetColorPickValueSync(System.String,System.IntPtr)">
            <summary>
            AvergaeColor value of a provided image in sync mode.
            </summary>
            <param name="imagePath"></param>
            <param name="rectHandle">handle to rectangle</param>
            <remarks>if rect is empty than colorpick value of entire image is calculated else given rect's colorpick value is calculated </remarks>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageColorPick.GetColorPickValueAsync(System.String,Tizen.NUI.FLUX.Interop.ImageColorPick.NativeColorPickValueAsyncCallback,System.IntPtr)">
            <summary>
            AvergaeColor value of a provided image in async mode.
            </summary>
            <param name="imagePath"></param>
            <param name="rectHandle">handle to rectangle</param>
            <remarks>if rect is empty than colorpick value of entire image is calculated else given rect's colorpick value is calculated </remarks>
            <param name="colorPickValueCallback"></param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.ImageUtility">
            <summary>
            Interop Class for native ImageUtility calls.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.New">
            <summary>
            Create a ImageUtility Object
            </summary>
            <returns>ImageUtility Handle</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.NewWithUrl(System.String)">
            <summary>
            Create an Image Utility Object and Load/Decode provided image
            </summary>
            <param name="imagePath"></param>
            <returns>ImageUtility Handle</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.NewWithImageBuffer(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,Tizen.NUI.PixelFormat,Tizen.NUI.FLUX.ReleaseFunction,System.Boolean)">
            <summary>
            Create an Image Utility Object and set image's raw buffer.
            </summary>
            <param name="buffer"></param>
            <param name="bufferSize"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="pixelFormat"></param>
            <param name="releaseFunction"></param>
            <param name="clone"></param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.Delete(System.IntPtr)">
            <summary>
            Delete Image Utility handle
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.RemoveTexture(System.String)">
            <summary>
            Remove Image Utility url
            </summary>
            <param name="imagePath">ImageUtility Path</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.GetBytesPerPixelFormat(Tizen.NUI.PixelFormat)">
            <summary>
            Get bytes per pixel format.
            </summary>
            <param name="pixelFormat">ImageUtility Path</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.SetImageUrl(System.Runtime.InteropServices.SafeHandle,System.String)">
            <summary>
            Set Image URL, provided image will loaded
            </summary>
            <param name="handle"></param>
            <param name="imagePath"></param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.GetImageUrl(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Get Image URL
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.GetSize(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Get Image Size
            </summary>
            <param name="handle"></param>
            <returns> Size in Vector2</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.GetPixelFormat(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Get Pixel Format
            </summary>
            <param name="handle"></param>
            <returns> PixelFormat</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.GetTextureUrl(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Get TextureURL
            </summary>
            <param name="handle"></param>
            <returns> Texture Url</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.GetBytePerPixel(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Get BytePerPixel
            </summary>
            <param name="handle"></param>
            <returns> bytes per pixel</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.GetBuffer(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Get Buffer
            </summary>
            <param name="handle"></param>
            <returns> raw buffer</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.EncodeToFile(System.Runtime.InteropServices.SafeHandle,System.String)">
            <summary>
            Encode to File
            </summary>
            <param name="handle"></param>
            <param name="imagePath">filename Identify the filesytem location at which to write the encoded image</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.Flip(System.Runtime.InteropServices.SafeHandle,Tizen.NUI.FLUX.FlipType)">
            <summary>
            Flip
            </summary>
            <param name="handle"></param>
            <param name="flipType"> supported flip type are VERTICAL, HORIZONTAL</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.Rotate(System.Runtime.InteropServices.SafeHandle,Tizen.NUI.FLUX.RotationType)">
            <summary>
            Rotate
            </summary>
            <param name="handle"></param>
            <param name="rotationType">Supported rotation are 0, 90, 180 and 270 in Counterclockwise direction</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.Scale(System.Runtime.InteropServices.SafeHandle,System.UInt32,System.UInt32,Tizen.NUI.FLUX.Interpolation)">
            <summary>
            Rotate
            </summary>
            <param name="handle"></param>
            <param name="scaledWidth"> width to scale</param>
            <param name="scaledHeight"> height to scale</param>
            <param name="interpolation">Interpolation Type for scale operation</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.BoxBlur(System.Runtime.InteropServices.SafeHandle,System.UInt32,System.Single)">
            <summary>
            FastBoxBlur
            </summary>
            <param name="handle"></param>
            <param name="kernelSize">The size of the blur kernel (number of samples).</param>
            <param name="downSampleScale">The scale factor applied during the blur process</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.ApplyFilterEffect(System.Runtime.InteropServices.SafeHandle,System.Int32)">
            <summary>
            ImageFilter
            </summary>
            <param name="handle"></param>
            <param name="filterType"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.FilterFinishedSignal(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Creates a handle of FilterFinishedSignal
            </summary>
            <param name="handle">a handle of ImageBuffer to own the signal</param>
            <returns>a handle of FilterFinishedSignal</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.FilterFinishSignalSignalConnect(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
            Connects method to FilterFinishedSignal
            </summary>
            <param name="jarg1"></param>
            <param name="jarg2"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.FilterFinishSignalDisconnect(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
            Disconnects method from FilterFinishedSignal
            </summary>
            <param name="jarg1"></param>
            <param name="jarg2"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Interop.ImageUtility.FilterFinishSignalDelete(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Deletes FilterFinishedSignal(unmanaged resource)
            </summary>
            <param name="handle">handle of signal</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.TVAsyncImageLoadHelper">
            <summary>
            Interop for native AsyncImageLoader.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.VideoCanvasView">
            <summary>
            Interop Class for wraping native ColorBlendEffect calls.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interop.VideoImageView">
            <summary>
            Interop Class for wraping native VideoImageView calls.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Config">
            <summary>
            This class provides TizenTV Internal API
            </summary>
            <remarks>
            A Tizen C# application is based on the specified API version information.
            </remarks>
            <code>
            using Tizen.TV.Internal;
            internal static partial class Interop
            {
                internal static partial class Libraries
                {
                    public const string GamepadClient = Config.TizenNativeLibPath + "libSefClientGamepad.so";
                }
            }
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.Config.TizenNativeLibPath">
            <summary>
            Return of the library path according to the architecture
            </summary>
            <version> 10.10.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxAnimation">
            <summary>
            FluxAnimation is base animation class for support FLUX Application.
            </summary>
            <code>
            fluxAnimation = new FluxAnimation(1000);    
            fluxAnimation.AnimateTo(fluxView, "UnitPositionX", 300);
            fluxAnimation.AnimateTo(fluxView, "UnitPositionY", 150);
            fluxAnimation.Play();
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.#ctor">
            <summary>
            FluxAnimation is a constructor for flux system animation.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.#ctor(System.Int32)">
            <summary>
            FluxAnimation constructor class which can set duration.
            </summary>
            <param name="durationMilliSeconds">The duration in milliseconds.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateTo(Tizen.NUI.FLUX.FluxView,System.String,System.Object,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property to a destination value.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="destinationValue">The destination value.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when target view is null</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateTo(Tizen.NUI.FLUX.FluxView,System.String,System.Object,System.Int32,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property to a destination value.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="destinationValue">The destination value.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="endTime">The end time of the animation.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when target view is null</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateBy(Tizen.NUI.FLUX.FluxView,System.String,System.Object,Tizen.NUI.AlphaFunction)">
            <summary>
             Animates a property value by a relative amount.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="relativeValue">The property value will change by this amount.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when target view is null</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateBy(Tizen.NUI.FLUX.FluxView,System.String,System.Object,System.Int32,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property value by a relative amount.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="relativeValue">The property value will change by this amount.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="endTime">The end time of the animation.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when target view is null</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateTo(Tizen.NUI.BaseComponents.View,System.String,System.Object,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property to a destination value.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="destinationValue">The destination value.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateTo(Tizen.NUI.BaseComponents.View,System.String,System.Object,System.Int32,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property to a destination value.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="destinationValue">The destination value.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="endTime">The end time of the animation.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateBy(Tizen.NUI.BaseComponents.View,System.String,System.Object,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property value by a relative amount.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="relativeValue">The property value will change by this amount.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateBy(Tizen.NUI.BaseComponents.View,System.String,System.Object,System.Int32,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property value by a relative amount.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="relativeValue">The property value will change by this amount.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="endTime">The end time of the animation.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateBetween(Tizen.NUI.BaseComponents.View,System.String,Tizen.NUI.KeyFrames,Tizen.NUI.Animation.Interpolation,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property between keyframes.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="keyFrames">The set of time or value pairs between which to animate.</param>
            <param name="interpolation">The method used to interpolate between values.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimateBetween(Tizen.NUI.BaseComponents.View,System.String,Tizen.NUI.KeyFrames,System.Int32,System.Int32,Tizen.NUI.Animation.Interpolation,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property between keyframes.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="keyFrames">The set of time/value pairs between which to animate</param>
            <param name="startTime">The start time of animation in milliseconds.</param>
            <param name="endTime">The end time of animation in milliseconds.</param>
            <param name="interpolation">The method used to interpolate between values.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimatePath(Tizen.NUI.BaseComponents.View,Tizen.NUI.Path,Tizen.NUI.Vector3,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates the view's position and orientation through a predefined path.
            </summary>
            <param name="view">The view to animate.</param>
            <param name="path">It defines position and orientation.</param>
            <param name="forward">The vector (in local space coordinate system) will be oriented with the path's tangent direction.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxAnimation.AnimatePath(Tizen.NUI.BaseComponents.View,Tizen.NUI.Path,Tizen.NUI.Vector3,System.Int32,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates the view's position and orientation through a predefined path.
            </summary>
            <param name="view">The view to animate.</param>
            <param name="path">It defines position and orientation.</param>
            <param name="forward">The vector (in local space coordinate system) will be oriented with the path's tangent direction.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="endTime">The end time of the animation.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.FrameAnimation">
            <summary>
            This is FrameAnimation which enables user to animate multiple images.
            </summary>
            <code>
            frameAnimation = new FrameAnimation();
            frameAnimation.FPS = 60;
            frameAnimation.Looping = true;
            frameAnimation.ImageArray = new string[]
            {
                @"/home/owner/apps_rw/Tizen.TV.FLUX.Example/res/images/Movies/1.jpg",
                @"/home/owner/apps_rw/Tizen.TV.FLUX.Example/res/images/Movies/2.jpg",
                @"/home/owner/apps_rw/Tizen.TV.FLUX.Example/res/images/Movies/3.jpg",
                @"/home/owner/apps_rw/Tizen.TV.FLUX.Example/res/images/Movies/4.jpg",
                @"/home/owner/apps_rw/Tizen.TV.FLUX.Example/res/images/Movies/5.jpg",
            };
            frameAnimation.Attach(imageView);
            frameAnimation.Play();
            frameAnimation.Finished += FrameAnimation_Finished;
            Log.Error("FluxSample", "Current AnimationState : ", frameAnimation.AnimationState);
            
            private void FrameAnimation_Finished(object sender, EventArgs e)
            {
                // Do Something 
            }
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FrameAnimation.#ctor">
            <summary>
            Constructor to instantiate the FrameAnimation class.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FrameAnimation.Looping">
            <summary>
            Enable / disable infinite loop of FrameAnimation.
            If Looping is true, LoopCount will be ignored.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FrameAnimation.LoopCount">
            <summary>
            Set loop count of FrameAnimation.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FrameAnimation.FPS">
            <summary>
            Set or get FPS of FrameAnimation
            When FPS value is 0 or less, fps will be set as 60 by default.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FrameAnimation.ImageArray">
            <summary>
            Images that will be animated in turn.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FrameAnimation.AnimationState">
            <summary>
            Get animation state of FrameAnimation.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FrameAnimation.Attach(Tizen.NUI.BaseComponents.ImageView)">
            <summary>
            Attach ImageView on FrameAnimation.
            </summary>
            <param name="imageView">ImageView where images will be animated.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FrameAnimation.Detach">
            <summary>
            Detach ImageView from FrameAnimation.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FrameAnimation.Play">
            <summary>
            Play FrameAnimation
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FrameAnimation.Stop(Tizen.NUI.Animation.EndActions)">
            <summary>
            Stop FrameAnimation
            </summary>
            <param name="action">Action after stopping. </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FrameAnimation.Pause">
            <summary>
            Pause FrameAnimation
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.FrameAnimation.Finished">
            <summary>
            Event for Finished signal which can be used to subscribe/unsubscribe the event handler.
            Finished signal is emitted when FrameAnimation's animation have finished.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.BaseComponentEntry">
            <summary>
            Flux component entry
            </summary>
            <code>
            ComponentEntry.Initialize();
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.BaseComponentEntry.ResponsiveRuleMinimumVersion">
            <summary>
            Define the  Responsive Rule Version of FLUXUS. Default is 1.0 version.
            </summary>
            <version> 10.10.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.BaseComponentEntry.Initialize">
            <summary>
            Should called before using Flux Components
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.BaseComponentEntry.Initialize(System.Single)">
            <summary>
             FLUX component initialize 
            </summary>
            <param name="appScaleFactor"> If user want to change FLUX scale factor , then please assign your factor using this API. Scale factor shuold be assigned as predefined value by UX" </param>
            <exception>You call this API at other thread</exception>
            <version> 9.9.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.BaseComponentEntry.Initialize(System.String)">
            <summary>
             FLUX component initialize 
            </summary>
            <param name="customColorPath"> If user want to replace color table, please give folder path. And reserved file name of color table is "principle_colortable.json" </param>
            <exception>You call this API at other thread</exception>
            <version> 8.8.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.BaseComponentEntry.CleanUp">
            <summary>
            Should be called when the application exit
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.FluxBackground">
            <summary>
            BindableProperty of FluxBackground.
            </summary>
            <code>
            FluxBackground fluxBG = new FluxBackground((int)SizeWidth, (int)SizeHeight);
            </code>
            <summary>
            FluxBackground is the Class that describe the default background of FluxApp. 
            And it will be included at RootLayout as default. 
            </summary>
            <code>
            FluxBackground fluxBG = new FluxBackground((int)SizeWidth, (int)SizeHeight);
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.FluxBackground.ThemeBackgroundColorChipProperty">
            <summary>
            BindableProperty for ThemeBackgroundColorChip, it's used as an argument of SetBinding API to bind a value to FluxBackground object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.FluxBackground.#ctor(System.Int32,System.Int32)">
            <summary>
             Constructor of Flux App Background, it has primitive defined by UX principle. ( TileImage , Color )
            </summary>
            <param name="width"> if width or height was 0, it will be created with window's size</param>
            <param name="height"> if width or height was 0, it will be created with window's size</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.FluxBackground.#ctor(System.String)">
            <summary>
             Constructor of Flux App Background, it has primitive defined by UX principle. ( Image , Color )
            </summary>
            <param name="resourceURL"> if url was null, it means "use default iamge" defined by UX</param>
            <version> 8.8.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxBackground.ThemeBackgroundColorChip">
            <summary>
             ThemeBackgroundColorChip value ( default value is "CC_BG5100" )
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tizen.NUI.FLUX.Component.FluxBackground.ChangeImage(System.String)" -->
        <member name="M:Tizen.NUI.FLUX.Component.FluxBackground.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Cleaning up managed and unmanaged resources
            </summary>
            <param name="type">
            Type of Dispose.
            Explicit - Called by user explicitly.
            Implicit - Called by gc implicitly.
            </param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Component">
            <summary>
            Component is base class of flux components.
            </summary>
            <version> 6.6.0 </version>
            <code>
            Component component = new Component();
            component.UnitSize = new UnitSize(10,10);
            </code>
            <summary>
            Component is base class of flux components.
            </summary>
            <version> 6.6.0 </version>
            <code>
            Component component = new Component();
            component.UnitSize = new UnitSize(10,10);
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.StateProperty">
            <summary>
            BindableProperty for State, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.DisabledProperty">
            <summary>
            BindableProperty for Disabled, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.SelectedProperty">
            <summary>
            BindableProperty for Selected, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.CheckedProperty">
            <summary>
            BindableProperty for Checked, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.IsItemForFastScrollProperty">
            <summary>
            BindableProperty for IsItemForFastScroll, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.DefaultFocusMotionEnabledProperty">
            <summary>
            BindableProperty for DefaultFocusMotionEnabled, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.DefaultSelectMotionEnabledProperty">
            <summary>
            BindableProperty for DefaultSelectMotionEnabled, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.SendKeyInsteadExecuteProperty">
            <summary>
            BindableProperty for SendKeyInsteadExecute, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.ThemeColorProperty">
            <summary>
            BindableProperty for ThemeColor, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.PointingBehaviorProperty">
            <summary>
            BindableProperty for PointingBehavior, it's used as an argument of SetBinding API to bind a value to Component object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.StatePropertyDefinitions">
            <summary>
            Updates state property by adding StatePropertyDefinition.
            Note that objects added to this collection are removed after update value.
            This property is only intended for use by the XAML Application.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.PlaneThemeColor">
            <summary> Background Color for Theme </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Component.ExecuteEventArgs">
            <summary>
            Event arguments of Execute.
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.ExecuteEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Component.LongPressExecuteEventArgs">
            <summary>
            Event arguments of LongPressExecute.
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Component.LongPressExecuteEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.State">
            <summary>
            Connect StateMachine in Preset.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.Disabled">
            <summary>
            Default is false(Normal state)
            If you want to disabled state to component, you set this value to true.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.Selected">
            <summary>
            Default is false(Normal state)
            If you want to selected state to component, you set this value to true.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.Checked">
            <summary>
            Default is false
            If you want to checked state to component, you set this value to true.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.IsItemForFastScroll">
            <summary>
            Set item for fast scroll inside scrollview or list control
            </summary>
            <version> 9.9.1 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.DefaultFocusMotionEnabled">
            <summary>
            If user want to use default focus in/out motion defined by Principle., make it true. Default value is false.
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.DefaultSelectMotionEnabled">
            <summary>
            If user want to use default select in/out motion defined by Principle., make it true. Default value is false.
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.SendKeyInsteadExecute">
            <summary>
            Send Key event Instead of Execute event.
            Default value is false.
            If set false, when touched component, not received execute and return key event.
            </summary>
            <version> 10.10.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.FocusedByPointing">
            <summary>
            In view.FocusGained event, user can call this API to check whether the focus is gained by Touch
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="E:Tizen.NUI.FLUX.Component.Component.Execute">
            <summary>
            An event for the Execution signal which can be used to subscribe or unsubscribe the event handler provided by the user in Component touch mode.
            The Execution signal is emitted when the control gets the PointingBehaviorMode.
            </summary>
            <version> 9.9.0 </version>
            <code>
            component.Execute += ExecuteEventHandler;
            </code>
        </member>
        <member name="E:Tizen.NUI.FLUX.Component.Component.LongPressExecute">
            <summary>
            An event for the touch long pressed signal which can be used to subscribe or unsubscribe the event handler provided by the user in Component touch mode.
            The LongPressExecute signal is emitted when a long press gesture occurs.
            </summary>
            <version> 9.9.0 </version>
            <code>
            component.LongPressExecute += LongPressExecuteEventHandler;
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.InputEnabler">
            <summary>
            Enabler for Input Event. 
            </summary>
            <code>
             component.InputEnabler[Constant.Touch] = true; // Enable Touch event
             if( component.InputEnabler[Constant.Touch]  == true ) // Check Touch Event is enabled 
             {
             }
            </code>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.ThemeColor">
            <summary>
            Change Component ThemeColorChip or ThemeColorPreset . 
            </summary>
            <code>
             textBox.ThemeColor["TextColor"].ColorChip = "CC_Point3100"; 
            </code>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.PointingBehavior">
            <summary>
            Component touch mode. User can choose their component as Pointing action. Default is PressIsFocus
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.PressedStateEnabled">
            <summary>
            Enable Component Apply Pressed State
            </summary>
            <code>
             textBox.PressedStateEnabled = true; 
            </code>
            <version> 10.10.1 </version>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Tizen.NUI.FLUX.Component.Component.LongPressMotionTypes.Type01" -->
        <member name="F:Tizen.NUI.FLUX.Component.Component.LongPressMotionTypes.Type02">
            <summary>
            Scale Motion
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.#ctor">
            <summary>
            Construct an empty ComponentBase.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.#ctor(System.String,System.String)">
            <summary>
            Construct an empty ComponentBase.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.OnFocusGained">
            <summary>
            Called when the control gain key input focus. Should be overridden by derived classes if they need to customize what happens when focus is gained.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.OnFocusLost">
            <summary>
            Called when the control loses key input focus. Should be overridden by derived classes if they need to customize what happens when focus is lost.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.OnUpdate">
            <summary>
            OnUpdate when user call Update directly
            </summary>
            <version> 6.6.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.OnKey(Tizen.NUI.Key)">
            <summary>
            Called after a key-event is received by the view that has had its focus set.
            </summary>
            <param name="key">The key event</param>
            <returns>True if the key event should be consumed</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.UpdateStateProperty(System.String,System.String,System.Object)">
            <summary>
            You want to change propertyName in your app, You should set stateName, propertyName, propertyValue.
            </summary>
            <param name="stateName"> state name which need to update</param>
            <param name="propertyName"> property name which need to update</param>
            <param name="value"> new value of specified property </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.GetElement(System.String)">
            <summary>
            Get the element in component.
            </summary>
            <param name="eName">The element's name.</param>
            <returns>Element object of specific name</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.ShowWithAppearAnimation">
            <summary>
            Show the component with appear animation
            </summary>
            <version> 6.6.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.HideWithDisappearAnimation">
            <summary>
            Hide the component with disappear animation
            </summary>
            <version> 6.6.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.SetFocus">
            <summary>
            Set fake focus, this was not real focus, only state and visual spec is changed, so be care about it
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.KillFocus">
            <summary>
             Kill fake focus, this was not real focus, only state and visual spec is changed, so be care about it
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.UpdateLayout">
            <summary>
             Update RootLayout from Component Side
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.Component.Component.FocusGained">
            <summary>
            An event for the KeyInputFocusGained signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            The KeyInputFocusGained signal is emitted when the control gets the key input focus.<br />
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.Component.Component.FocusLost">
            <summary>
            An event for the KeyInputFocusLost signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            The KeyInputFocusLost signal is emitted when the control loses the key input focus.<br />
            </summary>
            <version> 6.6.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.JoinStatePropagation(Tizen.NUI.FLUX.Component.ComponentBase)">
            <summary>
            Join element for state propagation
            </summary>
            <param name="element">Join Component</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Control.
            </summary>
            <param name="type">Dispose caused type</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.DestroyTree">
            <summary>
            Destroy the hierarchy constructor tree.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.CreateTree">
            <summary>
            Create the hierarchy constructor tree.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Component.SetColorByPropertyInternal(System.String,Tizen.NUI.Color)">
            <summary>
            Set Color using string property name. 
            This is internal method. Don't use this 
            </summary>
            <param name="property">The target property name.</param>
            <param name="color">The color value.</param>
            <returns> if success then return true </returns>
            <version> 10.10.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.ThemeBackgroundColorPreset">
            <summary>
            Set ColorPreset in backgroundColor of Component. When you set this value,it is changed automatically according to state. 
            The string starts "CP_".
            <example>
            component.ThemeBackgroundColorPreset = "CP_Info1100";
            </example>
            </summary>       
            <deprecated> Deprecated since 9.9.0.  Please use  ThemeColor[**].ColorChip or ColorPreset</deprecated>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Component.ThemeBackgroundColorChip">
            <summary>
            Set ColorChip in backgroundColor of Component. It is only set Color not changing color according to state.
            The string starts "CC_"
            </summary>
            <example>
            component.ThemeBackgroundColorChip = "CC_Basic1100";
            </example>
            <deprecated> Deprecated since 9.9.0.  Please use  ThemeColor[**].ColorChip or ColorPreset</deprecated>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.ComponentBase">
            <summary>
            BindableProperty of ComponentBase.
            </summary>
            <code>
            Refer to Component class.
            </code>
            <summary>
            ComponentBase.
            </summary>
            <code>
            Refer to Component class.
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ComponentBase.LayoutParamProperty">
            <summary>
            BindableProperty for LayoutParam, it's used as an argument of SetBinding API to bind a value to ComponentBase object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ComponentBase.EnablePropagateStateProperty">
            <summary>
            BindableProperty for EnablePropagateState, it's used as an argument of SetBinding API to bind a value to ComponentBase object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ComponentBase.KeepHeightByRatioProperty">
            <summary>
            BindableProperty for KeepHeightByRatio, it's used as an argument of SetBinding API to bind a value to ComponentBase object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ComponentBase.KeepWidthByRatioProperty">
            <summary>
            BindableProperty for KeepWidthByRatio, it's used as an argument of SetBinding API to bind a value to ComponentBase object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ComponentBase.NeedUpdateLayoutProperty">
            <summary>
            BindableProperty for NeedUpdateLayout, it's used as an argument of SetBinding API to bind a value to ComponentBase object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.#ctor">
            <summary>
            Construct an empty ComponentBase.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.#ctor(System.String)">
            <summary>
            Construct an empty ComponentBase.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.Update">
            <summary>
            Update with Attributes.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ComponentBase.LayoutParam">
            <summary>
             This class is item's property class in layout. 
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.Attach(Tizen.NUI.BaseComponents.View)">
            <summary>
             Attach view as child with legacy way. And it maybe not influence "Responsive Rule" . So if user want to add to Layout or Component as Flux Rule, please use Add/Remove. 
             If you want to get the state propagation, then please use   Attach(ComponentBase view, bool enablePropagateState)
            </summary>
            <param name="view"> if null, it makes exception.</param>
            <version>8.8.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.Attach(Tizen.NUI.FLUX.Component.ComponentBase,System.Boolean)">
            <summary>
             Attach view as child with legacy way. And it maybe not influence "Responsive Rule" . So if user want to add to Layout or Component as Flux Rule, please use Add/Remove. 
            </summary>
            <param name="view"> if null, it makes exception.</param>
            <param name="enablePropagateState"> if attached layout or component get the state propagation, then set true</param>
            <version>9.9.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.Detach(Tizen.NUI.BaseComponents.View)">
            <summary>
             Detach view as child with legacy way. And it maybe not influence "Responsive Rule" . So if user want to add to Layout or Component as Flux Rule, please use Add/Remove. 
            </summary>
            <param name="view"> if null, it makes exception.</param>
            <version>8.8.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.OnUpdate">
            <summary>
            Called when the control attributes changed. Should be overridden by derived classes if they need to customize what happens when attributes changed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.UpdateLayout">
            <summary>
            Call the function to request component to update layout.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ComponentBase.EnablePropagateState">
            <summary>
            enablePropagateState. 
            If enablePropagateState is true , the children state will all update when the parent state changed.
            If enablePropagateState is false, the children state will not update  when the parent state changed,such as datepicker,timepicker. 
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ComponentBase.KeepHeightByRatio">
            <summary>
            if this value is true, automatical define Height size by SizeRatio. ( SizeRatio is "Initial Width divide Initial Height")
            MeasureHeight = Current Width * SizeRatio
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ComponentBase.KeepWidthByRatio">
            <summary>
            if this value is true, automatical define Width by SizeRatio. ( SizeRatio is "Initial Width divide Initial Height")
            MeasureWidth = Current Height * SizeRatio
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ComponentBase.NeedUpdateLayout">
            <summary>
            if this value is false, skip the component's internal layout update while parent update Layout.
            Default is true, This works on Component only. Layout doesn't work.
            </summary>
            <version> 9.9.1 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.OnHighContrastChanged(System.Object,System.EventArgs)">
            <summary>
            This method is called HighContrast state changed.
            Derived classes should override this if they wish to customize to handle the highContrast event.
            </summary>
            <param name="sender">The object who send this event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.OnEnlargeChanged(System.Object,System.EventArgs)">
            <summary>
            This method is called Enlarge state changed.
            Derived classes should override this if they wish to customize to handle the enlarge event.
            </summary>
            <param name="sender">The object who send this event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Control.
            </summary>
            <param name="type">Dispose caused type</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.PostUpdateLayout">
            <summary>
            PostUpdateLayout() .
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.PreUpdateLayout">
            <summary>
            PreUpdateLayout.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.DoReshape">
            <summary>
            If Component want to reshape work, implate this function and called in updatelayout.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ComponentBase.UnDoReshape">
            <summary>
            If Component want to revert reshape work, implate this function and called in updatelayout.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Layout">
            <summary>
            BindableProperty of Layout.
            </summary>
            <code>
            Layout layout = new Layout(LayoutType.FlexV);
            layout.UnitSize = new UnitSize(25,10);
            layout.MaximumUnitSize = new UnitSize(25,10);
            layout.MinimumUnitSize = new UnitSize(25,10);
            </code>
            <summary>
            This class is Layout of Component
            </summary>
            <code>
            Layout layout = new Layout(LayoutType.FlexV);
            layout.UnitSize = new UnitSize(25,10);
            layout.MaximumUnitSize = new UnitSize(25,10);
            layout.MinimumUnitSize = new UnitSize(25,10);
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Layout.LayoutParamProperty">
            <summary>
            BindableProperty for LayoutParam, it's used as an argument of SetBinding API to bind a value to Layout object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Layout.BackgroundViewProperty">
            <summary>
            BindableProperty for BackgroundView, it's used as an argument of SetBinding API to bind a value to Layout object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Layout.ThemeBackgroundColorChipProperty">
            <summary>
            BindableProperty for ThemeBackgroundColorChip, it's used as an argument of SetBinding API to bind a value to Layout object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Layout.Add(Tizen.NUI.BaseComponents.View)">
            <summary>
             Adds a child view to this view.
            </summary>
            <param name="child"> The Child view that you want to add </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Layout.Remove(Tizen.NUI.BaseComponents.View)">
            <summary>
            Removes a child view from this View. If the view was not a child of this view, this is a no-op.
            </summary>
            <param name="child"> The Child view that you want to remove </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Layout.Insert(System.Int32,Tizen.NUI.BaseComponents.View)">
            <summary>
            Puts a child at a specific index in the layout.
            Not Need Call Add method.
            </summary>
            <param name="index">layout`s child index.</param>
            <param name="child"> The Child view that you want to insert </param>
            <version> 10.10.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Layout.#ctor">
            <summary>
            Constructor to instantiate the Layout class.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Layout.#ctor(Tizen.NUI.FLUX.Component.LayoutTypes)">
            <summary>
            Constructor to instantiate the Layout class.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Layout.#ctor(System.String)">
            <summary>
            Constructor to instantiate the Layout class.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Layout.UpdateLayout">
            <summary>
            User can call this function to layout its children
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Layout.LayoutParam">
            <summary>
             This class is layout's property. for FlexH, FlexV, Linear
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Layout.BackgroundView">
            <summary>
             VIew instance of Layout's Background
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Layout.ThemeBackgroundColorChip">
            <summary>
            Set ColorChip in backgroundColor of Layout. It is only set Color not changing color according to state.
            The string starts "CC_"
            </summary>
            <example>
            layout.ThemeBackgroundColorChip = "CC_Basic1100";
            </example>
            <version>8.8.0</version>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tizen.NUI.FLUX.Component.Layout.GetNextFocusableFluxView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection)" -->
        <member name="M:Tizen.NUI.FLUX.Component.Layout.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Cleaning up managed and unmanaged resources
            </summary>
            <param name="type">
            Type of Dispose.
            Explicit - Called by user explicitly.
            Implicit - Called by gc implicitly.
            </param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.PaddingTypeConverter">
            <summary>
            class for converting padding in XMAL
            </summary>
            <version> 10.10.0 </version>
            <code>
            PaddingTypeConverter converter = new PaddingTypeConverter();
            string value = "2,3,1,1";
            Padding padding = (Padding)converter.ConvertFromInvariantString(value);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.PaddingTypeConverter.ConvertFromInvariantString(System.String)">
            <summary>
            class for converting padding in XAML
            </summary>
            <param name="value">Padding</param>
            <returns>Padding if value passed is valid parameter.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when string value is null.</exception>
            <version> 10.10.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.RootLayout">
            <summary>
            BindableProperty of RootLayout.
            </summary>
            <code>
            RootLayout root = new RootLayout();
            root.Add(button);
            root.Add(textBox);
            root.UpdateLayout();
            </code>
            <summary>
            This class is RootLayout of Layout.
            </summary>
            <code>
            RootLayout root = new RootLayout();
            root.Add(button);
            root.Add(textBox);
            root.UpdateLayout();
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.LayoutParamProperty">
            <summary>
            BindableProperty for LayoutParam, it's used as an argument of SetBinding API to bind a value to RootLayout object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.MarginMinimumSizeProperty">
            <summary>
            BindableProperty for MarginMinimumSize, it's used as an argument of SetBinding API to bind a value to RootLayout object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.BackgroundEnabledProperty">
            <summary>
            BindableProperty for BackgroundEnabled, it's used as an argument of SetBinding API to bind a value to RootLayout object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            10.10.0
            </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayout.#ctor(Tizen.NUI.Layer)">
            <summary>
            Constructor to instantiate the RootLayout class.
            </summary>
            <param name="layer"> The layer that want to add this </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayout.#ctor(Tizen.NUI.Layer,Tizen.NUI.FLUX.Component.LayoutTypes)">
            <summary>
            Constructor to instantiate the RootLayout class.
            </summary>
            <param name="layer"> The layer that want to add this  </param>
            <param name="type"> The Layout's Type enum value </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayout.#ctor(Tizen.NUI.Layer,Tizen.NUI.FLUX.Component.LayoutTypes,System.Boolean)">
            <summary>
            Constructor to instantiate the RootLayout class.
            </summary>
            <param name="layer"> The layer that want to add this </param>
            <param name="type"> The Layout's Type enum value  </param>
            <param name="enableDefaultBackground"> Enable / Disable default background image of principle.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayout.#ctor(Tizen.NUI.Layer,Tizen.NUI.FLUX.Component.FluxBackground,Tizen.NUI.FLUX.Component.LayoutTypes)">
            <summary>
            Constructor to instantiate the RootLayout class.        
            </summary>
            <param name="layer"> The layer that want to add this </param>
            <param name="background"> User can choose TileBackground or CropBackground as BG of RootLayout</param>
            <param name="type"> The Layout's Type enum value </param>
            <code>
            RootLayout rootLayout = new RootLayout(Window.Instance.GetDefaultLayer(), new CropBackground("oobe_bg.webp")); 
            </code>
            <version> 8.8.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayout.#ctor(Tizen.NUI.Layer,Tizen.NUI.FLUX.UnitSize,Tizen.NUI.FLUX.Component.LayoutTypes,System.Boolean)">
            <summary>
            Constructor to instantiate the RootLayout class.        
            </summary>
            <param name="layer"> The layer that want to add this </param>
            <param name="size"> The fixed size of this layout </param>
            <param name="type"> The Layout's Type enum value </param>
            <param name="enableDefaultBackground">Default value is false</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayout.#ctor(Tizen.NUI.Layer,Tizen.NUI.FLUX.UnitSize,Tizen.NUI.FLUX.Component.FluxBackground,Tizen.NUI.FLUX.Component.LayoutTypes)">
            <summary>
            Constructor to instantiate the RootLayout class.        
            </summary>
            <param name="layer"> The layer that want to add this </param>
            <param name="size"> The fixed size of this layout </param>
            <param name="background">User can choose TileBackground or CropBackground as BG of RootLayout</param>
            <param name="type"> The Layout's Type enum value </param>
            <code>
            RootLayout rootLayout = new RootLayout(Window.Instance.GetDefaultLayer(), new UnitSize(1920,1080) , new CropBackground("oobe_bg.webp")); 
            </code>
            <version> 8.8.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayout.UpdateLayout">
            <summary>
            Function to update the layout.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.RootLayout.UpdateLayoutFinishedTypes">
            <summary>
            This Enum value is Event information Type. 
            user is able to know why called "updatelayout" from type.
            </summary>
            <code>
            updateLayoutCallType.Types = UpdateLayoutFinishedTypes.ManualCallByUser;
            </code>
            <version> 8.8.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.UpdateLayoutFinishedTypes.ManualCallByUser">
            <summary>
            user call "UpdateLayout"
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.UpdateLayoutFinishedTypes.WindowSizeChange">
            <summary>
            window Size Change.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.UpdateLayoutFinishedTypes.UIDirectionChange">
            <summary>
            UIDirection Changes. (RTL,LTR)
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RootLayout.LayoutParam">
            <summary>
             This class is Rootlayout's property class. RootLayout Only Property
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RootLayout.MarginMinimumSize">
            <summary>
            this property set marign minimum value of grid.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RootLayout.BackgroundEnabled">
            <summary>
            If true, RootLayout's background will be shown. default value is true
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.RootLayout.AngleChangeEventArgs">
            <summary>
            this event information is used When angle changed in rootlayout.
            <code>
            AngleChangeEventArgs changedEvent = new AngleChangeEventArgs();
            </code>
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.AngleChangeEventArgs.RotatedUnitSize">
            <summary>
            for RootLayout`s Size 
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.AngleChangeEventArgs.Angle">
            <summary>
            for RootLayout`s angle
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.RootLayout.UpdateLayoutFinishedEventArgs">
            <summary>
            this event information is used When updatedlayout finished in rootlayout.
            <code>
            UpdateLayoutFinishedEventArgs updatedEvent = new UpdateLayoutFinishedEventArgs();
            </code>
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.UpdateLayoutFinishedEventArgs.RootLayoutSize">
            <summary>
            RootLayout`s Size.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RootLayout.UpdateLayoutFinishedEventArgs.Types">
            <summary>
            Called Type information.
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.Component.RootLayout.AngleChangeEventHandler">
            <summary>
            This event is used When angle changed in rootlayout. 
            <code>
            rootlayout.AngleChangeEventHandler +=  RootLayoutAngleChange;
            </code>
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.Component.RootLayout.UpdateLayoutFinished">
            <summary>
            This event is called When called after updatedlayout finished in rootlayout.
            <code>
            rootlayout.UpdateLayoutFinishedEventArgs +=  UpdateLayoutFinished;
            </code>
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="E:Tizen.NUI.FLUX.Component.RootLayout.PortraitHandler">
            <summary>
             Handler for portrait of window size ( with/height ratio  1.0f ) 
            <code>
            rootlayout.PortraitHandler += DoPortrait;
            </code>
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="E:Tizen.NUI.FLUX.Component.RootLayout.LandscapeHandler">
            <summary>
             Handler for landscape of window size ( with/height ratio over 1.0f ) 
            <code>
            rootlayout.PortraitHandler += LandscapeHandler;
            </code>
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayout.OnHighContrastChanged(System.Object,System.EventArgs)">
            <summary>
            This method is called HighContrast state changed.
            Derived classes should override this if they wish to customize to handle the highContrast event.
            </summary>
            <param name="sender">The object who send this event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayout.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose to instantiate the RootLayout class.        
            </summary>
            <param name="type">Type of Dispose</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.IFocusManageable">
            <summary>
            IFocusManageable is used to provide the custom keyboard focus behavior for retrieving the next focusable view. 
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.IFocusManageable.GetNextFocusableFluxView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection)">
            <summary>
            when implement this interface, have to return view.
            if return null, Autofocus alg find next view base on coordinate.
            </summary>
            <param name="focusedView"> currnet focused view</param>
            <param name="direction"> Direction to get next focus</param>
            <returns> Return View instance to apply auto focus</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.AutoFocusAlgorithm">
            <summary>
             Algorithm used to provide the custom keyboard focus algorithm for retrieving the next focusable view
             UX Principls move focus to the nearest focusable component.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.AutoFocusAlgorithm.Instance">
            <summary>
             Singleton instance of  AutoFocusAlgorithm
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.AutoFocusAlgorithm.CustomWeight">
            <summary>
            this value is for weight function of absolute distance ( x or y axis ).
            when focusmanager calculate distance, this weight multiply for absolute distance.
            </summary>
            <version> 6.6.1 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.AutoFocusAlgorithm.GetNextFocusableView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection)">
            <summary>
            "current" is currnect focused view.
             "proposed" shoud be null. that value is not used, just for match with base interface.
            </summary>
            <param name="current"> The view has focus </param>
            <param name="proposed"> The view to move focus </param>
            <param name="direction"> The key direction </param>
            <returns></returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.IStatable">
            <summary>
             This class is interface class to support State
            </summary>
            <version> 6.6.0 </version>
            <code>
            public class CustomComponent : IStatable
            {
             
            }
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.IStatable.Disabled">
            <summary>
            To support Disable State, inherited class should provide same property as public
            If you want to disabled state , you set this value to true.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.IStatable.Selected">
            <summary>
            To support Selected State, inherited class should provide same property as public
            If you want to checked state , you set this value to true.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.IStatable.Checked">
            <summary>
            To support Checked State, inherited class should provide same property as public
            If you want to checked state , you set this value to true.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.IStatable.State">
            <summary>
            StateMachine to support state, inherited class should create new StateMachine. 
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.IStatable.UpdateStateProperty(System.String,System.String,System.Object)">
            <summary>
            Update  state property value at StateMachine , inherited class should provide same logic using StateMachine
            </summary>
            <param name="stateName"> state name which need to update</param>
            <param name="propertyName"> property name which need to update</param>
            <param name="value"> new value of specified property </param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.UserState">
            <summary>
            If you make userState in your application, you can fill it.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.UserState.PreDefinedStateName">
            <summary>
            This is pre-defined state from UX.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.UserState.PropertyName">
            <summary>
            Enter PropertyName(ex. Opacity etc)
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.UserState.PropertyValue">
            <summary>
            Enter PropertyVaule according to PropertyName
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.UserState.#ctor(System.String,System.String,System.Object)">
            <summary>
            Constructor about UserState.
            </summary>
            <param name="preDefinedStateName">This is pre-defined state from UX.</param>
            <param name="propertyName">Enter PropertyName(ex. Opacity etc)</param>
            <param name="value">Enter PropertyVaule according to PropertyName</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.PrintColomnModes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PrintColomnModes.none">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PrintColomnModes.print">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.ChangeGrid">
            <summary>
            Delegate for Change Grid value
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Grid">
            <summary>
            Gidsystem Class
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Grid.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Grid.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Grid.ChangeDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Grid.UpdateLayout">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Grid.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Cleaning up managed and unmanaged resources
            </summary>
            <param name="type">
            Type of Dispose.
            Explicit - Called by user explicitly.
            Implicit - Called by gc implicitly.
            </param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.LayoutTypes">
            <summary>
            Layout's Type enum value
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.LayoutTypes.FlexV">
            <summary>
            Arrange all items (component OR layout) in a single vertical direction
            Only one component or layout per row can be placed.
            Responsive Rule: Resizing
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.LayoutTypes.FlexH">
            <summary>
            Align all descendants in a single horizontal direction.
            Responsive Rule
            - Rule1) Rearrange
            - Rule2) Resize: (Default)
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.LayoutTypes.Linear">
            <summary>
            Use Linear Layout if you need to define the same property and size for the same component in groups.
            Components are placed horizontally. (No group is placed vertically)
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.LayoutTypes.Frame">
            <summary>
            Arrange item in Z-Order.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.LayoutTypes.Table">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.LayoutTypes.Box">
            <summary>
            Align item in 9 direction, default is TopLeft.
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.LayoutTypes.None">
            <summary>
            None type.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.ResizePolicyTypes">
            <summary>
            Layout's resizerule for item.
            this policy is adjust to child,
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ResizePolicyTypes.None">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ResizePolicyTypes.Fixed">
            <summary> It is fixed. </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ResizePolicyTypes.Reserved">
            <summary> It has default value, user also can change it. </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ResizePolicyTypes.Shared">
            <summary> It will hold unfixed space. </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ResizePolicyTypes.MatchParent">
            <summary> It should be same to its parent. </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ResizePolicyTypes.Wrap">
            <summary> 
            It depends on its children. Its children should have value. 
            It can't work if its children is Shared/MatchParent, because the two properties means its children depends on its parent.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.OmissionRules">
            <summary>
            child(layout`s child) able to have this property. ( not parent proeprty )
            if child reduce until minimunsize, do omission. minimumsize is breakpoint on omissionrule.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.OmissionRules.Off">
            <summary>
            Default. 
            OmissionRule is Off.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.OmissionRules.On">
            <summary>
             OmissionRule is On.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Aligns">
            <summary>
            Layout's AlignRule for item.
            this policy is adjust to child,
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.None">
            <summary>
            Default 
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.TopCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.TopRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.CenterLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.Center">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.CenterRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.BottomLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.BottomCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Aligns.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.RearrangeRules">
            <summary>
            This Property is work on FlexH type.If set off, responsible rule is resize.
            default value On. 
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RearrangeRules.On">
            <summary>
            Default.Resposible rule is Rearrage.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RearrangeRules.Off">
            <summary>
            Resposible rule is Resize.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.MarginAreaPolicy">
            <summary>
            Margin area apply to layout.
            Margin area is only apply to rootlayout. but if use this property, layout able to apply margin area.
            default value is Disable. 
            </summary>
            <code>
            layout.LayoutParam.MarginAreaPolicy = MarginAreaPolicy.EnableAll;
            </code>
            <version> 8.8.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MarginAreaPolicy.Disable">
            <summary>
            Default 
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MarginAreaPolicy.EnableAll">
            <summary>
            Left,Right side margin apply to Layout
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MarginAreaPolicy.EnableRight">
            <summary>
            Only right side margin apply to Layout
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MarginAreaPolicy.EnableLeft">
            <summary>
            Only left side margin apply to Layout
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Margin">
            <summary>
            The Margin of RootLayout.
            </summary>
            <code>
            RootLayout rootLayout = new RootLayout(Window.Instance.GetDefaultLayer()); 
            rootLayout.LayoutParam.Margin.LeftMargin = 84;
            rootLayout.LayoutParam.Margin.TopMargin = 8;
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Margin.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Margin.LeftMargin">
            <summary>
            This LeftMargin is base on "Pixel". 
            Usually that LeftMargin value is auto update by GridSystem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Margin.RightMargin">
            <summary>
            This RightMargin is base on "Pixel". 
            Usually that RightMargin value is auto update by GridSystem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Margin.TopMargin">
            <summary>
            This TopMargin is base on "Unit". 
            TopMargin value is not auto update by GridSystem. 
            If want apply to Rootlayout, User Must have to set.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Margin.BottomMargin">
            <summary>
            This BottomMargin is base on "Unit". 
            BottomMargin value is not auto update by GridSystem. 
            If want apply to BottomMargin, User Must have to set.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.NativeMargin">
            <summary>
            The margin for layout.
            The margin will be active in two cases.
            1. The left and right margin of the RootLayout;
            2. The child of the Frame layout.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.NativePadding">
            <summary>
            The padding of layout.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.NativePadding.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Spec.ChildCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Spec.ExpandWidthToUIArea">
            <summary>
            The property is only used for the layout which parent is rootlayout.
            For example, the width of the title bar in AppStore will fill the screen, but there is the margin area in the left and right side of the rootlayout.
            In this case, the margin should be disabled.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Spec.EnableRTL">
            <summary>
            The property for the layout arrange child for RTL.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Padding">
            <summary>
            The padding of layout.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Padding.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Padding.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Padding.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Padding.Top">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Padding.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Padding.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.FluxLayoutParam">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.FluxLayoutParam.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.FluxLayoutParam.#ctor(Tizen.NUI.FLUX.Component.LayoutTypes)">
            <summary>
            FluxLayoutParam Constructor with LayoutTypes type argument
            </summary>
            <param name="type">Layout Type</param>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.Align">
            <summary>
            The property is to align item in horizontal and vertical.
            There are 2 cases in layout:
            1. If the layout is Frame layout, the property belongs to the child of the Frame layout;
            2. Other layout, the property belongs to the layout.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.ItemGap">
            <summary>
            The property of the layout, mean the gap between items in the layout.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.RearrangeGap">
            <summary>
            The property of the layout(FlexH), mean the gap when rearranged child item, between items per row.
            Default Value is same to ItemGap.
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.Padding">
            <summary>
            The property of the layout.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.Rearrange">
            <summary>
            The property of the layout.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.MarginAreaPolicy">
            <summary>
            The property of the layout.
            if set Enable, item`s start position is changed to ( margin value , 0 ) from (0,0)       
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.Col">
            <summary>
            The property of Table Layout` column
            </summary>
            <deprecated> Deprecated since 9.9.0.  Please use TableLayoutInfo.</deprecated>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.Row">
            <summary>
            The property of Table Layout` row
            </summary>
            <deprecated> Deprecated since 9.9.0.  Please use TableLayoutInfo.</deprecated>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.EnableRTL">
            <summary>
            The property for the Layout enable arrange items for RTL
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.FluxLayoutParam.TableLayoutInfo">
            <summary>
            The Information of Table layout.
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.FluxLayoutParam.ItemCoodinate(Tizen.NUI.FLUX.FluxView,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The method is for item coodinate set in Table Layout
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.LayoutItemParam">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.LayoutItemParam.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.LayoutItemParam.#ctor(System.Int32,System.Int32,Tizen.NUI.FLUX.Component.OmissionRules,Tizen.NUI.FLUX.Component.ResizePolicyTypes,Tizen.NUI.FLUX.Component.ResizePolicyTypes)">
            <summary>
            Constructor to instantiate the LayoutItemParams class.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.LayoutItemParam.WidthResizePolicy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.LayoutItemParam.HeightResizePolicy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.LayoutItemParam.Omission">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.LayoutItemParam.Weight">
            <summary>
            The property of item in layout, default Weight is '1'.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.LayoutItemParam.Priority">
            <summary>
            The property of the item in layout, default is the min 
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.LayoutItemParam.ExpandWidthToUIArea">
            <summary>
            The property is only used for the item which parent is rootlayout. Default value is false. 
            For example, the title bar in AppStore should enlarge its width to fill the UIArea, it means the title bar will cover the margin area of the RootLayout.
            In this case, the margin should be disabled, the value should be false.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.LayoutItemParam.EnableGetHeightByWidth">
            <summary>
            The property that enable get item's height by its width with aspect ratio. 
            The specail spec for Banner.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.LayoutItemParam.TableLayoutItemInfo">
            <summary>
            The information of the item in Table layout.
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.RootLayoutParam">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayoutParam.#ctor">
            <summary>
            RootLayoutParam constructor
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.RootLayoutParam.#ctor(Tizen.NUI.FLUX.Component.LayoutTypes)">
            <summary>
            RootLayoutParam Constructor with LayoutTypes type argument
            </summary>
            <param name="type">Layout Type</param>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RootLayoutParam.Margin">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.TableLayoutInfo">
            <summary>
            The information of the Table layout.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.TableLayoutInfo.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.TableLayoutInfo.ColumnCount">
            <summary>
            The column count of the Table layout.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.TableLayoutInfo.RowCount">
            <summary>
            The row count of the Table layout.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.TableLayoutItemInfo">
            <summary>
            The information of the item in the Table layout.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.TableLayoutItemInfo.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.TableLayoutItemInfo.ColumnIndex">
            <summary>
            The column index of the item in Table layout.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.TableLayoutItemInfo.RowIndex">
            <summary>
            The row index of the item in Table layout.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.TableLayoutItemInfo.ColumnSpan">
            <summary>
            The column span of the item in Table layout.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.TableLayoutItemInfo.RowSpan">
            <summary>
            The row span of the item in Table layout.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.TableLayoutItemInfo.UpdateCellGeomery(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update Cell Geomety Information of the item in Table layout.
            </summary>
            <param name="columnIndex"> ColumnIndex information </param>
            <param name="rowIndex"> RowIndex information </param>
            <param name="columnSpan"> ColumnSpan information </param>
            <param name="rowSpan"> RowSpan information </param>
            <version> 10.10.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.StateController">
            <summary>
            This is StateController class
            <code>
            StateController stateController = new StateController();
            </code>
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateController.#ctor">
            <summary>
            Constructor StateController
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateController.AddUserStateList(System.String)">
            <summary>
            Add userStateName in List
            </summary>
            <code>
            stateController.AddUserStateList("userStateName");
            </code>
            <param name="userStateName">userStateName</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateController.UnsetAllUserStateList">
            <summary>
            If you want to change all userState to false, you call this function.
            <code>
            stateController.UnsetAllUserStateList();
            </code>
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateController.UnsetUserStateList(System.String)">
            <summary>
            Unset userStateName in List
            </summary>
            <param name="userStateName">userStateName</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateController.UpdateStateList(System.String,System.Boolean)">
            <summary>
            UpdateStateList about each state.
            StateList[NDSIndex] = 0(Normal),1(Selected) ,2(Disabled) / StateList[1] = 0, 1(Focused) /  StateList[2] = 0, 1(Checked)
            StateList[3~] = 0, 1(UserState)
            </summary>
            <code>
            stateController.UpdateStateList(userStateName, true);
            </code>
            <param name="stateName">stateName to update</param>
            <param name="flag">True/False</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateController.Clear">
            <summary>
            If you want to know currentState, you should call it.
            </summary>
            <code>
            stateController.CurrentState();
            </code>
            <returns>CurrentState</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.StateMachine">
            <summary>
            This is StateMachine class.
            You have to make it in preset.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.StateMachine.StateChangeAction">
            <summary>
            State change delegate
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.StateMachine.CurrentState">
            <summary>
            CurrentState
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.StateMachine.PreviousState">
            <summary>
            PreviouseState
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.StateMachine.Item(System.String)">
            <summary>
             Array StateProperty using indexer
            </summary>
            
            <example>
            <code>
             StateMachine stateMachine = new StateMachine();
             stateMachine[StateUtility.Normal] = new StateProperty(StateUtility.Normal);
             
            StateProperty normal = stateMachine[StateUtility.Normal];
            </code>
            </example>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.StateMachine.CurrentStateProperty">
            <summary>
            Get Current StateProperty class
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateMachine.PostStateAction">
            <summary>
            Action for post all state. There are 2 action parameter which means  previous and current. 
            All other property's action (AddStateAction)will be called before applying property value which assigned by state machine.
            But this action will be called after applying property. So, if user do something influenced by property value at action , please use it. 
            Please refer below example.
            </summary>
            <example> 
             internal void FocusChangedAction(string from, string to)
             {
                  bool isFocusedFrom = from.Contains(StateUtility.Focused);
                  bool isFocusedTo = to.Contains(StateUtility.Focused);
                  
                 if (isFocusedFrom == false &amp;&amp; isFocusedTo == true)
                 {
                     GainFocus();
                 }
                 else if (isFocusedFrom == true &amp;&amp; isFocusedTo == false)
                 {
                     LostFocus();
                 }
             }
             
             Component.State.PostStateAction += FocusChangedAction;
            
            </example>
            <version>8.8.1 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateMachine.#ctor">
            <summary>
            This is Constructor in StateMachine
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateMachine.AddStateProperty(Tizen.NUI.FLUX.Component.StateProperty)">
            <summary>
            AddStateProperty in StateMachine 
            You should add 12 State that UX defined.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateMachine.ChangeStatePropertyValue(System.String,System.String,System.Object)">
            <summary>
            If you want to change propertyValue , you enter stateName, propertyName, propertyValue
            </summary>
            <code>
            stateMachine.ChangeStatePropertyValue(stateName , propertyname, value);
            </code>
            <param name="stateName">StateName</param>
            <param name="propertyName">PropertyName</param>
            <param name="value">PropertyValue</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateMachine.AddStateAction(System.String,System.Action{System.String,System.String})">
            <summary>
            If you want to change property action, you can add Action by this API.
            </summary>
            <param name="stateName">StateName</param>
            <param name="action">Add action which will be invoked when component chagne to target state</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.StateProperty">
            <summary>
             State Property class to use state machine
            </summary>
            
            <example>
            <code>
             StateMachine stateMachine = new StateMachine();
             StateProperty normal = new StateProperty(StateUtility.Normal);
             normal["BackgroundColor"] = Color.Red;
             stateMachine[StateUtility.Normal] = normal;
            </code>
            </example>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.StateProperty.StateName">
            <summary>
             [Readonly] Get StateName
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateProperty.#ctor">
            <summary>
             Constructor of StateProperty
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateProperty.#ctor(System.String)">
            <summary>
             Constructor of StateProperty
            </summary>
            
            <example>
            <code>
             StateProperty normal = new StateProperty(StateUtility.Normal);
            </code>
            </example>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateProperty.#ctor(System.String,Tizen.NUI.FLUX.Component.StateProperty)">
            <summary>
             Constructor of StateProperty
            </summary>
            
            <example>
            <code>
             StateProperty normal = new StateProperty(StateUtility.Normal, property); // Copy property value
            </code>
            </example>
            
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.StateProperty.Item(System.String)">
            <summary>
             Property array using indexer. You can use  SetPropertyValue(string propertyName , object value) as same manner.
            </summary>
            
            <example>
            <code>
             StateProperty normal = new StateProperty(StateUtility.Normal);
             normal["BackgroundColor"] = Color.Red;
            </code>
            </example>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateProperty.SetPropertyValue(System.String,System.Object)">
            <summary>
             Set property value at StateProperty
            </summary>
            <param name="propertyName">Property name </param>
            <param name="value">Real value for each Property</param>
            <returns>True if the key event should be consumed</returns>
            <example>
            <code>
             StateProperty normal = new StateProperty(StateUtility.Normal);
             normal.SetPropertyValue("BackgroundColor", Color.Red );
            </code>
            </example>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateProperty.GetPropertyValue(System.String)">
            <summary>
             Get property value at StateProperty
            </summary>
            <param name="propertyName">Property name </param>
            <returns>Value of property as object</returns>
            <example>
            <code>
             StateProperty normal = new StateProperty(StateUtility.Normal);
             normal["BackgroundColor"] = Color.Red;
             Color color = normal.GetPropertyValue("BackgroundColor") as Color;
            </code>
            </example>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StateProperty.op_Addition(Tizen.NUI.FLUX.Component.StateProperty,Tizen.NUI.FLUX.Component.StateProperty)">
            <summary>
             StateProperty + operator overloading , Base property's value will be overwritten by addOperand if value is same. baseProp shouldn't be null
            </summary>
            <param name="baseProp">base operand property</param>
            <param name="overwriteProp"> overwrite operand property</param>
            <returns>merged value</returns>
            <version> 8.8.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.FluxAnimationPlayer.States">
            <summary>
            Enumeration for States of AnimationPlayer
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.FluxAnimationPlayer.States.Stopped">
            <summary>
            AnimationPlayer is in stopped state.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.FluxAnimationPlayer.States.Playing">
            <summary>
            AnimationPlayer is in playing state.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.FluxAnimationPlayer.States.Paused">
            <summary>
            AnimationPlayer is in paused state.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.FluxAnimationPlayer.EndActions">
            <summary>
            Enumeration for where to jump after stopping of AnimationPlayer
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.FluxAnimationPlayer.EndActions.Cancel">
            <summary>
            Target of AnimationPlayer will be in place when Stop() is called.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.FluxAnimationPlayer.EndActions.Discard">
            <summary>
            Target of AnimationPlayer will be located in the place where it started when Stop() is called.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.FluxAnimationPlayer.EndActions.StopFinal">
            <summary>
            Target of AnimationPlayer will be located in the place where it would finish when Stop() is called.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.MotionTypes">
            <summary>
            Enum of Motion Type defined by UX Principle
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MotionSpec.property">
            <summary>View object for animation</summary> 
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MotionSpec.from">
            <summary>View object for animation</summary> 
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MotionSpec.to">
            <summary>View object for animation</summary> 
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MotionSpec.startTime">
            <summary>Start time of animation</summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MotionSpec.endTime">
            <summary>End time of animation</summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.MotionSpec.curve">
            <summary>Curve of animation</summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.ColorPreset">
            <summary>
            This is ColorPreset class.
            </summary>
            <code>
            ColorPreset preset = ColorPresetManager.GetColorPreset(themeTextColorPreset);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ColorPreset.#ctor">
            <summary>
             Construct of ColorPreset
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ColorPreset.#ctor(System.String)">
            <summary>
             Construct of ColorPreset
            </summary>
            <param name="jsonFilePath">colorjson file path</param>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ColorPreset.Clone">
            <summary>
            Clone the ColorPreset object, each derived class need to override this method. 
            </summary>
            <returns>CplorPreset object</returns>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ColorPreset.ColorPresetName">
            <summary>
            When you add colorjson file, you can get ColorPresetName. 
            If you don't add jsonfile in construct, you get null.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ColorPreset.ColorPresetSet">
            <summary>
            Set Colorpreset value
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.ColorPresetManager">
            <summary>
            This is ColorPresetManager class.
            </summary>
            <code>
            ColorPresetManager.RegisterColorThemePreSet("CP_Info1100", new CPInfo1100());
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ColorPresetManager.GetColorPreset(System.String)">
            <summary>
            Get Colorpreset according to colorpreset Name
            </summary>
            <param name="colorPreset">ColorPreset Name (ex.CP_Info1100)</param>
            <returns>ColorPreset object</returns>
            <exception cref="T:System.ArgumentException">You enter wrong ColorPreSetName, ColorPreset start CP_</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ColorPresetManager.RegisterColorPreset(System.String,Tizen.NUI.FLUX.Component.ColorPreset)">
            <summary>
            Register ColorPreset.
            </summary>
            <param name="userPresetName">Your ColorPreset name</param>
            <param name="colorPreset">Add ColorPreset object</param>
            <vesion> 9.9.0 </vesion>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ColorPresetManager.ChangeColorPreset(System.String,Tizen.NUI.FLUX.Component.ColorPreset)">
            <summary>
            Change ColorPreset.
            </summary>
            <param name="userPresetName">Your ColorPreset name</param>
            <param name="colorPreset">Add ColorPreset object</param>
            <vesion> 9.9.0 </vesion>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ColorPresetManager.RegisterColorPreSet(System.String,Tizen.NUI.FLUX.Component.ColorPreset)">
            <summary>
            Register ColorPreset.
            </summary>
            <param name="userPresetName">Your ColorPreset name</param>
            <param name="colorPreset">Add ColorPreset object</param>
            <deprecated> Deprecated since 9.9.0.  Please use  RegisterColorPreset</deprecated>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ColorPresetManager.UpdateColorPresetTable(System.String)">
            <summary>
             User can update color preset table using json format file
            </summary>
            <param name="jsonFilePath"> It's json file path to update color preset</param>
            <version> 10.10.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.ColorPresetTable">
            <summary>
            ColorPresetSet class
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ColorPresetTable.Item(System.String)">
            <summary>
            ColorPresetSet class
            </summary>
            <param name="state">State Information</param>
            <returns>ColorPreset according to state</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ColorPresetTable.Clone">
            <summary>
            Clone the ColorPresetSet object, each derived class need to override this method. 
            </summary>
            <returns>ColorPreset according to state</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.PresetBase">
            <summary>
            Base class of Preset
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.PresetBase.ThemeBackgroundColorPreset">
            <summary>
            Set ColorPreset in backgroundColor of Preset. When you set this value,it is changed automatically according to state. 
            The string starts "CP_".
            <example>
            preset.ThemeBackgroundColorPreset = "CP_Info1100";
            </example>
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.PresetBase.ThemeBackgroundColorChip">
            <summary>
            Set ColorChip in backgroundColor of Preset. It is only set single Color so that will be same color for every state.
            The string starts "CC_"
            </summary>
            <example>
            preset.ThemeBackgroundColorChip = "CC_Basic1100";
            </example>
            <version> 8.8.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.PresetBase.MinimumUnitSize">
            <summary>
            Min Unit Size.
            <example>
            preset.MinimumUnitSize = new UnitSize(90, 10);
            </example>
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.PresetBase.UnitSize">
            <summary>
            Default Unit Size.
            <example>
            preset.UnitSize = new UnitSize(90, 10);
            </example>
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.PresetBase.MaximumUnitSize">
            <summary>
            Max Unit Size
            <example>
            preset.MaximumUnitSize = new UnitSize(90, 10);
            </example>
            </summary>
            <version> 8.8.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.PresetBase.#ctor">
            <summary>
            Constructor of PresetBase
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.PresetBase.AddToElementTree(System.String,Tizen.NUI.FLUX.Component.ComponentBase,System.String)">
            <summary>
             Add component or layout to element tree
            </summary>
            <param name="treeIndex">Index of element tree.</param>
            <param name="element">Instance of element</param>
            <param name="elementName">If elementName isn't given, treeIndex will be elementName and it will be used for "KEY" of GetElement of Component class</param>
            <version> 8.8.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PresetBase.elements">
            <summary>
            Collection of element composing Component
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PresetBase.ElementName">
            <summary>
            The dictionary of the name of the element which user could modify.
            For example, elements like text, image or componentArea could be modified by user, user can get modify these elements by the ElementName.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.PresetBase.CreateLayout(System.String,Tizen.NUI.FLUX.Component.LayoutTypes)">
            <summary>
            Create a Layout.
            </summary>
            <param name="name">The Layout's name.</param>
            <param name="type">The type of the Layout</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.PresetBase.CreateComponentArea(System.String)">
            <summary>
            Create a ComponentArea.
            </summary>
            <param name="name">The ComponentArea's name.</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.PresetManager">
            <summary>
             Management of all Preset
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.PresetManager.RegisterPreset(System.String,System.Type)">
            <summary>
             Register Custom Preset with class type
            </summary>
            <exception cref="T:System.InvalidOperationException">Throw when presetClassType is null or presetClassType is not a PresetBase </exception>
            <param name="name">Custom Type Name, Cannot register same name which already be registered</param>
            <param name="presetClassType">Class type of Custom Preset. Using "typeof()"</param>
            <code>
            public class C_TextItem_WhiteSingleline01_Custom001 : C_TextItem_WhiteSingleline01
            {
                public C_TextItem_WhiteSingleline01_Custom001()
                {
                    // Change Custom Property
                }
             }
             
            // Register Custom Style with type of Class
            StyleSet.RegisterStyle("C_TextItem_WhiteSingleline01_Custom001", typeof( C_TextItem_WhiteSingleline01_Custom001 ) );
            
            // Create component using registered custom type
            TextItem textItem = new TextItem("C_TextItem_WhiteSingleline01_Custom001");
            
            </code>
            <returns>return false if name is duplicated</returns>
            <version> 6.0.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Template">
            <summary>
            This is Template Class 
            <code>
             template = new Template(Window.Instance.GetDefaultLayer(), "BigImage1");
             bodycomponent = new TextBox
             {
                Name = "bodyComp",
                Text = "body",
                BackgroundColor = Color.Yellow,
              };
              template.AddItim("BODY", bodycomponent);
            </code>
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.#ctor(Tizen.NUI.Layer,System.String)">
            <summary>
            Constructor to instantiate the Template class.
            When you use this API, your UI is added in default Window.
            </summary>
            <param name="layer">Enter Window Layer(ex.Window.Instance.GetDefaultLayer() )</param>
            <param name="templateType">Template Name</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.#ctor(Tizen.NUI.Window,Tizen.NUI.Layer,System.String)">
            <summary>
            Constructor to instantiate the Template class.
            If you want to your UI in subWindow,  you should add window Instance.
            </summary>
            <version>9.9.0</version>
            <param name="window">If you want to it in subWindow, you should add window Instance </param>
            <param name="layer">Enter Window Layer(ex.subwindow.GetDefaultLayer() )</param>
            <param name="templateType">Template Name</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.Update">
            <summary>
            You can update all areas at once.
            If you don't call it, your UI is broken.
            Recommand : You add items in all areas and call this function.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.UpdateLayout">
            <summary>
            You can update all areas at once.
            </summary>
            supporting xaml
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.Update(System.String)">
            <summary>
            After you make it in all area, you can call this function each area.
            It is updated only for the area you called.
            Recommand : You add and remove items in one area and call this function
            </summary>
            <param name="area">template Area name</param>
            <code> 
            template.Update("BODY")
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.Dispose">
            <summary>
            Cleaning up managed and unmanaged resources
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.DestroyElements">
            <summary>
            Cleaning up managed and unmanaged resources
            </summary>
            supporting xaml
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.ChangeLayoutTypes(System.String,Tizen.NUI.FLUX.Component.LayoutTypes)">
            <summary>
            Change layouttype about AreaLayout.
            You should call this function at initial time, before the template.Update function is called.
            </summary>
            <code>
            template.ChangeLayoutTypes("BODY", LayoutTypes.FlexH);
            </code>
            <param name="name">Template Area name </param>
            <param name="layoutTypes">Change layout type</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.AddItem(System.String,Tizen.NUI.FLUX.Component.ComponentBase)">
            <summary>
            Add Component in Template Area.
            If you add item wrong area, your UI is abnormal.
            </summary>
            <code>
            template.AddItem("BODY", bodyComponent);
            </code>
            <param name="name">Template Area name </param>
            <param name="component">Add Component</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.RemoveItem(System.String,Tizen.NUI.FLUX.Component.ComponentBase)">
            <summary>
            Remove Component in Template Area.
            This api remove items from template. We don't care lifecycle component that you set.
            </summary>
            <code>
            template.RemoveItem("BODY", bodyComponent);
            </code>
            <param name="name">Template Area name </param>
            <param name="component">remove Component</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.GetAreaLayout(System.String)">
            <summary>
            Get the element(Layout) in area of template.
            </summary>
            <param name="eName">The area's name.</param>
            <returns>Element object of specific name</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.Show">
            <summary>
            If you want to show this template, you call it. Default is visible.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.Template.Hide">
            <summary>
            If you want not to show this template, you call it. Default is visible.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.BackgroundEnabled">
            <summary>
            Enable / Disable default background image of principle
            This default vaule is true.
            If you want to not use it, set the value is false.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.ThemeBackgroundColorChip">
            <summary>
            You can change Background Color to use ColorChip.
            </summary>
            <code>
            template.ThemeBackgroundColorChip = "CC_BG220";
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.HatAreaContent">
            <summary>
            Add Component in Hat Area.
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.TopAreaContent">
            <summary>
            Add Component in Top Area.
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.NeckAreaContent">
            <summary>
            Add Component in Neck Area.
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.SkinAreaContent">
            <summary>
            Add Component in SKIN Area.
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.BodyAreaContent">
            <summary>
            Add Component in Body Area.
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.FootAreaContent">
            <summary>
            Add Component in Foot Area.
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.ButtonsAreaContent">
            <summary>
            Add Component in Buttons Area.
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.HatPropertyMap">
            <summary>
            Set PropertyMap for Hat
            </summary>
            supporting xaml
            <version> 10.10.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.TopPropertyMap">
            <summary>
            Set PropertyMap for Top
            </summary>
            supporting xaml
            <version> 10.10.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.BodyPropertyMap">
            <summary>
            Set PropertyMap for Body
            </summary>
            supporting xaml
            <version> 10.10.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.NeckPropertyMap">
            <summary>
            Set PropertyMap for Neck
            </summary>
            supporting xaml
            <version> 10.10.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.SkinPropertyMap">
            <summary>
            Set PropertyMap for Skin
            </summary>
            supporting xaml
            <version> 10.10.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.ButtonsPropertyMap">
            <summary>
            Set PropertyMap for Buttons
            </summary>
            supporting xaml
            <version> 10.10.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.FootPropertyMap">
            <summary>
            Set PropertyMap for Foot
            </summary>
            supporting xaml
            <version> 10.10.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.Template.RootLayoutItemGap">
            <summary>
            Set RootLayout ItemGap.
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.TemplateManager">
            <summary>
             Management of all Preset
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.TemplateManager.RegisterPreset(System.String,System.Type)">
            <summary>
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.TemplatePresetBase">
            <summary>
            This is TemplatePresetBase Class
            <code>
            TemplatePresetBase retPreset = null;
            </code>
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.TemplatePresetBase.#ctor">
            <summary>
            Constructor to instantiate the TemplatePresetBase class.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.PointingBehaviorMode">
            <summary>
            Component touch mode. User can choose their component as Pointing action. (Touch / Mouse)
            Default value is "PressInFocus"
            </summary>
            <code>
            component.PointingBehavior = PointingBehaviorMode.ExecuteIsFocus; 
            </code>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PointingBehaviorMode.PressIsFocus">
            <summary>
            Touch / Mouse Click event will set focus to target component and excute.
            Focus comes up when pressing and then Execute.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PointingBehaviorMode.ExecuteIsFocus">
            <summary>
            Touch / Mouse Click event will set focus to target component.
            If components or patterns don't have focus, the focus moved to it. / If they have, Execute.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.Constant">
            <summary>
            Constant class
            </summary>
            <code>
            Constant.CURVE_ELASTIC_V1
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_ELASTIC_V1">
            <summary>
            CURVE_ELASTIC_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_ELASTIC_V2">
            <summary>
            CURVE_ELASTIC_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_OUT_V1">
            <summary>
            CURVE_OUT_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_OUT_V2">
            <summary>
            CURVE_OUT_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_BASIC_V1">
            <summary>
            CURVE_BASIC_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_BASIC_V2">
            <summary>
            CURVE_BASIC_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_APPEARS_V1">
            <summary>
            CURVE_APPEARS_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_APPEARS_V2">
            <summary>
            CURVE_APPEARS_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_BREATH_IN_V1">
            <summary>
            CURVE_BREATH_IN_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_BREATH_IN_V2">
            <summary>
            CURVE_BREATH_IN_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_BREATH_OUT_V1">
            <summary>
            CURVE_BREATH_OUT_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_BREATH_OUT_V2">
            <summary>
            CURVE_BREATH_OUT_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_SININOUT_V1">
            <summary>
            CURVE_SININOUT_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_SININOUT_V2">
            <summary>
            CURVE_SININOUT_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_AIRY_V1">
            <summary>
            CURVE_AIRY_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_AIRY_V2">
            <summary>
            CURVE_AIRY_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_EASEINOUT_V1">
            <summary>
            CURVE_EASEINOUT_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_EASEINOUT_V2">
            <summary>
            CURVE_EASEINOUT_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_APPEAR_V1">
            <summary>
            CURVE_APPEAR_V1 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.CURVE_APPEAR_V2">
            <summary>
            CURVE_APPEAR_V2 parameter for animation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T144">
            <summary>
            Define font size by UX, 144
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T120">
            <summary>
            Define font size by UX, 120
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T72">
            <summary>
            Define font size by UX, 72
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T68">
            <summary>
            Font size is 68
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T64">
            <summary>
            Font size is 64
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T60">
            <summary>
            Font size is 60
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T56">
            <summary>
            Font size is 56
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T52">
            <summary>
            Font size is 52
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T48">
            <summary>
            Font size is 48
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T44">
            <summary>
            Font size is 44
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T42">
            <summary>
            Font size is 42
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T40">
            <summary>
            Font size is 40
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T36">
            <summary>
            Font size is 36
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T32">
            <summary>
            Font size is 32
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T28">
            <summary>
            Font size is 28
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T24">
            <summary>
            Font size is 24
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T20">
            <summary>
            Font size is 20
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T16">
            <summary>
            Font size is 16
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.T12">
            <summary>
            Font size is 12. This is only touch based product.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.OutStrokeWidth">
            <summary>
            OutStrokeWidth is 0
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.Hover">
            <summary> Input Event type Hover </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.Touch">
            <summary> Input Event type Touch</summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.Tap">
            <summary> Input Event type Tap </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.TouchLongPress">
            <summary> Input Event type TouchLongPress </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.EventAll">
            <summary> All Input Event type </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.ItemShadow">
            <summary> Tab PropertyEnabler type: ItemShadow </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.UIPlateRect">
            <summary> Plate type - Rect </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.UIPlateRoundRect">
            <summary> Plate type - RoundRect </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.Constant.UIPlateRound">
            <summary> Plate type - Round </summary>
            <version> 9.9.0 </version>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tizen.NUI.FLUX.Component.Enabler`1" -->
        <member name="P:Tizen.NUI.FLUX.Component.Enabler`1.Item(`0)">
            <summary>
            Indexer for user usability
            </summary>
            <code>
            
            enabler["Touch"] = true; // In this case, EnableTouch will be called. 
            
            if( enabler["Touch"] == true )
            {
                    // do something
             } 
            
            </code>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tizen.NUI.FLUX.Component.Enabler`1.RegisterKey(`0,System.Action,System.Action,System.Boolean)" -->
        <member name="M:Tizen.NUI.FLUX.Component.Enabler`1.Clear">
            <summary>
            Clear all action and invoker in enabler
            </summary>
            <code>
            
            enabler["Touch"] = true; // In this case, EnableTouch will be called. 
            
            if( enabler["Touch"] == true )
            {
                    // do something
             } 
             
            enabler.Clear(); 
            
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.AudioFeedback">
            <summary>
            AudioFeedback Class. This class has the methods the Audio Feedback.
            </summary>
            <code>
            AudioFeedback.Instance.Play(AudioFeedback.Pattern.MoveNavigation);
            AudioFeedback.Instance.Play(AudioFeedback.Pattern.Select);
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.AudioFeedback.Pattern">
            <summary>
            Enumerations of the system pre-defined patterns for feedback interface
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.AudioFeedback.Pattern.MoveNavigation">
            <summary>
            feedback pattern when navigation moves
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.AudioFeedback.Pattern.Select">
            <summary>
            feedback pattern when select positive action
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.AudioFeedback.Instance">
            <summary>
            Instance of AudioFeedback.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.AudioFeedback.Play(Tizen.NUI.FLUX.Component.AudioFeedback.Pattern)">
            <summary>
            Plays various types of reactions that are pre-defined
            This functon can be used to react to pre-defined actions
            It play various types of system pre-defined media or vibration patterns
            </summary>
            <param name="pattern">The pre-defined pattern</param>
            <returns>0 on success, otherwise a negative error value</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.AudioFeedback.Stop">
            <summary>
            Stop various types of reactions
            This functon can be used to stop react to pre-defined actions
            It stops system pre-defined vibration patterns
            </summary>
            <returns>0 on success, otherwise a negative error value</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.AudioFeedback.Dispose">
            <summary>
            Dispose AudioFeedback.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.GestureDetector">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.PropertyUtility">
            <summary>
             Utility class for State Property
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.Scale">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.ScaleX">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.ScaleY">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.Position">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.PositionX">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.PositionY">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.PositionZ">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.Size2D">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.SizeWidth">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.SizeHieght">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.Opacity">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.PropertyUtility.TextColor">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.RepeatKeyManager">
            <summary>
            This is RepeatKeyManager class.
            You can get the event of repeat key start / end 
            </summary>
            <code>
            RepeatKeyManager.Instance.RepeatKeyEvent += RepeatKeyEvent;
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.RepeatKeyManager.EventType">
            <summary>
            the event type of repeat key state
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RepeatKeyManager.EventType.LongPressStart">
            <summary>
            LongPress start.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.RepeatKeyManager.EventType.LongPressEnd">
            <summary>
            LongPress end.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.RepeatKeyManager.RepeatKeyEventArgs">
            <summary>
            Repeat key event arguments
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RepeatKeyManager.RepeatKeyEventArgs.EventType">
            <summary>
            the event type of repeat key state.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RepeatKeyManager.Instance">
            <summary>
            RepeatKeyManager instance (read-only)
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.Component.RepeatKeyManager.RepeatKeyEvent">
            <summary>
            LongPress event args at event call back, user can get information
            </summary>
            <code>
            private void RepeatKeyEvent(object sender, RepeatKeyManager.RepeatKeyEventArgs e)
            {
                if (e.EventType == RepeatKeyManager.RepeatKeyEventArgs.LongPressStart)
                {
                }
            }
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RepeatKeyManager.LongPressed">
            <summary>
            Retrieve if current is longpress state
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RepeatKeyManager.KeyPressedName">
            <summary>
            KeyPressedName when long pressed start.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RepeatKeyManager.Delay">
            <summary>
            this is the delay time to change repeat key's start time (ms)
            Default is 350ms. This is defined by UX Principle D-Pad Interaction.
            When accessibility's slow focus is on, then this value will be ignored.
            </summary>
            <exception cref="T:System.ArgumentException"> Delay value should be larger than 0 </exception> 
            <version> 9.9.1 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.RepeatKeyManager.Interval">
            <summary>
            this is the interval time to generate repeat key (ms)
            Default is 70ms. This is defined by UX Principle D-Pad Interaction.
            When accessibility's slow focus is on, then this value will be ignored.
            </summary>
            <exception cref="T:System.ArgumentException"> Interval value should be larger than 0 </exception> 
            <version> 9.9.1 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.StateUtility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.StateAll">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.Normal">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.Disabled">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.Selected">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.Basic">
            <summary> Provide for user convenient . Basic include Normal / Disabled / Selected state</summary>
            <version>8.8.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.Focused">
            <summary> Provide for user convenient </summary>
            <version>8.8.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.Checked">
            <summary> Provide for user convenient </summary>
            <version>8.8.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.LongPressed">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.Pressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.NormalFocused">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.DisabledFocused">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.SelectedFocused">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.NormalPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.DisabledPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.SelectedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.NormalFocusedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.DisabledFocusedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.SelectedFocusedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.NormalChecked">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.DisabledChecked">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.SelectedChecked">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.NormalCheckedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.DisabledCheckedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.SelectedCheckedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.NormalFocusedChecked">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.DisabledFocusedChecked">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.SelectedFocusedChecked">
            <summary> Provide for user convenient </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.NormalFocusedCheckedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.DisabledFocusedCheckedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StateUtility.SelectedFocusedCheckedPressed">
            <summary> Provide for user convenient </summary>
            <version>9.9.0</version>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.ThemeColorType">
            <summary>
            This is line ColorType of ThemeColor
            </summary>
            supporting xaml
            <version> 10.10.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ThemeColorType.ColorChip">
            <summary>
            ColorChip of ThemeColor
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.ThemeColorType.ColorPreset">
            <summary>
            ColorPreset of ThemeColor
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tizen.NUI.FLUX.Component.KeyValueOfThemeColor" -->
        <member name="P:Tizen.NUI.FLUX.Component.KeyValueOfThemeColor.PropertyName">
            <summary>
            PropertyName of component
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.KeyValueOfThemeColor.ColorValue">
            <summary>
            ColorValue, start with "CC_" or "CP_"
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.KeyValueOfThemeColor.ColorType">
            <summary>
            ColorType, ColorChip or ColorPreset
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.ThemeColor">
            <summary>
            This is class of ThemeColor
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ThemeColor.#ctor">
            <summary>
            Constructor for ThemeColor
            </summary>
            supporting xaml
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.ThemeColor.Add(Tizen.NUI.FLUX.Component.KeyValueOfThemeColor)">
            <summary>
            Add function for ThemeColor
            </summary>
            supporting xaml
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ThemeColor.Item(System.String)">
            <summary>
            Indexer for user usability
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ThemeColor.ColorChip">
            <summary>
            Color Chip value which starts with "CC_"
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.ThemeColor.ColorPreset">
            <summary>
            Color Preset value which starts with "CP_"
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.TVKeyExtension">
            <summary>
            class provides extension methods for NUI Key
            </summary>
            <code>
            key.IsWheelEvent();
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.TVKeyExtension.IsWheelEvent(Tizen.NUI.Key)">
            <summary>
            Checks Whether is Wheel Event
            </summary>
            <param name="key">Key value</param>
            <returns>true if is Wheel Event, otherwise false</returns>
            <code>
            key.IsWheelEvent();
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.TVKeyExtension.KeyPressedNameInVerticalDirection(Tizen.NUI.Key)">
            <summary>
            Converts Key Pressed Name
            </summary>
            <param name="key">Key value</param>
            <returns>Converted KeyPressedName</returns>
            <code>
            string keyPressedName = key.KeyPressedNameInVerticalDirection();
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.StatePropertyDefinition">
            <summary>
            Defines state-specific property that apply to Component.
            This is only intended for use by the XAML Application.
            </summary>
            <code>
            Refer to XAML samples
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.StatePropertyDefinition.StateName">
            <summary>
            name of state
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.StatePropertyDefinition.PropertyName">
            <summary>
            name of property
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Component.StatePropertyDefinition.PropertyValue">
            <summary>
            value of the property
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Component.StatePropertyDefinitionCollection">
            <summary>
            Class for calling UpdateStateProperty() of Component through ICollection interface.
            It does not store any item.
            This class is only intended for use by the XAML Application.
            </summary>
            <code>
            Refer to XAML samples
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StatePropertyDefinitionCollection.#ctor(Tizen.NUI.FLUX.Component.Component)">
            <summary>
            constructor of StatePropertyDefinitionCollection
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.Component.StatePropertyDefinitionCollection.InsertItem(System.Int32,Tizen.NUI.FLUX.Component.StatePropertyDefinition)">
            <summary>
            Occurs when an item is going to be added or inserted.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="F:Tizen.NUI.FLUX.Component.StatePropertyDefinitionCollection.owner">
            <summary>
            owner Component
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Cursor">
            <summary>
            This is Cursor which user want to use enable 
            </summary>
            <code>
            cursor = Window.Instance.GetCursor();
            cursor.Enable(true);
            cursor.Position = new Position2D(960, 540);
            cursor.Shape = Cursor.Shapes.Default;
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.Cursor.Shapes">
            <summary>
            Enumeration for shape of cursor.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Cursor.Shapes.Default">
            <summary> Default shape of cursor /// </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Cursor.Shapes.PressAndHold">
            <summary> PressAndHold shape of cursor /// </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Cursor.Shapes.InputField">
            <summary> Inputfield shape of cursor /// </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Cursor.Shapes.Transparent">
            <summary> Transparent shape of cursor /// </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Cursor.Shape">
            <summary>
            Set or get shape of cursor (Default, PressAndHold, InputField, Transparent)
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Cursor.Position">
            <summary>
            Set or get position of Cursor
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Cursor.Enabled">
            <summary>
            Get enabled state of Cursor
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Cursor.StateAlwaysOn">
            <summary>
            Get enabled always state of Cursor
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Cursor.SetCustomType(System.String,System.String)">
            <summary>
            This function is used to load theme and shape for custom cursor.
            </summary>
            <param name="theme"> Set custom theme name of cursor </param>
            <param name="shape"> Set custom shape name of cursor from this theme</param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to set custom theme of cursor
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.Cursor.Enable(System.Boolean)">
            <summary>
            Set enable state of cursor.
            </summary>
            <param name="alwaysOn"> User want to show cursor always(true) or not(false = default)</param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to enable cursor
            </exception>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to show cursor always
            </exception>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to hide cursor always
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.Cursor.Disable">
            <summary>
            Set disable state of cursor.
            </summary>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to disable cursor
            </exception>
        </member>
        <member name="T:Tizen.NUI.FLUX.UnitPosition">
            <summary>
            Unit of UI class
            </summary>
            <code>
            View view = new View();
            view.SetFluxSize(new Unit(10, 10));
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor to instantiate the UnitSize class.
            </summary>
            <param name="x">The PositionX of position in flux</param>
            <param name="y">The PositionY of position in flux</param>
        </member>
        <member name="P:Tizen.NUI.FLUX.UnitPosition.X">
            <summary>
            The PositionX of position in flux
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.UnitPosition.Y">
            <summary>
            The PositionY of position in flux
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.op_Addition(Tizen.NUI.FLUX.UnitPosition,Tizen.NUI.FLUX.UnitPosition)">
            <summary>
            operator for add
            </summary>
            <param name="arg1">UnitPosition to add.</param>
            <param name="arg2">UnitPosition to add.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.op_Subtraction(Tizen.NUI.FLUX.UnitPosition,Tizen.NUI.FLUX.UnitPosition)">
            <summary>
            operator for subtract
            </summary>
            <param name="arg1">UnitPosition to subtract.</param>
            <param name="arg2">UnitPosition to subtract.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.op_Multiply(Tizen.NUI.FLUX.UnitPosition,Tizen.NUI.FLUX.UnitPosition)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">UnitPosition to multiply.</param>
            <param name="arg2">UnitPosition to multiply.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.op_Multiply(Tizen.NUI.FLUX.UnitPosition,System.Int32)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">UnitPosition to multiply.</param>
            <param name="arg2">The int value to scale the UnitPosition.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.op_Division(Tizen.NUI.FLUX.UnitPosition,Tizen.NUI.FLUX.UnitPosition)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">UnitPosition to divide.</param>
            <param name="arg2">UnitPosition to divide.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.op_Division(Tizen.NUI.FLUX.UnitPosition,System.Int32)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">UnitPosition to divide.</param>
            <param name="arg2">The int value to scale the UnitPosition by.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.op_Equality(Tizen.NUI.FLUX.UnitPosition,Tizen.NUI.FLUX.UnitPosition)">
            <summary>
            The Equality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the UnitPositions are exactly the same. </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.op_Inequality(Tizen.NUI.FLUX.UnitPosition,Tizen.NUI.FLUX.UnitPosition)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the UnitPositions are not identical.</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if UnitPositions are exactly same.</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPosition.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.UnitPositionTypeConverter">
            <summary>
            class for converting unit position in XMAL
            </summary>
            <code>
            UnitPositionTypeConverter converter = new UnitPositionTypeConverter();
            string value = "100,100";
            UnitPosition position = (UnitPosition)converter.ConvertFromInvariantString(value);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitPositionTypeConverter.ConvertFromInvariantString(System.String)">
            <summary>
            class for converting unit position in XMAL
            </summary>
            <param name="value">UnitPosition</param>
            <returns> UnitPosition if value passed is valid parameter.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when string value is null.</exception>
        </member>
        <member name="T:Tizen.NUI.FLUX.UnitSize">
            <summary>
            Unit of UI class
            </summary>
            <code>
            FluxView view = new FluxView();
            view.UnitSize = new UnitSize(100, 100);
            view.UnitPosition = new UnitPosition(10, 10);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor to instantiate the UnitSize class.
            </summary>
            <param name="width">The width of size in flux</param>
            <param name="height">The height of size in flux</param>
        </member>
        <member name="P:Tizen.NUI.FLUX.UnitSize.Width">
            <summary>
            The width of size in flux
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.UnitSize.Height">
            <summary>
            The height of size in flux
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.op_Addition(Tizen.NUI.FLUX.UnitSize,Tizen.NUI.FLUX.UnitSize)">
            <summary>
            operator for add
            </summary>
            <param name="arg1">UnitSize to add.</param>
            <param name="arg2">UnitSize to add.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.op_Subtraction(Tizen.NUI.FLUX.UnitSize,Tizen.NUI.FLUX.UnitSize)">
            <summary>
            operator for subtract
            </summary>
            <param name="arg1">UnitSize to subtract.</param>
            <param name="arg2">UnitSize to subtract.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.op_Multiply(Tizen.NUI.FLUX.UnitSize,Tizen.NUI.FLUX.UnitSize)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">UnitSize to multiply.</param>
            <param name="arg2">UnitSize to multiply.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.op_Multiply(Tizen.NUI.FLUX.UnitSize,System.Int32)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">UnitSize to multiply.</param>
            <param name="arg2">The int value to scale the UnitSize.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.op_Division(Tizen.NUI.FLUX.UnitSize,Tizen.NUI.FLUX.UnitSize)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">UnitSize to divide.</param>
            <param name="arg2">UnitSize to divide.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.op_Division(Tizen.NUI.FLUX.UnitSize,System.Int32)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">UnitSize to divide.</param>
            <param name="arg2">The int value to scale the UnitSize by.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.op_Equality(Tizen.NUI.FLUX.UnitSize,Tizen.NUI.FLUX.UnitSize)">
            <summary>
            The Equality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the UniSizes are exactly the same. </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.op_Inequality(Tizen.NUI.FLUX.UnitSize,Tizen.NUI.FLUX.UnitSize)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the UnitSizes are not identical.</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if UnitSizes are exactly same.</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSize.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.UnitSizeTypeConverter">
            <summary>
            class for converting unit size in XMAL
            </summary>
            <code>
            UnitSizeTypeConverter converter = new UnitSizeTypeConverter();    
            string value = "100,100";
            converter.ConvertFromInvariantString(value);
            UnitSize size = (UnitSize)converter.ConvertFromInvariantString(value);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.UnitSizeTypeConverter.ConvertFromInvariantString(System.String)">
            <summary>
            class for converting unit size in XMAL
            </summary>
            <param name="value">UnitSize</param>
            <returns> UnitSize if value passed is valid parameter.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when string value is null.</exception>
        </member>
        <member name="T:Tizen.NUI.FLUX.FlipType">
            <summary>
            Enumeration for Flip type supported
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FlipType.None">
            <summary> Default </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FlipType.Vertical">
            <summary> Vertical type </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FlipType.Horizontal">
            <summary> Horizontal type </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Interpolation">
            <summary>
            Enumeration for Image Scaling Interpolation type
            </summary>
            <version> 6.6.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.Interpolation.Nearest">
            <summary>
            Nearest neighbor sampling.
            This is the fastest and lowest quality mode.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Interpolation.Tiles">
            <summary>
            Resembles nearest neighbor for enlargement, and bilinear for reduction.
            Each pixel is rendered as a tiny parallelogram of solid color, 
            the edges of which are implemented with antialiasing.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Interpolation.BiLinear">
            <summary>
            Best quality/speed balance. Use this mode by default.
            For enlargement, it is equivalent to point-sampling the ideal bilinear-interpolated image. 
            For reduction, it is equivalent to laying down small tiles and integrating over the coverage area.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Interpolation.Hyper">
            <summary>
            This is slowest but highest quality mode.
            It is derived from the hyperbolic filters in Wolberg's "Digital Image Warping", 
            and is formally defined as the hyperbolic-filter sampling the ideal hyperbolic-filter
            interpolated image (the filter is designed to be idempotent for 1:1 pixel mapping).
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.KeyCombinations">
            <summary>
            Enumeration for combination key to special case. 
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute182Power">
            <summary> Entry factory (ATSC) </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.InfoMenuMutePower">
            <summary> Entry factory (DVB,PAL)</summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MuteEnterMuteEnter">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute948Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute369Exit">
            <summary> Change RS-232C Option </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute258Exit">
            <summary> Change option of Watch Dog : "Off" </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.InfoFactory">
            <summary> Launch factory application </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.SourceExitPower">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute186Exit">
            <summary> Wallmount Test </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute782Exit">
            <summary> Network test </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute783Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute737Enter">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute437Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute119Enter">
            <summary> Launch hotel factory application </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute567Exit">
            <summary> Add Korean language in menu </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute147Mute">
            <summary> Print main chip pattern </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute369Mute">
            <summary> Print T-Con chip pattern </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.InfoMute">
            <summary> Next operation exit after the service reset.</summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute227Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.InfoSource">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MuteRSS">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute247Exit">
            <summary> CI Plus Key write </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute207Exit">
            <summary> CI Plus Key write (Product Key write) </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute209Exit">
            <summary> CI Plus Key write (Development Key write) </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute0Mute0">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute564Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute184Exit">
            <summary> CEC TX/RX test(Not supported(using 13's))  </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FF287RW">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute824Power">
            <summary> Password Reset </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MuteVolUpReturnVolDownReturnVolUpReturn">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute579Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FF289RW">
            <summary> Not supported(using 13's) </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FF2891">
            <summary> Not supported(using 13's) </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute569Exit">
            <summary> Camera/Mic Test </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.InfoMenuMuteMenuExit">
            <summary> Update SERET </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute747Exit">
            <summary> Dual View to Set 2 Screen on TV </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute787Exit">
            <summary> Dual View to Set 2 Screen on HDMI </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FF2892">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FF182RW">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute987Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MuteMuteExitExitExit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MutePlayPlayPlayExit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MuteStopStopStopExit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MuteReturnVolUpChannelUpMute">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.InfoStop">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute9900Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute3Mute3">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute7Mute7">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.InfoExitMute">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Keysource2589Keyprech">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FF2006201409">
            <summary> Wireless Network BT Function Off to Reaction </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FF2006201408">
            <summary> Wireless Network BT Function On to Reaction </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FF2006201509">
            <summary> Wireless Network WIFI Function Off to Reaction </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MuteVolUpChannelUpMute">
            <summary> Not Support(using 13's) </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute007Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute487Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute482Exit">
            <summary> </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Info533Exit">
            <summary> Change the Background Color step by step in a floating state.(White, Blue, Black) </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute777Exit">
            <summary> Temporary Kept to mantain compatibility </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute489Exit">
            <summary> To Display status of History Trace </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.KeyTest09">
            <summary> Skip a Test , in PNP Testing </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute753Exit">
            <summary> To get ID of the contents protection module and Version information. </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute777">
            <summary> To set the Wi-Fi related information afloat on TV in the hidden key input through UI </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FF2006201609">
            <summary> Enter WIFI test mode </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute7193Exit">
            <summary> CX-Core stop mode, will be removed </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MuteUpLeftUpDownMuteBack">
            <summary> CX-Core stop mode </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FFPlayPauseRW">
            <summary> Factory voice function </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.FactoryEnterInfo">
            <summary> Menu for Exhibition mode </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute911Exit">
            <summary> launch LFD software upgrade download progress UI </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute189Exit">
            <summary> launch Remote JackPack Port Test for Hotel TV </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute188Exit">
            <summary> launch Hotel Port Test </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute729Exit">
            <summary> Auto detection on/off </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.MuteVolDownChannelDownMute">
            <summary> Auto detection on/off using smart control </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute114Exit">
            <summary> launch task manager application </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute419Exit">
            <summary> launch local dimming on automation production </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute135Mute">
            <summary> start tcp dump utility </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute246Mute">
            <summary> stop tcp dump utility </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute000Mute">
            <summary> key debug mode ON  (keyrouter-tv only) </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Mute111Mute">
            <summary> key debug mode OFF (keyrouter-tv only) </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.KeyCombinations.Max">
            <summary> Max Value </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.ReleaseFunction">
            <summary>
            Enumeration for Release function type
            </summary>
            <version> 6.6.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.ReleaseFunction.Free">
            <summary> Use free function to release the pixel buffer </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ReleaseFunction.Delete_Array">
            <summary> Use delete[] operator to release the pixel buffer </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.RotationType">
            <summary>
            Enumeration for Rotation type supported in CounterClockwise direction
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RotationType.Rotate0">
            <summary> Default </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RotationType.Rotate90">
            <summary> Rotate 90 degree </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RotationType.Rotate180">
            <summary> Rotate 180 degree </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RotationType.Rotate270">
            <summary> Rotate 270 degree </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.ScalerTypes">
            <summary>
            type of using Scaler
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ScalerTypes.Default">
            <summary>
            Default (Main)
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ScalerTypes.Main">
            <summary>
            Main scaler
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ScalerTypes.Sub">
            <summary>
            Sub scaler
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.TVKeyGrabModes">
            <summary>
            Enumeration for TVKeyGrabModes of the window 
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.TVKeyGrabModes.None">
            <summary> Default </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.TVKeyGrabModes.Shared">
            <summary> key is shared with other application. key can be sent to app running as background or service daemon. </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.TVKeyGrabModes.Topmost">
            <summary> get key exclusively in case of the top most window. </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.TVKeyGrabModes.OverrideExclusive">
            <summary> get key exclusively whenever. this mode can be overwritten </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.TVKeyGrabModes.Exclusive">
            <summary> get key exclusively whenever. this mode can not be overwritten </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.TVKeyGrabModes.Registered">
            <summary> get key if window is visible. </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.UIDirection">
            <summary>
            types of UI direction
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.UIDirection.Inherit">
            <summary> Don't use this value. Please use FluxView's InheritUIDirection </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.UIDirection.LTR">
            <summary> UI direction is Left to Right </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.UIDirection.RTL">
            <summary> UI direction is Right to Left </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.WindowCaptureResult">
            <summary>
            Enumeration for window capture result. 
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.WindowCaptureResult.StartToSave">
            <summary> started saving </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.WindowCaptureResult.Done">
            <summary> done saving </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.WindowCaptureResult.Cancel">
            <summary> cancelled saving </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.WindowCaptureResult.InvalidFileName">
            <summary> invalid file name </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.WindowCaptureResult.OsSystemError">
            <summary> os error </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.EventService">
            <summary>
            This is a helper class to support async event handler
            </summary>
            <code>
            EventService.Instance.ASyncEvent += Instance_ASync0;
            private void Instance_ASync0(object sender, EventArgs e)
            {
               Log.Error("TV.FLUX.Example", "#0 async event handler is invoked");
            }
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.EventService.Instance">
            <summary>
            get the instance of EventService class
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.EventService.ASyncEvent">
            <summary>
            add/remove async event handler
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxApplication">
            <summary>
            The base class of flux tv nui application. Your ui application code should inherit this class.
            </summary>
            <code>
            class MyUIApp : FluxApplication
            {
                static void Main(string[] args)
                {
                    MyUIApp uiApp = new MyUIApp();
                    uiApp.Run(args);
                }
            }
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.#ctor(Tizen.NUI.NUIApplication.WindowMode)">
            <summary>
            Constructor to instantiate the FluxApplication class.
            <param name="windowMode">window mode for deciding whether application window is opaque or transparent.</param>
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.#ctor(System.String,Tizen.NUI.NUIApplication.WindowMode)">
            <summary>
            Constructor to instantiate the FluxApplication class.
            <param name="styleSheet">The stylesheet url</param>
            <param name="windowMode">window mode for deciding whether application window is opaque or transparent.</param>
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.#ctor(System.String,Tizen.NUI.Size2D,Tizen.NUI.Position2D,Tizen.NUI.IBorderInterface,Tizen.NUI.NUIApplication.WindowMode)">
            <summary>
            Constructor to instantiate the FluxApplication class.
            The constructor with a stylesheet, size, position, boderInterface and window mode.
            </summary>
            <param name="styleSheet">The styleSheet URL.</param>
            <param name="windowSize">The window size. It is full size if set null</param>
            <param name="windowPosition">The window position. It is 0, 0 if set null</param>
            <param name="borderInterface"><see cref="T:Tizen.NUI.IBorderInterface"/>The border interface</param>
            <exception cref="T:System.ArgumentNullException">Thrown when borderInterface instance is null</exception>
            <param name="windowMode">window mode for deciding whether application window is opaque or transparent.</param>
            <version> 10.10.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.#ctor(Tizen.NUI.NUIApplication.WindowMode,System.Boolean)">
            <summary>
            Constructor to instantiate the FluxApplication class.
            The constructor with window mode and ui thread enable mode.
            </summary>
            <param name="windowMode">window mode for deciding whether application window is opaque or transparent.</param>
            <param name="separateUIThread">If the separateUIThread is enabled, the main thread and UI thread are separated. </param>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.ToUIThreadPost(System.Action)">
            <summary>
            Dispatches an asynchronous message to the ecore main loop of the UIThread.
            </summary>
            <param name="runner"> The runner callback </param>
            <exception cref="T:System.ArgumentNullException">Thrown when the runner is null.</exception>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.ToServiceThreadPost(System.Action)">
            <summary>
            Dispatches an asynchronous message to the gmain loop of the CoreTask.
            </summary>
            <param name="runner"> The runner callback </param>
            <exception cref="T:System.ArgumentNullException">Thrown when the runner is null.</exception>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.Post(System.Action)">
            <summary>
            Dispatches an asynchronous message to the gmain loop of the CoreTask.
            </summary>
            <param name="runner"> The runner callback </param>
            <exception cref="T:System.ArgumentNullException">Thrown when the runner is null.</exception>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.Run(System.String[])">
            <summary>
            Runs the FluxApplication.
            </summary>
            <param name="args">Arguments from commandline.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.OnPreCreate">
            <summary>
            Overrides this method if want to handle behavior before calling OnCreate().
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.OnCreate">
            <summary>
            Overrides this method if want to handle behavior when the application is created.        
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.OnResume">
            <summary>
            Overrides this method if want to handle behavior when the application is resumed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.OnTerminate">
            <summary>
            Overrides this method if want to handle behavior when the application is terminated.
            If base.OnTerminate() is not called, the event 'Terminated' will not be emitted.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.OnServiceCreate">
            <summary>
            Overrides this method if want to handle behavior when the service thread(main thread) is created.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxApplication.OnServiceTerminate">
            <summary>
            Overrides this method if want to handle behavior when the service thread(main thread) is terminated.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxDownloadManager">
            <summary>
            Singleton class. Links DownloadManager to FLUX side.
            </summary>
            <code>
            FluxDownloadManager.Instance.DownloadManager.RequestDownload(this, resourceUrl, OnDownloadComplete);
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxDownloadManager.Instance">
            <summary>
            Returns the singleton instance of the FluxDownloadManager
            </summary>
            <returns> FluxDownloadManager singleton instance</returns>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxDownloadManager.DownloadManager">
            <summary>
            DownloadManager that manages resource download from remote server. Implements IDownloadManager interface.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.MoveTo">
            <summary>
            Move To
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.LineTo">
            <summary>
            Line To
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.LineTo.#ctor(Tizen.NUI.Vector2)">
            <summary>
            constructor
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.LineTo.Draw(Tizen.NUI.FLUX.VectorView)">
             <summary>
            
             </summary>
             <param name="view"></param>
        </member>
        <member name="T:Tizen.NUI.FLUX.BezierTo">
            <summary>
            Bezier To
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.BezierTo.#ctor(Tizen.NUI.Vector2,Tizen.NUI.Vector2,Tizen.NUI.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="endPoint"></param>
            <param name="cp1"></param>
            <param name="cp2"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.BezierTo.Draw(Tizen.NUI.FLUX.VectorView)">
             <summary>
            
             </summary>
             <param name="view"></param>
        </member>
        <member name="T:Tizen.NUI.FLUX.ArcTo">
            <summary>
            Arc To
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ArcTo.#ctor(Tizen.NUI.Vector2,System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="cp">Center Point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="sAngle">Start angle</param>
            <param name="eAngle">End angle</param>
            <param name="orient">Orient</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.ArcTo.Draw(Tizen.NUI.FLUX.VectorView)">
             <summary>
            
             </summary>
             <param name="view"></param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Close.Draw(Tizen.NUI.FLUX.VectorView)">
             <summary>
            
             </summary>
             <param name="view"></param>
        </member>
        <member name="T:Tizen.NUI.FLUX.ObjectDumpInfo">
            <summary>
            This class is dedicated for Voice Interaction Framework Service.
            Do not use for other purposes without permission.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.TVAsyncImageLoadHelper">
            <summary>
            Wrapper Class for Native AsyncImageLoader.
            Connect AsyncLoadComplete event to get callback when image load complete,
            AsyncLoadEventArgs provide the pixeldata and LoadId for loaded image.
            </summary>
            <code>
            // Your callback for AsyncLoadComplete
            private void OnPixelDataLoadFinish(object sender, TVAsyncImageLoadHelper.AsyncLoadEventArgs e)
            {
              uint loadId = e.LoadId
              PixelData pixelData =  e.PixelData
            }
            
            TVAsyncImageLoadHelper tvasyncImageLoadHelper = new TVAsyncImageLoadHelper();
            tvasyncImageLoadHelper.AsyncLoadComplete += OnPixelDataLoadFinish;
            uint loadId = tvasyncImageLoadHelper.Load(url);
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.TVAsyncImageLoadHelper.AsyncLoadEventArgs">
            <summary>
            EventArgument class for AsyncLoadComplete Event
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.TVAsyncImageLoadHelper.AsyncLoadEventArgs.LoadId">
            <summary> Load Id for Image  </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.TVAsyncImageLoadHelper.AsyncLoadEventArgs.PixelData">
            <summary> 
            Pixeldata of loaded image
            if load failed than pixeldata will be null.
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.TVAsyncImageLoadHelper.AsyncLoadComplete">
            <summary>
            ASyncLoadComplete Event
            Must Connect to get pixel data of loaded image.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVAsyncImageLoadHelper.Load(System.String)">
            <summary>
             Load Image using async image loader
             Must be connected to AsyncLoadComplete Event to get pixeldata before Load
            </summary>
            <param name="url"> The URL of the image file to load </param>
            <returns>  the loading task id </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVAsyncImageLoadHelper.Load(System.String,Tizen.NUI.Size2D)">
            <summary>
             Load Image using async image loader
             Must be connected to AsyncLoadComplete Event to get pixeldata before Load
            </summary>
            <param name="url"> The URL of the image file to load </param>
            <param name="size"> The width and height to fit the loaded image to, 0.0 means whole image </param>
            <returns>  the loading task id </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVAsyncImageLoadHelper.Load(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType,Tizen.NUI.SamplingModeType,System.Boolean)">
            <summary>
             Load Image using async image loader
             Must be connected to AsyncLoadComplete Event to get pixeldata before Load
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <param name="size">The width and height to fit the loaded image to, 0.0 means whole image</param>
            <param name="fittingMode">The method used to fit the shape of the image before loading to the shape defined by the size parameter.</param>
            <param name="samplingMode">The filtering method used when sampling pixels from the input image while fitting it to desired size.</param>
            <param name="orientationCorrection">Reorient the image to respect any orientation metadata in its header.</param>
            <returns> the loading task id </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVAsyncImageLoadHelper.Cancel(System.UInt32)">
            <summary>
            Cancels an image loading task if it is still queueing in the work thread.
            </summary>
            <param name="loadingTaskId">loadingTaskId The task id returned when invoking the load call.</param>
            <returns> true If the loading task is removed from the queue, false otherwise the loading is already implemented and unable to cancel anymore</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVAsyncImageLoadHelper.CancelAll">
            <summary>
            Cancels all the loading task in the queue.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.TransformationUtil.GetScreenExtents(Tizen.NUI.BaseComponents.View)">
            <summary>
            Returns Views screen coordinates
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.LayoutParam">
            <summary>
            When FluxView is work item in Layout, 
            this abstract class is needed.
            This class is item's propery class in layout. 
            </summary>
            <code>
            class CustomLayoutParam : LayoutParam
            {
                public int property //user defined proeprty
                {
                    set
                    {
                        propertyValue = value;
                    }
                    get
                    {
                        return = propertyValue;
                    }
                }
                private int propertyValue;
            }    
            FluxView view = new FluxView();
            view.LayoutParam = new CustomLayoutParam();
            view.LayoutParam.property = 10;
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.NUIDisposable">
            <summary>
            NUIDisposable abstact class which enables user to define how to clean-up their unmanaged and managed resource in Application Thread.
            </summary>
            <code>
            public class DisposbleObject:NUIDisposable
            {
                protected override void Dispose(DisposeTypes type)
                {
                    if(disposed)
                    {
                        return;
                    }
             
                    if (type == DisposeTypes.Explicit)
                    {
                        Called by User
                        Release your own managed resources here.
                        You should release all of your own disposable objects here.
                    }
                    
                    Release your own unmanaged resources here.   
                    You should not access any managed member here except static instance.
                    because the execution order of Finalizes is non-deterministic.
                    Unreference this from if a static instance refer to this.    
                    
                    disposed = true;
                }
            }
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.NUIDisposable.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>        
        </member>
        <member name="M:Tizen.NUI.FLUX.NUIDisposable.Finalize">
            <summary>
            Finalizer 
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.NUIDisposable.Dispose">
            <summary>
            Clean up managed and unmanaged resources explicitly.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throw failed if the function is not called in Application thread.
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.NUIDisposable.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>        
            User can override this function to define how to clean their own managed and unmanaged resources.
            </summary>
            <param name="type">Disposing type</param>     
        </member>
        <member name="T:Tizen.NUI.FLUX.BorderRenderer">
            <summary>
            Renders a solid color to the control's quad border fixed to a specified size.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.BorderRenderer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.BorderRenderer.BorderWidth">
            <summary>
            Set the width of the border.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.BorderRenderer.BorderColor">
            <summary>
            Set the color of the border.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.CircleShadowRenderer">
            <summary>
            Draws Circle Shadow
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.CircleShadowRenderer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.CircleShadowRenderer.UpdateUniforms">
            <summary>
            Update uniforms
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.DynamicShadow">
            <summary>
            class for DynamicShadow
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.DynamicShadow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.DynamicShadow.offset">
            <summary>
            Shadow Offset
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.DynamicShadow.Offset">
            <summary>
            Set shadow offset
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.DynamicShadow.color">
            <summary>
            Shadow Color
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.DynamicShadow.Color">
            <summary>
            Set/Get shadow Color
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.DynamicShadow.blurSize">
            <summary>
            Shadow BlurSize
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.DynamicShadow.BlurSize">
            <summary>
            Set/Get BlurSize.
            Value must be between 1u and 10u
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.DynamicShadow.blurSigma">
            <summary>
            Shadow BlurSigma
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.DynamicShadow.BlurSigma">
            <summary>
            Set/Get BlurSigma
            The constant controlling the Gaussian function, must be > 0.0. Controls the width of the bell curve, i.e. the look of the blur and also indirectly
            the amount of blurriness Smaller numbers for a tighter curve.Useful values in the range[0.5..3.0]
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.DynamicShadow.size">
            <summary>
            ShadowArea
            It should be equal to size of actor(actual actor whose shadow is shown) + offset of that actor from MultiShadowView actor
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.DynamicShadow.Size">
            <summary>
            Set/Get ShadowArea
            It should be equal to size of actor(actual actor whose shadow is shown) + offset of that actor from MultiShadowView actor
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.DynamicShadow.OnPropertyChanged(System.String)">
            <summary>
            OnPropertyChanged method to raise event
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxRenderer">
            <summary>
            FluxRenderer Class
            </summary>
            <code>
            FluxRendere renderer = new FluxRenderer(geometry, shader);
            renderer.UpdateTexture(0u, url);
            ....
            renderer.ResourceReady += OnResourceReady;
            
            // event callback for ResourceReady event.
            public void OnResourceReady(object sender, FluxRenderer.ResourceReadyEventArgs resourceReadyEvent)
            {
                FluxRenderer renderer = sender as FluxRenderer;
                if (resourceReadyEvent.LoadingStaus == FluxRenderer.LoadingStaus.Failed)
                {
                    return;
                }
                view.AddRenderer(renderer);
            }
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxRenderer.LoadingImageInfo">
            <summary>
            Struct to store image info for async image loading.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxRenderer.ImageProperty">
            <summary>
            FluxRenderer ImageLoading Parameter
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxRenderer.ImageProperty.DesiredWidth">
            <summary> Width, value type int  </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxRenderer.ImageProperty.DesiredHeight">
            <summary>Height, value type int </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxRenderer.ImageProperty.FittingMode">
            <summary>  FittingModeType, value type int </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxRenderer.ImageProperty.SamplingMode">
            <summary> SamplingModeType, value type int </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxRenderer.ImageProperty.OrientationCorrection">
            <summary> OrientationCorrection, value type bool </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxRenderer.TVAsyncImageLoader">
            <summary>
            Helper class for async image loading.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxRenderer.ResourceReadyEventArgs">
            <summary>
            Event Agrument for AsyncTextureUpdated event.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxRenderer.ResourceReadyEventArgs.Url">
            <summary>
            Get url of the updated texture
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxRenderer.ResourceReadyEventArgs.LoadingStaus">
            <summary>
            Get finish status of update texture process.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.ResourceReadyEventArgs.#ctor(System.String,Tizen.NUI.FLUX.FluxRenderer.LoadingStaus)">
            <summary>
            Event for Async Texture Update Complete.
            </summary>
            <param name="url">loaded image url</param>
            <param name="status"> finish status of texture update process</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.#ctor(Tizen.NUI.Geometry,Tizen.NUI.Shader)">
            <summary>
            Create a Rendender using custom geometry and shaders.
            </summary>
            <param name="geometry"> Geometry for renderer </param>
            <param name="shader"> shader for renderer</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxRenderer.LoadingStaus">
            <summary>
            Enumeration for LoadingStatus of image.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxRenderer.LoadingStaus.Ready">
            <summary> Loading status ready /// </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxRenderer.LoadingStaus.Failed">
            <summary> Loading status fail /// </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.OnPixelDataLoadFinish(System.UInt32,Tizen.NUI.PixelData,Tizen.NUI.FLUX.FluxRenderer.LoadingImageInfo)">
            <summary>
            Update texture for async loaded images.
            </summary>
            <param name="id"> identifier for loading image</param>
            <param name="pixelData"> handle to pixel data </param>
            <param name="loadedImageInfo"> image info (url, texture id, etc)</param>
        </member>
        <member name="E:Tizen.NUI.FLUX.FluxRenderer.ResourceReady">
            <summary>
            Signal for async texture update.
            Only emitted when UpdateTexture is called with isSyncloading set to false.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.UpdateUniformForNPATCH(Tizen.NUI.Texture,Tizen.NUI.Rectangle)">
            <summary>
             update uniform for npatch image
             updates the below uniforms only
             uFixed[0], uFixed[1], uFixed[0], uFixed[2], uStretchTotal.
            </summary>
            <param name="texture"> texture of npatch image </param>
            <param name="border"> border for npatch image </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.CreateTexture(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType,Tizen.NUI.SamplingModeType,System.Boolean)">
            <summary>
            Create texture using url.
            </summary>
            <param name="url"> path of the image </param>
            <param name="size"> size The width and height to fit the loaded image to, 0.0 means whole image </param>
            <param name="fittingMode"> fittingMode The method used to fit the shape of the image before loading to the shape defined by the size parameter. </param>
            <param name="samplingMode">samplingMode The filtering method used when sampling pixels from the input image while fitting it to desired size </param>
            <param name="orientationCorrection">handle to the loaded PixelBuffer object or an empty handle in case loading failed</param>
            <returns></returns>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxRenderer.SynchronosLoading">
            <summary>
            SynchronosLoading loading
            Default value is false
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.UpdateTexture(System.UInt32,System.String,Tizen.NUI.PropertyMap,Tizen.NUI.Rectangle,System.Boolean)">
            <summary>
            update the texture for renderer.
            </summary>
            <param name="textureId"> index of texture in textureset </param>
            <param name="url"> url to create texture </param>
            <param name="imageMap">ProperyMap for Image Loading Parameters</param>
            <param name="border"> border for npatch image </param>
            <param name="isMipmap"> flag to generate mipmap or not </param>
            <code>
            Geometry geometry = GeometryFactory.Instance.GetGeometry(GeometryFactory.GeometryType.QUAD);
            Shader shader = ShaderFactory.Instance.GetShader(ShaderFactory.ShaderType.IMAGE);
            PropertyMap propertyMap = new PropertyMap();
            propertyMap.Add(FluxRenderer.ImageProperty.DesiredWidth, new PropertyValue(960));
            propertyMap.Add(FluxRenderer.ImageProperty.DesiredHeight, new PropertyValue(452));
            propertyMap.Add(FluxRenderer.ImageProperty.FittingMode, new PropertyValue((int) FittingModeType.FitWidth));
            propertyMap.Add(FluxRenderer.ImageProperty.SamplingMode, new PropertyValue((int) SamplingModeType.BoxThenLinear));
            propertyMap.Add(FluxRenderer.ImageProperty.OrientationCorrection, new PropertyValue(false));
            FluxRenderer renderer2 = new FluxRenderer(geometry, shader);
            renderer2.UpdateTexture(0u, url, propertyMap);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.UpdateTexture(System.UInt32,Tizen.NUI.Texture,Tizen.NUI.Rectangle,System.Boolean)">
            <summary>
            update the texture for renderer.
            </summary>
            <param name="textureId"> index of texture in textureset </param>
            <param name="texture"> texture to be updated </param>
            <param name="border"> border for npatch image </param>
            <param name="isMipmap"> flag to generate mipmap or not </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.SetSampler(System.UInt32,Tizen.NUI.Sampler)">
            <summary>
            Set Sampler for texture
            </summary>
            <param name="textureId"> </param>
            <param name="sampler"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxRenderer.UpdateUniform(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="uniformName"> string name of uniform in shader</param>
            <param name="value"> value to be updated </param>
        </member>
        <member name="T:Tizen.NUI.FLUX.BorderGeometry">
            <summary>
            Border Geometry
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.BorderGeometry.CreateBorderGeometry">
            <summary>
            Create Border vertex data.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.GeometryBase">
            <summary>
            Base class for Geometry providing utility function for dervide classes .
            </summary>
            <code>
            Geometry geometry = GeometryFactory.Instance.GetGeometry(GeometryType.QUAD);
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.GeometryBase.VertexData">
            <summary>
            Vertex Data
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.GeometryBase.GenerateGeometry(System.Collections.Generic.List{Tizen.NUI.FLUX.GeometryBase.VertexData},System.Collections.Generic.List{System.UInt16})">
            <summary>
            Create geometry and add vertex data.
            </summary>
            <param name="vertices"> list  of vertices </param>
            <param name="indices"> index list </param>
            <exception cref="T:System.OutOfMemoryException"> Failed to allocate native memory </exception>
            <exception cref="T:System.Exception" > Failed to marshel the data. </exception>
            <returns> geometry object </returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.NPatchBorderGeometry">
            <summary>
            NPatchBorder Geometry
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.NPatchBorderGeometry.CreateNPatchBorderGeometry(Tizen.NUI.Uint16Pair)">
            <summary>
            Create NPatchBorder vertex data.
            </summary>
            <param name="gridSize"> grid size for npathcborder. </param>
            <returns> geometry </returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.NPatchGeometry">
            <summary>
            Factory class to create and cache different types of geometry.
            </summary>
            <code>
            Geometry geometry = GeometryFactory.Instance.GetGeometry(GeometryType.QUAD);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.NPatchGeometry.CreateNPatchGridGeometry(Tizen.NUI.Uint16Pair)">
            <summary>
             Create NPatch vertex data
            </summary>
            <param name="gridSize"> grid size for the npatch</param>
            <returns> geometry </returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.QuadGeometry">
            <summary>
            Quad Geometry
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.QuadGeometry.CreateQuadGeometry">
            <summary>
            Create quad geometry vertex data
            </summary>
            <returns> geometry </returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.GeometryFactory">
            <summary>
            Factory class to create and cache different types of geometry.
            </summary>
            <code>
            Geometry geometry = GeometryFactory.Instance.GetGeometry(GeometryType.QUAD);
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.GeometryFactory.GeometryType">
            <summary>
            Geometry type for Geometry Factory.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.GeometryFactory.GeometryType.QUAD">
            <summary> Rectangle geometry </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.GeometryFactory.GeometryType.NPATCH">
            <summary> NPatch geometry </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.GeometryFactory.GeometryType.NPATCH_BORDER">
            <summary> NPatch border geometry </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.GeometryFactory.GeometryType.BORDER">
            <summary> Border geometry </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.GeometryFactory.Instance">
            <summary>
            Get Instance of geometry factory class.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.GeometryFactory.#ctor">
            <summary>
            Create GeometryFactor class object. 
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.GeometryFactory.CreateGeometry(Tizen.NUI.FLUX.GeometryFactory.GeometryType)">
            <summary>
            Create different types of geometry.
            </summary>
            <param name="type"> type of geometry </param>
            <returns> newly created geometry </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.GeometryFactory.GetGeometry(Tizen.NUI.FLUX.GeometryFactory.GeometryType)">
            <summary>
            Get geometry of given type.
            </summary>
            <param name="type"> type of geometry </param>
            <returns> valid geomerty of given type on success, null on failure </returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.GLSurfaceViewBaseRenderer">
            <summary>
            Renderer extension for GLSurfaceView, This is responsible to make OpenGL
            calls to reander a frame.
            </summary>
            <code>
            Implement Renderer Interface 
            class Renderer : GLsurfaceViewRendererBase
            {
                public override void Initialize(uint width, uint height){}
                public override void Draw(){ 
                    // if you want to synchronized update, 
                    this.EndSynchronizedUpdate();
                }
                public override void Terminate(){}
            }
            
            Create GLSurfaceView
            glSurfaceView = new GLSurfaceView(800, 800);
            Renderer rend = new Renderer();
            glSurfaceView.SetRenderer(rend);
            glSurfaceView.RenderingMode = RenderMode.Continuous;
            glSurfaceView.GLContentResizingMode = GLContentResizeMode.Static;
            parent.Add(glSurfaceView);    
            
            // if you want to synchronized update, 
            glSurfaceView.StartSynchronizedUpdate();
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceViewBaseRenderer.Initialize(System.UInt32,System.UInt32)">
            <summary>
            Initialize - called only once.
            </summary>
            <param name="width"> renderer width </param>
            <param name="height"> renderer height </param>        
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceViewBaseRenderer.Draw">
            <summary>
            Draw - Resposible to draw current frame
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceViewBaseRenderer.Terminate">
            <summary>
            Terminate - Called before terminating render thread, 
            USer can release resource here.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceViewBaseRenderer.EndSynchronizedUpdate">
            <summary>
             End Synchronize update from renderer.
             <remarks> It should be pair with GLSurfaceView.StartSynchronizedUpdate </remarks>
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.IGLSurfaceViewRenderer">
            <summary>
            Renderer for GLSurfaceView, This is responsible to make make OpenGL
            calls to reander a frame.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.IGLSurfaceViewRenderer.Initialize(System.UInt32,System.UInt32)">
            <summary>
            Initialize - called only once.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.IGLSurfaceViewRenderer.Draw">
            <summary>
            Draw - Resposible to draw current frame
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.IGLSurfaceViewRenderer.Terminate">
            <summary>
            Terminate - Called before terminating render thread, 
            USer can release resource here.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.PrimitiveShadowRenderer">
            <summary>
            Abstract class for Primitive shadow
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.PrimitiveShadowRenderer.#ctor(Tizen.NUI.Geometry,Tizen.NUI.Shader)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.PrimitiveShadowRenderer.UpdateUniforms">
            <summary>
            Update Uniforms
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.PrimitiveShadowRenderer.Offset">
            <summary>
            Set shadow offset
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.PrimitiveShadowRenderer.Color">
            <summary>
            Set shadow Color
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.PrimitiveShadowRenderer.BlurSize">
            <summary>
            Set BlurSize
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.RectangleShadowRenderer">
            <summary>
            Draw Rectangle Shadow
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.RectangleShadowRenderer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.RectangleShadowRenderer.UpdateRectangleUniforms">
            <summary>
            Update Rectangle Uniforms
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.RectangleShadowRenderer.UpdateUniforms">
            <summary>
            Update Uniforms
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.RoundedRectShadowRenderer">
            <summary>
            Draw RoundedRect shadow
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.RoundedRectShadowRenderer.RoundedRectSide">
            <summary>
            RoundedRectSides
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RoundedRectShadowRenderer.RoundedRectSide.All">
            <summary>
            All Four Corners
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RoundedRectShadowRenderer.RoundedRectSide.Top">
            <summary>
            Top Two Corners
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RoundedRectShadowRenderer.RoundedRectSide.Bottom">
            <summary>
            Bottom Two Corners
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RoundedRectShadowRenderer.RoundedRectSide.Left">
            <summary>
            Left Two Corners
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RoundedRectShadowRenderer.RoundedRectSide.Right">
            <summary>
            Right Two Corners
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.RoundedRectShadowRenderer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.RoundedRectShadowRenderer.UpdateRoundedRectUniforms">
            <summary>
            Update RoundedRects Uniforms
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.RoundedRectShadowRenderer.UpdateUniforms">
            <summary>
            Update Uniforms
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.RoundedRectShadowRenderer.Radius">
            <summary>
            Set Radius for rounded corners
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.ShaderFactory">
            <summary>
            Shader factory for shader object
            retrive or store shader object for reuse.
            </summary>
            <code>
            Shader shader = ShaderFactory.Instance.GetShader(ShaderType.IMAGE);
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.ShaderFactory.ShaderType">
            <summary>
            Shader type for shader factory
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ShaderFactory.ShaderType.IMAGE">
            <summary> Normal image shader </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ShaderFactory.ShaderType.NPATCH">
            <summary> Npatch image shader </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ShaderFactory.ShaderType.NPATCH_BORDER">
            <summary> Npatch border image shader </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ShaderFactory.ShaderType.BORDER">
            <summary> Border shader </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ShaderFactory.ShaderType.CIRCLE_COLOR">
            <summary>
            Circle shader
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ShaderFactory.ShaderType.RECTANGLE_COLOR">
            <summary>
            Rectangle shader
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ShaderFactory.ShaderType.ROUNDED_RECT_COLOR">
            <summary>
            Roundede Rectanlge shader
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.ShaderFactory.Instance">
            <summary>
            Get Instance of shader factory.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ShaderFactory.GetShader(Tizen.NUI.FLUX.ShaderFactory.ShaderType)">
            <summary>
            Get shader for given type, 
            Custom Shader require valid id
            </summary>
            <param name="type"> shader type </param>
            <returns> valid shader object on success, null otherwise </returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.IDownloadManager">
            <summary>
            Interface for DownloadManager
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.IDownloadManager.RequestDownload(System.Object,System.String,System.Action{System.Object,System.Boolean,System.String,System.String})">
            <summary>
            Requests download of given url to server
            </summary>
            <param name="userData">User data object</param>
            <param name="url">Resource url</param>
            <param name="OnDownloadComplete">Callback for when download is complete. Takes in a user data object, success(true) or failure(false), requestedUrl, cachedUrl as parameters.</param>
            <returns>True if download is successful, false if not</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.IDownloadManager.DiscardRequest(System.Object,System.String)">
            <summary>
            Discards the requested url download. OnDownloadComplete should not be called.
            </summary>
            <param name="userData">User data object</param>
            <param name="url">Resource url</param>
            <returns>True if request is successfully discarded, false if not</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.IVideoWindowControl">
            <summary>
            IVideoWindowControl Interface.    
            </summary>
            <deprecated>Deprecated since 9.9.0. Use Tizen.TV.UI.SharedAPI.IVideoWindowControl instead.</deprecated>
        </member>
        <member name="M:Tizen.NUI.FLUX.IVideoWindowControl.SetDisplayArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set Video Display Area
            </summary>
            <param name="x">X Position of Video Display Area</param>
            <param name="y">Y Position of Video Display Area</param>
            <param name="width">Width of Video Display Area</param>
            <param name="height">Height of Video Display ARea</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.IVideoWindowControl.SetEcoreWindowHandle(System.IntPtr)">
            <summary>
            Set Ecore Window Handle for Player
            </summary>
            <param name="handle">Ecore Window Handle</param>        
        </member>
        <member name="T:Tizen.NUI.FLUX.IVideoWindowControlExtension">
            <summary>
            VideoWindowControl extension interface for player
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.IVideoWindowControlExtension.SetDisplayArea(Tizen.NUI.FLUX.VideoAttribute,Tizen.NUI.FLUX.WindowAttribute)">
            <summary>
            Set the display area for video and window
            </summary>
            <param name="videoAttribute">Video attribute including position and size</param>
            <param name="windowAttribute">Window attribute including position, size, degree, base screen resolution</param>
            <returns>Returns true in case of success</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.VideoAttribute">
            <summary>
            VideoAttribute which is parameter type passed through the method of IVideoWindowControlExtension
            </summary>
            <code>
            VideoAttribute videoAttribute = new VideoAttribute(0, 0, 960, 540);
            int x = videoAttribute.X;
            int y = videoAttribute.Y;
            int width = videoAttribute.Width;
            int height = videoAttribute.Height;
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoAttribute.#ctor">
            <summary>
            Constructor of VideoAttribute
            </summary>        
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor of VideoAttribute
            </summary>
            <param name="x">X Position of Video area</param>
            <param name="y">Y Position of Video area</param>
            <param name="width">Width of Video area</param>
            <param name="height">Height of Video area</param>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoAttribute.X">
            <summary>
            X Position of Video area
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoAttribute.Y">
            <summary>
            Y Position of Video area
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoAttribute.Width">
            <summary>
            Width of Video area
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoAttribute.Height">
            <summary>
            Height of Video area
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoAttribute.SetVideoAttribute(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set position and size attribute of video
            </summary>
            <param name="x">Position of x</param>
            <param name="y">Position of y</param>
            <param name="width">Size of width</param>
            <param name="height">Size of height</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.WindowAttribute">
            <summary>
            WindowAttribute which is parameter type passed through the method of IVideoWindowControlExtension
            </summary>
            <code>
            WindowAttribute windowAttribute = new WindowAttribute((0, 0), (960, 540), 90, (1920, 1080));
            (int X, int Y) position = windowAttribute.Position;
            (int Width, int Height) size = windowAttribute.Size;
            int degree = windowAttribute.Degree;
            (int Width, int Height) baseScreenResolution = windowAttribute.BaseScreenResolution;
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.WindowAttribute.#ctor">
            <summary>
            Constructor of WindowAttribute
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.WindowAttribute.#ctor(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.Int32,System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Constructor of WindowAttribute
            </summary>
            <param name="position">Window position</param>
            <param name="size">Window size</param>
            <param name="degree">Window degree</param>
            <param name="baseScreenResolution">Base screen resolution</param>
        </member>
        <member name="P:Tizen.NUI.FLUX.WindowAttribute.Position">
            <summary>
            Position of Window
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.WindowAttribute.Size">
            <summary>
            Size of Window
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.WindowAttribute.Degree">
            <summary>
            Degree of Window
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.WindowAttribute.BaseScreenResolution">
            <summary>
            BaseScreenResolution. It is returned according to the value in the manifest file of current application.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.WindowAttribute.SetWindowAttribute(System.ValueTuple{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32},System.Int32,System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Set position, size, degree, base screen resolution of window
            </summary>
            <param name="position">Position of window (x, y)</param>
            <param name="size">Size of window (width, height)</param>
            <param name="degree">Degree of window</param>
            <param name="baseScreenResolution">Base screen resolution (width, height)</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.SystemProperty">
            <summary>
            Provide the information of system's information and trigger the system events
            </summary>
            <code>
            //gets the value of the current UI direction
            SystemProperty.Instance.UIDirection;
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.SystemProperty.Instance">
            <summary>
            get the instance of SystemProperty class
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.SystemProperty.HighContrast">
            <summary>
            get the value of highcontrast UI
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.SystemProperty.Enlarge">
            <summary>
            get the value of enlarge UI
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.SystemProperty.UIDirection">
            <summary>
            get the current UI direction
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.KeyCombinationDelegate">
            <summary>
            This is delegate of keycombination handler 
            </summary>
            <param name="combination"> Add user handler about Keycombination</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.TVWindow">
            <summary>
            This is Window include extension method in Window class
            </summary>
            <code>
            Window.Instance.GrabKey("1", KeyGrabModes.Registered);
            Window.Instance.UnGrabKey("1", KeyGrabModes.Registered);
            Window.Instance.GrabAllKey(KeyGrabModes.Registered);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.#cctor">
            <summary>
            It is called automatically before the first instance is created or any static members are referenced.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.GetCursor(Tizen.NUI.Window)">
            <summary>
            User can get cursor object for using cursor
            </summary>
            <param name="window"> It is indicated extension method of Window class </param>
            <returns> Cursor object </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.IgnoreKeyEvent(Tizen.NUI.Window)">
            <summary>
            This function is used to set the window to ignore all the keys in focus state.
            </summary>
            <param name="window"> It is indicated extension method of Window class </param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to set IgnoreKeyevent
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.ReceiveKeyEvent(Tizen.NUI.Window)">
            <summary>
            This function is used to re-set the window to receive all the keys in focus state.
            </summary>
            <param name="window"> It is indicated extension method of Window class </param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to set ReceiveKeyEvent
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.GrabKey(Tizen.NUI.Window,System.String,Tizen.NUI.FLUX.TVKeyGrabModes)">
            <summary>
            Grab key which you want to mode in this window
            If you can use TVkeyGrabModes except Topmost mode, you should add privileges. 
            </summary>
            <privlevel> Platform </privlevel>
            <privilege> http://tizen.org/privilege/keygrab </privilege>
            <param name="window"> It is indicated extension method of Window class </param>
            <param name="keyName"> keyname of the key to be grabbed or registered </param>
            <param name="mode"> mode in which the key is to be grabbed or registered </param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to set GrabKey
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.UnGrabKey(Tizen.NUI.Window,System.String,Tizen.NUI.FLUX.TVKeyGrabModes)">
            <summary>
            Ungrab key which you want to mode about grab key in this window
            If you can use TVkeyGrabModes except Topmost mode, you should add privileges. 
            </summary>
            <privlevel> Platform </privlevel>
            <privilege> http://tizen.org/privilege/keygrab </privilege>
            <param name="window"> It is indicated extension method of Window class </param>
            <param name="keyName"> keyname of the key to be ungrabbed or unregistered </param>
            <param name="mode"> mode in which the key is to be ungrabbed or unregistered </param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to UnGrabKey
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.GrabAllKey(Tizen.NUI.Window,Tizen.NUI.FLUX.TVKeyGrabModes)">
            <summary>
            Grab all key which you want to mode in this window
            If you can use TVkeyGrabModes except Topmost mode, you should add privileges. 
            </summary>
            <privlevel> Platform </privlevel>
            <privilege> http://tizen.org/privilege/keygrab </privilege>
            <param name="window"> It is indicated extension method of Window class </param>
            <param name="mode"> mode in which the key is to be grabbed or registered </param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to GrabAllKey
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.UnGrabAllKey(Tizen.NUI.Window,Tizen.NUI.FLUX.TVKeyGrabModes)">
            <summary>
            UnGrab all key which you want to mode in this window
            If you can use TVkeyGrabModes except Topmost mode, you should add privileges. 
            </summary>
            <version> 6.6.0 </version>
            <privlevel> Platform </privlevel>
            <privilege> http://tizen.org/privilege/keygrab </privilege>
            <param name="window"> It is indicated extension method of Window class </param>
            <param name="mode"> mode in which the key is to be grabbed or registered </param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to GrabAllKey
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tizen.NUI.FLUX.TVWindow.GrabKeyList(Tizen.NUI.Window,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Tizen.NUI.FLUX.TVKeyGrabModes}})" -->
        <!-- Badly formed XML comment ignored for member "M:Tizen.NUI.FLUX.TVWindow.UnGrabKeyList(Tizen.NUI.Window,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Tizen.NUI.FLUX.TVKeyGrabModes}})" -->
        <member name="M:Tizen.NUI.FLUX.TVWindow.AddKeyCombinationHandler(Tizen.NUI.Window,Tizen.NUI.FLUX.KeyCombinations,Tizen.NUI.FLUX.KeyCombinationDelegate)">
            <summary>
            This function will add handler to be called for specific key combination.
            </summary>
            <param name="window"> It is indicated extension method of Window class </param>
            <param name="keys"> Keycombination which application wants to listen </param>
            <param name="handler"> This hanlder to be called when specified key combination </param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to AddKeyCombinationHandler
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.RemoveKeyCombinationHandler(Tizen.NUI.Window,Tizen.NUI.FLUX.KeyCombinations,Tizen.NUI.FLUX.KeyCombinationDelegate)">
            <summary>
            This function will remove handler to be called for specific key combination.
            </summary>
            <param name="window"> It is indicated extension method of Window class </param>
            <param name="keys"> Keycombination which application wants to listen </param>
            <param name="handler"> This hanlder to be deleted </param>
            <exception cref='T:System.InvalidOperationException'>
            Throw failed to RemoveKeyCombinationHandler
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.GetWindowHandle(Tizen.NUI.Window)">
            <summary>
            Extension method to retrive Native Window Handle
            </summary>
            <param name="window">NUI Window Instance</param>
            <returns>EcoreWindowHandle</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.GetResourceID(Tizen.NUI.Window)">
            <summary>
            Extension method for resource Id of window
            </summary>
            <param name="window">NUI Window Instance</param>
            <returns>Resource Id of window </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.CaptureWindowSurfaceAsFile(Tizen.NUI.Window,System.Action{Tizen.NUI.FLUX.WindowCaptureResult},System.String,System.String)">
            <summary>
            Extension method for capturing a window surface as image
            </summary>
            <param name="window">NUI Window Instance</param>
            <param name="captureCallback">Window surface capture complete callback</param>
            <param name="path">Path where captured image needs to be dumped</param>
            <param name="filename">filename without extension, of the captured image. Extension is fixed as .png</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.GetKeyRouter(Tizen.NUI.Window)">
            <summary>
            GetKeyRouter - Windows extension method to get KeyRouter Object
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.TVWindow.WindowCaptureUtil">
            <summary>
            This is Window capture util internal class
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.TVWindow.KeyRouter">
            <summary>
            This is KeyRouter internal class 
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.GetWindowUnitSize(Tizen.NUI.Window)">
            <summary>
            Get unit size of window
            </summary>
            <param name="window">NUI Window Instance</param>
            <returns> unit size of window </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.GetWindowUnitPosition(Tizen.NUI.Window)">
            <summary>
            Get unit position of window
            </summary>
            <param name="window">NUI Window Instance</param>
            <returns> unit position of window </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.SetWindowUnitPositionSize(Tizen.NUI.Window,Tizen.NUI.FLUX.UnitPosition,Tizen.NUI.FLUX.UnitSize)">
            <summary>
            Set unit position and unit size of window
            To remove flickering issue when user change window position and size, user should set both position and size at once.
            </summary>
            <param name="window">NUI Window Instance</param>
            <param name="unitPosition"> unit postion of window </param>
            <param name="unitSize"> unit size of window </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.TVWindow.CheckNotArrivedKeyEvent(Tizen.NUI.Window,System.UInt32@,System.Int32@,System.UInt32@,System.Int32@)">
            <summary>
            Extension method to check if there is a key that has not arrived in key event queue on system.
            </summary>
            <param name="window">NUI Window Instance</param>
            <param name="clientReceivedKeyTimeStamp">Time of occurrence of the current key being processed in client (NUI) side</param>
            <param name="clientReceivedKeyCode">Key code of the current key being processed in client (NUI) side</param>
            <param name="serverReceivedKeyTimeStamp">Time of occurrence of the last key stored in memory vconf</param>
            <param name="serverReceivedKeyCode">Key code of the last key stored in memory vconf</param>
            <returns> If there is a key that has not arrived in key event queue, then return true. </returns>
            <version>10.10.0</version>
        </member>
        <member name="T:Tizen.NUI.FLUX.TVWindow.KeyCombination">
            <summary>
            This is KeyCombination internal class 
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.ColorChipTable">
            <summary>
            This is ColorChipTable Class. It is SingleTon.
            </summary>
            <code>
            ColorChipTable.Instance.GetColor("CC_Basic1100");
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.ColorChipTable.Instance">
            <summary>
            ColorChip instance (read-only) <br></br>
            Gets the current ColorChipTable object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ColorChipTable.GetColor(System.String)">
            <summary>
            You get directly Color value according to ColorChip
            </summary>
            <param name="colorChipName">ColorChip</param>
            <returns>Color value according to ColorChip</returns>
            <exception>You enter wrong colorchip</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.ColorChipTable.ExistColorChip(System.String)">
            <summary>
            You can know if there is ColorChip
            </summary>
            <param name="colorChipName">ColorChip</param>
            <returns>True - Exist ColorChip / False - Not Exist ColorChip</returns>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.ColorChipTable.UpdateColorChipTable(System.String)">
            <summary>
             User can update color chip table using json format file
            </summary>
            <param name="jsonFilePath"> It's json file path to update color chip</param>
            <version> 6.6.1 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.ColorChipTable.GetColor(System.String,System.String)">
            <summary>
            You get directly Color value according to ColorChip in theme.
            </summary>
            <param name="theme">Theme name</param>
            <param name="colorChipName">ColorChip name</param>
            <returns>Color value according to ColorChip</returns>
            <exception>You enter wrong colorchip</exception>
        </member>
        <member name="T:Tizen.NUI.FLUX.ResourceUtility">
            <summary>
            Utility Class for Flux Common Icon
            </summary>
            <code>
            string ret = ResourceUtility.GetCommonServiceResourcePath("TVPlus", "../icons/ChannelList/ch_icon_default_tvplus.png");
            </code>
            <version> 10.10.0 </version>
            <summary>
            Utility Class for Flux
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ResourceUtility.GetCommonServiceResourcePath(System.String,System.String)">
            <summary>
            A common icon is provided by the corresponding service, and the surrounding services allow easy access to the image path.
            </summary>
            <param name="serviceTag"> Service Tag Information </param>
            <param name="fileName"> File Name to Retrieve </param>
            <returns> File Path. If such path does not exist, return value is NULL. </returns>
            <version> 10.10.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.ResourceUtility.ResourceSizes">
            <summary>
            Size of CommonResource files
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ResourceUtility.ResourceSizes.Small">
            <summary>
             Small size of Common Resource
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ResourceUtility.ResourceSizes.Middle">
            <summary>
             Middle size of Common Resource
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ResourceUtility.ResourceSizes.Large">
            <summary>
             Large size of Common Resource
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.ResourceUtility.IsHighDimension">
            <summary>
             If user set true, check RW resource first.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.ResourceUtility.IsFlux">
             <summary>
             A flag to check flux application or not in GetCommonResourcePath. 
             this should be used in FLUX Component only
             </summary>
             <summary>
             ResourceUtility.IsFlux = true;
             </summary>
            
        </member>
        <member name="P:Tizen.NUI.FLUX.ResourceUtility.IsHighContrast">
            <summary>
            A flag to check Hicontrast Mode
            this should be used in FLUX Component only
            </summary>
            <summary>
            ResourceUtility.IsFlux = true;
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ResourceUtility.GetResourcePath(System.String,System.String)">
            <summary>
            Provide the app resource path name for flux.
            </summary>
            <param name="appId">appid</param>
            <param name="fileName">file name</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ResourceUtility.GetCommonResourcePath(System.String,Tizen.NUI.FLUX.ResourceUtility.ResourceSizes)">
            <summary>
            If you enter fileName , provide the common resource path.
            </summary>
            <code>
            imageBox.ResourceUrl  = ResourceUtility.GetCommonResourcePath("i_icon_function_apps");
             /* ResourceSize should be defined by UX document */
             imageBox.ResourceUrl = ResourceUtility.GetCommonResourcePath("i_icon_device_m_a",  ResourceSizes.Large);
            </code>
            <param name="fileName">Resource file name defined by UX Principle Guideline</param>
            <param name="size">File size defind by UX Guideline. Default is ResourceSizes.Middle. </param>
            <returns>CommonResource Path</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ResourceUtility.GetCommonResourcePath(System.String)">
            <summary>
            If you enter fileName , provide the common resource path.
            </summary>
            <code>
            imageBox.ResourceUrl  = ResourceUtility.GetCommonResourcePath("i_icon_function_apps");
            </code>
            <param name="fileName">Resource file name defined by UX Principle Guideline</param>
            <returns>CommonResource Path</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.ThemeHelper">
            <summary>
            This is ThemeHelper class.
            You can map object, proprety, colorchip in ThemeHelper.
            </summary>
            <code>
            ThemeHelper.Instance.MapColorChip(view, "BackgroundColor", "CC_Basic1100");
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.ThemeHelper.Instance">
            <summary>
            ThemeHelper instance (read-only) <br></br>
            Gets the current ThemeHelper object.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.ThemeHelper.CurrentTheme">
            <summary>
            If you want to change theme, you can call it.(Default - DARK_THEME)
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.ThemeHelper.ThemeChanged">
            <summary>
            When the theme is changed, it is called
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ThemeHelper.MapColorChip(Tizen.NUI.BaseComponents.View,System.String,System.String)">
            <summary>
            You map View, Property of View, ColorChip
            </summary>
            <param name="view">Object to apply colorChip</param>
            <param name="property">Property of object to apply colorchip</param>
            <param name="colorChip">Colorchip Name by UX</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.ThemeHelper.UnMapColorChip(Tizen.NUI.BaseComponents.View,System.String)">
            <summary>
            You unmap View, Property of View, ColorChip
            </summary>
            <param name="view">Object to apply colorChip</param>
            <param name="property">Property of object to apply colorchip</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.ThemeHelper.ClearColorChip(Tizen.NUI.BaseComponents.View)">
            <summary>
            Clear All property of View, Property of View, ColorChip
            </summary>
            <param name="view">Object to apply colorChip</param>
            <version> 8.8.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.ThemeHelper.ChangeColorchip(Tizen.NUI.BaseComponents.View,System.String,System.String)">
            <summary>
            You change ColorChip in property of View
            </summary>
            <param name="view">Object to apply colorChip</param>
            <param name="property">Property of object to apply colorchip</param>
            <param name="colorChip">Colorchip Name by UX</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.UIConfig">
            <summary>
            UIConfig provides information regarding UI related configuration such as resource, size, etc.
            Also, user can change some configuration based on ux guide.
            </summary>
            <code>    
            UIConfig.ScaleFactor = 1.0f;
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.UIConfig.ScaleFactor">
            <summary>
            Gets or sets the scale factor of an application.
            The scale factor changes physical size of unit on the screen. The default value is 1.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.UIConfig.UIRadius">
            <summary>
            UIPlate Radius value, it's Unit value.
            This value is product configurable value. The default value is 2 unit.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.UIConfig.WebpSupported">
            <summary>
            whether it's supporting webp
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.UIConfig.SupportPointingMode">
             <summary>
             configuration for pointing mode.
             </summary>
            <code>
             UIConfig.SupportPointingMode = PointingMode.SupportTouch; 
             </code>
             <version>10.10.0</version>
        </member>
        <member name="T:Tizen.NUI.FLUX.UIConfig.PointingMode">
            <summary>
            enum values for SupportPointingMode. 
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.UIConfig.PointingMode.SupportNone">
            <summary>
            Not Support pointing mode
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.UIConfig.PointingMode.SupportTouchOnly">
            <summary>
            Support Touch Only - in case of not supporting remote control
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.UIConfig.PointingMode.SupportPointing">
            <summary>
            Support all type like Touch/Mouse
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.UIConfig.UserDefinedAppID">
            <summary>
            This needs to be set if it has a different appid from the current appid.
            For example current app is com.samsung.tv.Tizen.TV.Filebrowser.Flip.Example.Decorator 
            but it uses resource under csapi-tv-filebrowser-flip 
            </summary>
            <version>10.10.2</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.UIConfig.IsFullSmart">
            <summary>
            configuration for Tizen Lite. false : Tizen Lite
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.MultiKeyDictionary`3">
            <summary>
            This is MultiKeyDictionary class 
            </summary>
            <typeparam name="K1">First Key</typeparam>
            <typeparam name="K2">Second Key</typeparam>
            <typeparam name="V">The value</typeparam>
        </member>
        <member name="T:Tizen.NUI.FLUX.XamlResourceUtility">
            <summary>
            Utility class for getting image resource paths in xaml file
            </summary>
            <code>
            XamlResourceUtility xamlResourceUtility = new XamlResourceUtility();
            xamlResourceUtility.AppID = "com.samsung.tv.coba.ambientcontentapp";
            xamlResourceUtility.FileName = "i_img_radiobutton_nf";
            string path = xamlResourceUtility.ProvideValue(new IServiceProviderImpl());
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.XamlResourceUtility.FileName">
            <summary>
            Name of the file which file path to be searched for
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.XamlResourceUtility.IsAppResource">
            <summary>
            Check app resource or common resource. In case of app resource, it is set to true.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.XamlResourceUtility.AppID">
            <summary>
            Application ID to be used for ResourceUtility.GetResourcePath(string appId, string fileName)
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.XamlResourceUtility.Size">
            <summary>
            Default size is ResourceSizes.Middle.for searching Common Resource Paths. Used for GetCommonResourcePath(string fileName, ResourceSizes size = ResourceSizes.Middle).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tizen.NUI.FLUX.XamlResourceUtility.ProvideValue(System.IServiceProvider)" -->
        <member name="M:Tizen.NUI.FLUX.XamlResourceUtility.Tizen#NUI#Xaml#IMarkupExtension#ProvideValue(System.IServiceProvider)">
            <summary>
            Default function of IMarkupExtension interface
            </summary>
            <param name="serviceProvider">Provides value for xaml</param>
            <returns>Resource path</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.UITaskManager">
            <summary>
            Singleton Class
            Schedules the UI task registered by user on Main thread based on Time Slicing and Priority scheduling approach.
            UITaskManager Manager object is accessible to worker thread also.
            Means Add/Remove public APIs can be called from worker thread also.
            </summary>
            <code>
            UITaskManager.GetInstance().Add(Callback, data as object, UITaskManager.Priority.High);
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.UITaskManager.FunctionCallback`1">
            <summary>
            Callback that user will register to be called in main thread
            </summary>
            <typeparam name="T"> generic type</typeparam>
            <param name="obj"> generic type object</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.UITaskManager.Priority">
            <summary>
            Task Priority
            High Priority task will be processed first, then Medium and then Low
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.UITaskManager.Priority.Low">
            <summary> Lowest priority /// </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.UITaskManager.Priority.Medium">
            <summary> Medium priority /// </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.UITaskManager.Priority.High">
            <summary> Highest priority /// </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.UITaskManager.Priority.Last">
            <summary> End of enum /// </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.UITaskManager.Instance">
            <summary>
            Gets the singleton of the UITaskManager instance
            </summary>
            <returns> UITaskManager singleton instance</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.Add``1(Tizen.NUI.FLUX.UITaskManager.FunctionCallback{``0},``0,Tizen.NUI.FLUX.UITaskManager.Priority)">
            <summary>
            Add task to be processed in main thread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"> Function to be called from main thread. It will get removed once it is called from main thread.</param>
            <param name="obj"> User data</param>
            <param name="priority"> Priority of task</param>
            <returns> Value greater than 0 if task successfully added, otherwise 0</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.Remove(System.UInt32)">
            <summary>
            Removes previously added task, if that task is not already processed
            </summary>
            <param name="id">id of task to be removed</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.IsTaskCurrentlyInQueue(System.UInt32)">
            <summary>
            Checks if the task with the given id is currently in the queue
            </summary>
            <param name="id">id of task to be checked</param>
            <returns>Returns true if the task is currently in the queue, false if already processed or not found</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.ForceInvokeTask(System.UInt32)">
            <summary>
            Forcefully invokes the task with the given id, if the task is currently in the queue
            </summary>
            <param name="id">id of task to be invoked</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.ConnectAppLifeCycleSignals">
            <summary>
            Connect App pause event, process all pending tasks when app Pause event is received.
            Connect App Terminate event, remove ecore idler callback when event reveived.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.UpdateEcoreIdlerTaskPriority">
            <summary>
            Update priority of Pending Mid and Low priority task, to prevent process starvation issue due to Priority scheduling.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.RenewEcoreIdlerCallback">
            <summary>
            ecore idler callback renew required or not
            </summary>
            <returns>true if renew required otherwise false</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.ProcessPendingTasks">
            <summary>
            Forcefully processes all pending tasks
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.OnEcoreIdlerCallback">
            <summary>
            Added as ecore idler callback. Called from main thread
            </summary>
            <returns> Returns true in case of pending task, if all task has been processed returns false</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.UITaskManager.GetNextFreeId">
            <summary>
            Returns unique id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.BlurCapture">
            <summary>
            Singleton class. Links BlurCapture to Dali Native side.
            </summary>
            <code>
            Initialize Singleton instance of BlurCapture
            BlurCapture.Instance.Initialize();
            Apply PostInitialize EventHandler
            BlurCapture.Instance.InitializeFinished += CreateBlurView;
            CreateBlurView
            blurView = new BlurView(BlurType.Dynamic);
            blurView.BlurStyle = BlurView.BlurViewStyle.Medium;
            blurView.UnitPosition = new UnitPosition(50, 50);
            blurView.UnitSizeWidth = 50;
            blurView.UnitSizeHeight = 50;
            blurView.AlternativeImageURL = CommonResource.GetLocalResourceURL() + "alter-img.jpg";
            blurView.AlphaMaskUrl = CommonResource.GetLocalResourceURL() + "AlphaMask.png";
            blurView.AlternativeDimColor = new Color(1.0f, 1.0f, 1.0f, 0.5f);
            blurView.DimmingLevel = 0.5f;
            Window.Instance.GetDefaultLayer().Add(blurView);
            blurView.Activate();
            blurView.Pause();
            blurView.Resume();
            blurView.Deactivate();
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.BlurCapture.States">
            <summary>
            Enumeration states for Native DSM Engine 
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurCapture.States.NotReady">
            <summary>
            DSM Engine is not ready.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurCapture.States.Initialized">
            <summary>
            DSM Engine is Initialized.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.BlurCapture.State">
            <summary>
            State of Native DSM Engine
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.BlurCapture.InitializeFinished">
            <summary>
            Add / Remove Post Initialization EventHandler 
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.BlurCapture.Instance">
            <summary>
            Returns the singleton instance of the BlurCapture
            </summary>
            <returns> BlurCapture singleton instance</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurCapture.Initialize">
            <summary>
            Initializes Blur Capture Asynchronously.
            Post initialization, user's registered InitializeFinished will be called if there is any.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.DisplayMetrics">
            <summary>
            DisplayMetrics class
            DisplayMetrics support the unit coordinate system and related utility
            </summary>
            <code>    
            int convertedValue = DisplayMetrics.Instance.UnitToPixel(unitSize);
            convertedValue = DisplayMetrics.Instance.PixelToUnit(pixelSize);
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.DisplayMetrics.Instance">
            <summary>
            DisplayMetrics class
            DisplayMetrics support the unit coordinate system and related utility
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.DisplayMetrics.UnitToPixel(System.Int32)">
            <summary>
            Convert from unit to pixel
            </summary>
            <param name="unit"> unit value </param>
            <returns> pixel value that is converted from unit </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.DisplayMetrics.PixelToUnit(System.Int32)">
            <summary>
            Convert from pixel to unit
            </summary>
            <param name="pixel"> pixel value </param>
            <returns> unit value that is converted from pixel </returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxSynchronizationContext">
            <summary>
            FluxSynchronizationContext class
            Provides the basic functionality for propagating a synchronization context in various synchronization models.
            </summary>
            <code>    
            FluxSynchronizationContext.ToUIThread.Post(callback, state);
            FluxSynchronizationContext.ToServiceThread.Post(callback, state);
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxSynchronizationContext.ToUIThread">
            <summary>
            Provides the basic functionality for propagating message to the UI Thread. 
            </summary>
            <code>    
            FluxSynchronizationContext.ToUIThread.Post(callback, state);
            FluxSynchronizationContext.ToUIThread.Send(callback, state);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxSynchronizationContext.ToUIThread.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to UI Thread.
            </summary>
            <param name="callback">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxSynchronizationContext.ToUIThread.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a synchronous message to UI Thread.
            </summary>
            <param name="callback">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxSynchronizationContext.ToServiceThread">
            <summary>
            Provides the basic functionality for propagating message to the Service(Main) Thread. 
            </summary>
            <code>    
            FluxSynchronizationContext.ToServiceThread.Post(callback, state);
            FluxSynchronizationContext.ToServiceThread.Send(callback, state);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxSynchronizationContext.ToServiceThread.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to Service(Main) Thread.
            </summary>
            <param name="callback">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxSynchronizationContext.ToServiceThread.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a synchronous message to Service(Main) Thread.
            </summary>
            <param name="callback">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.ImageBufferSafeHandle">
            <summary>
            ImageBufferSafeHandle class
            </summary>
            <code>
            ImageBufferSafeHandle handle = new ImageBufferSafeHandle(nativeHandle);
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.ImageBufferSafeHandle.IsInvalid">
            <summary>
            To check if the handle is valid or not
            </summary>
            <returns>if it is false, the safehandle is invalid</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBufferSafeHandle.ReleaseHandle">
            <summary>
            Function overriding to define how to release the internal native handle
            </summary>
            <returns> if it succeed, the function will retrive true</returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.ImageBuffer">
            <summary>
            Application can use raw buffer data of image. \n 
            ImageBuffer load Image internally, and provide Image manipulation operation.
            like flip, Rotate and Encode to File.
            </summary>
            <code>
             imageBuffer = new ImageBuffer("a.jpg");
             imageBuffer.Rotate(RotationType.Rotate90);
             imageBuffer.Flip(FlipType.Horizontal);
             imageView.SetImageBuffer(imageBuffer);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.#cctor">
            <summary>
            It is called automatically before the first instance is created or any static members are referenced.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.#ctor(System.String)">
            <summary>
            Constructor to instantiate the ImageBuffer class. Can add image url
            You can't change url in runtime.
            </summary>
            <param name="url"> The url is that you want to apply Imagebuffer function </param>
            <exception cref='T:System.ArgumentException'>
            Image Path is wrong. Check your image Path
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.#ctor(System.Byte[],System.UInt32,System.UInt32,System.UInt32,Tizen.NUI.PixelFormat)">
            <summary>
            Constructor to instantiate the ImageBuffer class. Can set image buffer
            </summary>
            <version> 6.6.0 </version>
            <param name="buffer"> The buffer is that you want to set in Imagebuffer function </param>
            <param name="bufferSize"> Size of the buffer </param>
            <param name="width"> Width of  image </param>
            <param name="height"> Height of  image </param>
            <param name="pixelFormat"> Pixel Format of image </param>
            <exception cref="T:System.ArgumentNullException"> Thrown when the user input parameters are null</exception> 
            <exception cref="T:System.ArgumentException"> Thrown when the user input parameters are wrong</exception> 
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.#ctor(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,Tizen.NUI.PixelFormat,Tizen.NUI.FLUX.ReleaseFunction,System.Boolean)">
            <summary>
            Constructor to instantiate the ImageBuffer class. Can set image buffer
            </summary>
            <version> 6.6.0 </version>
            <param name="buffer"> The buffer is that you want to set in Imagebuffer function </param>
            <param name="bufferSize"> Size of the buffer </param>
            <param name="width"> Width of  image </param>
            <param name="height"> Height of  image </param>
            <param name="pixelFormat"> Pixel Format of image </param>
            <param name="releaseFunction"> ReleaseFunction to free the buffer. If application has allocated memory using malloc then free and if
            memory is allocated using new then delete. </param>
            <param name="clone"> If true ownership of buffer is with application and it should release the buffer to prevent memory leak.
            If false ownership of buffer is transferred to  Imagebuffer(i.e NUI), therefore buffer should not be modified and released by application.</param>
            <exception cref="T:System.ArgumentNullException"> Thrown when the user input parameters are null</exception> 
            <exception cref="T:System.ArgumentException"> Thrown when the user input parameters are wrong</exception> 
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.GetSize">
            <summary>
            Get size width and height of Image.
            </summary>
            <returns> Size2D width and height of Image</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.GetPixelFormat">
            <summary>
            Get PixelFormat of Image.
            </summary>
            <returns> PixelFormat of Image.</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.GetBytePerPixel">
            <summary>
            Get BytePerPixel of Image.
            </summary>
            <returns> BytePerPixel of Image.</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.SaveToFile(System.String)">
            <summary>
            EncodeToFile Save the manipulated pixel buffer to . The two valid encoding are (".jpeg"|".jpg") and ".png".
            </summary>
            <param name="filePath"> filename Identify the filesytem location at which to write the encoded image. </param>
            <exception cref='T:System.InvalidOperationException'>
            Can't save file, check filePath
            </exception>
            <returns>Ture is success that save image file. False isn't </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.GetBuffer">
            <summary>
            Get raw pixel buffer
            </summary>
            <returns>The pixel buffer, or NULL.</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.GetTextureUrl">
            <summary>
            texture URL of image texture.
            </summary>
            <returns>texture URL</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.Flip(Tizen.NUI.FLUX.FlipType)">
            <summary>
            Flip the image according to FlipType.
            </summary>
            <param name="flipType"> flip type are VERTICAL, HORIZONTAL </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.Rotate(Tizen.NUI.FLUX.RotationType)">
            <summary>
            Rotate the image according to RotationType.
            </summary>
            <param name="rotateType"> rotation are 0, 90, 180 and 270 in Counterclockwise direction </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.Scale(System.UInt32,System.UInt32,Tizen.NUI.FLUX.Interpolation)">
            <summary>
            Scale the image according to Interpolation Type.
            </summary>
            <version> 6.6.0 </version>
            <param name="scaledWidth"> width for scaled Image </param>
            <param name="scaledHeight"> height for scaled Image </param>
            <param name="interpolationType">Interpolation type for scaling operation</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.BoxFilterBlur(System.UInt32,System.Single)">
            <summary>
            Perform Fast Box Blur on the image.
            </summary>
            <param name="kernelSize">The size of the blur kernel (number of samples).</param>
            <param name="downSampleScale">The scale factor applied during the blur process</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageBuffer.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Cleaning up managed and unmanaged resources 
            </summary>
            <param name="type">Disposing type</param>       
        </member>
        <member name="T:Tizen.NUI.FLUX.ImageColorPickAsync">
            <summary>
            This is delegate of ImageColorPickAsyncDelegate, It provides path of image, color value(R,G,B,A)
            </summary>
            <param name="imagePath">Path of Image file for image color pick</param>
            <param name="color">Return Average color of image </param>
        </member>
        <member name="T:Tizen.NUI.FLUX.ImageColorPicker">
            <summary>
            ImageColorPicker class which enables user to obtain the arerage colour in image.
            </summary>
            <code> 
            //Sync mode
            Color color = ImageColorPicker.Instance.GetImageColorPick(imagePath);
            //Async mode
            private ImageColorPickAsyncDelegate imageColorPickDel;
            imageColorPickDel = new ImageColorPickAsyncDelegate(Imagefunc);
            ImageColorPicker.Instance.GetImageColorPickAsync(imagepath, imageColorPickDel);
            private void Imagefunc(string imagePath, Color color)
            {
                string userimagepath = imagePath;
                Color usercolor = color;
            }
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageColorPicker.#ctor">
            <summary>
            Constructor to instantiate the ImageColorPicker class.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.ImageColorPicker.Instance">
            <summary>
            ImageColorPicker instance (read-only) <br></br>
            Gets the current ImageColorPicker object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageColorPicker.GetImageColorPick(System.String)">
            <summary>
            Get average color of image in Sync mode.
            </summary>
            <param name="imagePath">Path of Image file for image color pick</param>
            <exception cref="T:System.ArgumentNullException">
            ImagePath is Null, You need to add imagePath.
            </exception>
            <returns>[Color] Average color of image </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageColorPicker.GetImageColorPick(System.String,Tizen.NUI.Rectangle)">
            <summary>
            Get average color of image in Sync mode. If you want to pick specific area, you can set rectangle area. 
            </summary>
            <param name="imagePath">Path of Image file for image color pick</param>
            <param name="rect"> Rectangle object you want to pick color. This area is related with Original size of Image </param>
            <exception cref="T:System.ArgumentNullException">
            ImagePath is Null, You need to add imagePath.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Rectangle is Null.
            </exception>
            <returns>[Color] Average color of image </returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageColorPicker.GetImageColorPickAsync(System.String,Tizen.NUI.FLUX.ImageColorPickAsync)">
            <summary>
            Get average color of image in Async mode. 
            </summary>
            <param name="imagePath">Path of Imagefile for image color pick</param>
            <param name="imageColorPickAsyncDel"> This hanlder to be called when get image color in async mode </param>
            <exception cref="T:System.ArgumentNullException">
            ImagePath is Null, You need to add imagePath.
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImageColorPicker.GetImageColorPickAsync(System.String,Tizen.NUI.FLUX.ImageColorPickAsync,Tizen.NUI.Rectangle)">
            <summary>
            Get average color of image in Async mode. If you want to pick specific area, you can set rectangle area. 
            </summary>
            <param name="imagePath">Path of Imagefile for image color pick</param>
            <param name="imageColorPickAsyncDel"> This hanlder to be called when get image color in async mode </param>
            <param name="rect"> Rectangle object you want to pick color. This area is related with Original size of Image </param>
            <exception cref="T:System.ArgumentNullException">
            ImagePath is Null, You need to add imagePath.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Rectangle is Null.
            </exception>
        </member>
        <member name="T:Tizen.NUI.FLUX.MathUtil">
            <summary>
            MathUtil class
            </summary>
            <code>
            float a = MathUtil.Clamp(value, 10.0f, 1.0f);;
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.RestrictedModeManager">
            <summary>
            the class to mange RestrictedMode
            </summary>
            <code>
            RestrictedModeManager.Instance.RestrictedMode = RestrictedModeManager.RestrictedModes.FatalLog;
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.RestrictedModeManager.RestrictedModes">
            <summary>
            enum for restricted mode
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RestrictedModeManager.RestrictedModes.ModeNone">
            <summary>
            Do nothing for invalid operation
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RestrictedModeManager.RestrictedModes.FatalLog">
            <summary>
            print dlog with backtrace
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RestrictedModeManager.RestrictedModes.Exception">
            <summary>
            throw InvalidOperationException
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.RestrictedModeManager.Instance">
            <summary>
            RestrictedModeManager instance (read only)
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.RestrictedModeManager.RestrictedMode">
            <summary>
            RestrictionMode (default - RestrictedModeNone)       
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.VideoColorPicker">
            <summary>
            VideoColorPicker class which enables user to obtain the most dominant colour in the user defiend area of video.
            </summary>
            <code>
            videoColorPicker = new VideoColorPicker();                   
            videoColorPicker.PickingArea = new Rect(100, 100, 200, 200);
            videoColorPicker.ColorPicked += VideoColorPicker_ColorPicked;
            videoColorPicker.Start();                                    
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.VideoColorPicker.ColorReceivedEventHandler">
            <summary>
            Delegate for ColorPicked event
            </summary>
            <param name="red">the red component at the picked color</param>
            <param name="green">the green component at the picked color</param>
            <param name="blue">the blue component at the picked color</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.VideoColorPicker.Rect">
            <summary>
            Struct for setting the area of a rect
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.VideoColorPicker.Rect.x">
            <summary>
            x coordinate of the area.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.VideoColorPicker.Rect.y">
            <summary>
            y coordinate of the area.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.VideoColorPicker.Rect.w">
            <summary>
            Width of the area
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.VideoColorPicker.Rect.h">
            <summary>
            Height of the area
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoColorPicker.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setting Area of a rect.
            </summary>
            <param name="x">x coordinate of the area.</param>
            <param name="y">y coordinate of the area.</param>
            <param name="width">Width of the area</param>
            <param name="height">Height of the area</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoColorPicker.#ctor">
            <summary>
            Constructor to instantiate the VideoColorPicker class.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoColorPicker.PickingArea">
            <summary>
            Set/Get the Area of a rectangle
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoColorPicker.IsRunning">
            <summary>
            Tells whether color pick service is running.
            </summary>
            <returns>Whether color pick service is started or not</returns>
        </member>
        <member name="E:Tizen.NUI.FLUX.VideoColorPicker.ColorPicked">
            <summary>
            ColorPicked Event occurs periodically with the dominant colour value. 
            </summary>        
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoColorPicker.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Cleaning up managed and unmanaged resources 
            </summary>
            <param name="type">Disposing type</param>             
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoColorPicker.Start">
            <summary>
            Start picking the most dominant colour from the video source.
            </summary>        
            <exception cref='T:System.OutOfMemoryException'>
            Throw failed if there is insufficient memory to satisfy the request.
            </exception>
            <exception cref="T:System.ArgumentException">
            Throw failed when the input structure is a reference type that is not a formatted class
            </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoColorPicker.Stop">
            <summary>
            Stop picking the most dominant colour from the video source.
            </summary>        
        </member>
        <member name="T:Tizen.NUI.FLUX.CustomShape">
            <summary>
            Custom Shape is a class for drawing shape using vector paths.
            </summary>
            <code>
            vectorPrimitiveView = new VectorPrimitiveView();
            vectorPrimitiveView.Size2D = new Size2D(100, 100);
            Stroke strokeStyle = new Stroke(new SolidColor(Color.Blue), 1);
            Fill fillStyle = new Fill(new SolidColor(Color.Red));
            CustomShape customShape = new CustomShape(strokeStyle, fillStyle);
            customShape.MoveTo(new Position2D(0, 0));
            customShape.LineTo(new Position2D(100, 0));
            customShape.LineTo(new Position2D(100, 100));
            customShape.LineTo(new Position2D(0, 100));
            customShape.Close();
            vectorPrimitiveView.SetShape(customShape);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.CustomShape.#ctor(Tizen.NUI.FLUX.Stroke,Tizen.NUI.FLUX.Fill)">
            <summary>
            CustomShape Constructor
            </summary>
            <param name="strokeStyle">Style for drawing stroke of shape</param>
            <param name="fillStyle">Style for drawing fill of shape</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.CustomShape.MoveTo(Tizen.NUI.Vector2)">
            <summary>
            Add a MoveTo command
            </summary>
            <param name="p">Position to be moved to</param>
            <exception cref="T:System.ArgumentNullException">Thrown when p instance is null</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.CustomShape.LineTo(Tizen.NUI.Vector2)">
            <summary>
            Add a LineTo command
            </summary>
            <param name="p">Position of the end of the line.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when p instance is null.</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.CustomShape.BezierTo(Tizen.NUI.Vector2,Tizen.NUI.Vector2,Tizen.NUI.Vector2)">
            <summary>
            Add a BezierTo command
            </summary>
            <param name="cp1">Control Point 1</param>
            <param name="cp2">Control Point 2</param>
            <param name="end">End Point of the Bezeier Curve</param>
            <exception cref="T:System.ArgumentNullException">Thrown when cp1, cp2 or end instances are null.</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.CustomShape.ArcTo(Tizen.NUI.Vector2,System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Add a ArcTo command
            </summary>
            <param name="centerPoint">Center Point of Arc</param>
            <param name="radiusX">Radius X of Arc</param>
            <param name="radiusY">Radius Y of Arc</param>
            <param name="startAngle">Start angle of Arc</param>
            <param name="endAngle">End angle of Arc</param>
            <param name="clockwiseDirection">Clockwise direction of Arc</param>
            <exception cref="T:System.ArgumentNullException">Thrown when centerPoint instance is null.</exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.CustomShape.Close">
            <summary>
            Add a Close command
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.EllipseShape">
            <summary>
            Add an elliptical shape to the view
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.EllipseShape.#ctor(Tizen.NUI.FLUX.Stroke,Tizen.NUI.FLUX.Fill)">
            <summary>
            Constructor
            </summary>
            <param name="strokeStyle">Style for drawing stroke of shape</param>
            <param name="fillStyle">Style for drawing fill of shape</param>
            <code>
            vectorPrimitiveView = new VectorPrimitiveView();
            vectorPrimitiveView.Size2D = new Size2D(100, 100);
            Fill fillStyle = new Fill(new SolidColor(Color.Red));
            EllipseShape ellipseShape = new EllipseShape(null, fillStyle);
            vectorPrimitiveView.SetShape(ellipseShape);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.EllipseShape.Draw(Tizen.NUI.FLUX.VectorView)">
             <summary>
            
             </summary>
             <param name="view"></param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Fill">
            <summary>
            Fill is a class for fill Attributes
            </summary>
            <code>
            Fill fillStyle = new Fill(new SolidColor(Color.Red));
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.Fill.PathFillType">
            <summary>
            Describes the order of filling paths
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Fill.PathFillType.EvenOdd">
            <summary>
             Specifies that "inside" is computed by an odd number of edge crossings.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Fill.PathFillType.Winding">
            <summary>
             Specifies that "inside" is computed by a non-zero sum of signed edge crossings.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Fill.#ctor(Tizen.NUI.FLUX.Paint,Tizen.NUI.FLUX.Fill.PathFillType)">
             <summary>
            
             </summary>
             <param name="paintColor"></param>
             <param name="fillType"></param>
        </member>
        <member name="P:Tizen.NUI.FLUX.Fill.FillType">
            <summary>
            Specifies the winding rule to fill the shape
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Fill.PaintColor">
            <summary>
            Paint Color to use in the style
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.GradientColor">
            <summary>
            GradientEffect is a class for Gradient specs.
            </summary>
            <code>
            LinearGradientColor gradientColor = new LinearGradientColor(new Position2D(100, 0), new Position2D(100, 100));
            gradientColor.AddGradientStop(new ColorStops(Color.Red, 0));
            gradientColor.AddGradientStop(new ColorStops(Color.Green, 0.5f));
            gradientColor.AddGradientStop(new ColorStops(Color.Blue, 1));
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.GradientColor.Style">
            <summary>
            Describes Type of Style present (Linear/Gradient)
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.GradientColor.Style.Linear">
            <summary>
            Linear Style Gradient
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.GradientColor.Style.Radial">
            <summary>
            Linear Style Gradient
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.GradientColor.AddGradientStop(Tizen.NUI.FLUX.ColorStops)">
            <summary>
            Gradient color stop
            </summary>
            <param name="color"> Represents a Gradient Point</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.ImagePaint">
            <summary>
            ImagePaint is a class for painting texture in VG shapes
            </summary>
            <code>
            ImagePaint ip = new ImagePaint(url);
            ip.FittingMode = FittingModeType:ScaleToFill;
            Fill fill = new Fill(ip);   
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.ImagePaint.FittingModeType">
            <summary>
            This specifies fitting mode types. Fitting options, used when resizing images
            to fit desired dimensions. A fitting mode controls the region of a loaded image
            to be mapped to the desired image rectangle.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ImagePaint.FittingModeType.ShrinkToFit">
            <summary>
            Limit loaded image resolution to device resolution
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ImagePaint.FittingModeType.ScaleToFill">
            <summary>
            Limit loaded image resolution to screen tile
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ImagePaint.FittingModeType.FitWidth">
            <summary>
            Limit loaded image resolution to column width
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ImagePaint.FittingModeType.FitHeight">
            <summary>
            Limit loaded image resolution to row height
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.ImagePaint.FittingModeType.Fill">
            <summary>
            Load complete image in the view, Aspect ratio will not be maintained
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImagePaint.#ctor(System.String)">
            <summary>
            Create a new texture paint object for applying on VG shape
            </summary>
            <param name="url"> Texture url to be shown in shape </param>
            <exception cref="T:System.ArgumentException">Thrown when Resource url does not exist. 
            but exception will not be thrown and default image will be shown since Tizen 9.9.0 </exception>
        </member>
        <member name="P:Tizen.NUI.FLUX.ImagePaint.FittingMode">
            <summary>
            Texture fitting mode
            default mode is FittingModeType.ScaleToFill
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.ImagePaint.URL">
            <summary>
            Texture URL
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.ImagePaint.BackgroundColor">
            <summary>
            Background Color of the Paint
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.ImagePaint.TextureRect">
            <summary>
            Set custom texture rectangle in UV space
            value between 0.0f - 1.0f
            default value is (0.0f, 0.0f, 1.0f, 1.0f)
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ImagePaint.Draw(Tizen.NUI.FLUX.VectorView)">
             <summary>
            
             </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.LinearGradientColor">
            <summary>
            Linear Gradient is a class for Gradient specs.
            </summary>
            <code>
            LinearGradientColor gradientColor = new LinearGradientColor(new Vector2(100, 100), new Vector2(100, 0));
            gradientColor.AddGradientStop(new ColorStops(Color.Red, 0));
            gradientColor.AddGradientStop(new ColorStops(Color.Blue, 0.5f));
            gradientColor.AddGradientStop(new ColorStops(Color.Green, 1));
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.LinearGradientColor.#ctor(Tizen.NUI.Vector2,Tizen.NUI.Vector2)">
            <summary>
            Constructor for the Linear Gradient Effect
            </summary>
            <param name="start">Point at which gradient effect Starts</param>
            <param name="end"> Point at which gradient effect Ends</param>
            <exception cref="T:System.ArgumentNullException">Thrown when start or end instance is null.</exception>
        </member>
        <member name="P:Tizen.NUI.FLUX.LinearGradientColor.StartPoint">
            <summary>
            Point at which gradient effect Starts
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.LinearGradientColor.EndPoint">
            <summary>
            Point at which gradient effect Ends
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Dash">
            <summary>
            Specifies the dash attribute
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Dash.#ctor(System.Single,System.Single)">
            <summary>
            Constructor for Dash
            </summary>
            <param name="length">Length of each segment</param>
            <param name="interval">interval between 2 dash segments</param>
            <exception cref="T:System.ArgumentException">Thrown when length or interval of dash is negative.</exception>
        </member>
        <member name="P:Tizen.NUI.FLUX.Dash.Length">
            <summary>
            Length of each segment
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Dash.Interval">
            <summary>
            interval between 2 dash segments
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.ColorStops">
            <summary>
            Represents a Gradient Point
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.ColorStops.#ctor(Tizen.NUI.Color,System.Single)">
            <summary>
            Constructor for Gradient Color
            </summary>
            <param name="color">Color at the gradient stop</param>
            <param name="position">Position of the gradient stop</param>
            <exception cref="T:System.ArgumentNullException">Thrown when color instance is null.</exception>
        </member>
        <member name="P:Tizen.NUI.FLUX.ColorStops.Color">
            <summary>
            Color at the gradient stop
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.ColorStops.Position">
            <summary>
            Position of the gradient stop
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Paint">
            <summary>
            PaintEffect is a class for Gradient specs.
            </summary>
            <code>
            SolidColor red = new SolidColor(Color.Red);
            Fill fillStyle = new Fill(red);
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.RadialGradientColor">
            <summary>
            Radial Gradient is a class for Gradient specs.
            </summary>
            <code>
            RadialGradientColor gradientColor = new RadialGradientColor(new Position2D(100, 100), 100, new Position2D(100, 100), 0.0f);
            gradientColor.AddGradientStop(new ColorStops(Color.Red, 0.0f));
            gradientColor.AddGradientStop(new ColorStops(Color.Blue, 1.0f));
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.RadialGradientColor.#ctor(Tizen.NUI.Vector2,System.Single,Tizen.NUI.Vector2,System.Single)">
            <summary>
            Creates a new radial gradient between the two circles.
            </summary>
            <param name="startCenter">Center of the start circle</param>
            <param name="endCenter">Center of the end circle</param>
            <param name="startRadius">Radius of the start circle</param>
            <param name="endRadius">Radius of the end circle</param>
            <exception cref="T:System.ArgumentNullException">Thrown when startCenter instance is null.</exception>
        </member>
        <member name="P:Tizen.NUI.FLUX.RadialGradientColor.StartCenter">
            <summary>
            Center of the Start circle
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.RadialGradientColor.EndCenter">
            <summary>
            Center of the End circle
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.RadialGradientColor.StartRadius">
            <summary>
            Radius of the Start circle
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.RadialGradientColor.EndRadius">
            <summary>
             Radius of the End circle
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.RectShape">
            <summary>
            Rect reoresents a Rectabgle Shape Object
            </summary>
            <code>
            vectorPrimitiveView = new VectorPrimitiveView();
            vectorPrimitiveView.Size2D = new Size2D(100, 100);
            Stroke strokeStyle = new Stroke(new SolidColor(Color.Blue), 3);
            Fill fillStyle = new Fill(new SolidColor(Color.Red));
            RectShape rectShape = new RectShape(strokeStyle, fillStyle);
            vectorPrimitiveView.SetShape(rectShape);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.RectShape.#ctor(Tizen.NUI.FLUX.Stroke,Tizen.NUI.FLUX.Fill)">
            <summary>
            Create a new Rectangle Shape to be added to NUI Canvas
            </summary>
            <param name="strokeStyle">Style for drawing stroke of shape</param>
            <param name="fillStyle">Style for drawing fill of shape</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.RectShape.Draw(Tizen.NUI.FLUX.VectorView)">
             <summary>
            
             </summary>
             <param name="view"></param>
        </member>
        <member name="T:Tizen.NUI.FLUX.RoundRectShape">
            <summary>
            Rounded Rectangle is a Shape to be added to NUICanvas
            </summary>
            <code>
            vectorPrimitiveView = new VectorPrimitiveView();
            vectorPrimitiveView.Size2D = new Size2D(100, 100);
            Stroke strokeStyle = new Stroke(new SolidColor(Color.Red), 1);
            Fill fillStyle = new Fill(new SolidColor(Color.Blue));
            RoundRectShape roundRectShape = new RoundRectShape(5, 5, strokeStyle, fillStyle);
            vectorPrimitiveView.SetShape(roundRectShape);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.RoundRectShape.#ctor(System.Int32,System.Int32,Tizen.NUI.FLUX.Stroke,Tizen.NUI.FLUX.Fill)">
            <summary>
            Create a new Rounded Rectangle Shape to be added to VectorPrimitiveView
            </summary>
            <param name="xRadius">X-Axis Radius</param>
            <param name="yRadius">Y-Axis Radius</param>
            <param name="strokeStyle">Style for drawing stroke of shape</param>
            <param name="fillStyle">Style for drawing fill of shape</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.RoundRectShape.#ctor(Tizen.NUI.Vector2[],Tizen.NUI.FLUX.Stroke,Tizen.NUI.FLUX.Fill)">
            <summary>
            Radius of each vertex given in clockwise direction starting from top-left position
            i.e. 0 : topleft, 1 : top-right, 2 : bottom-left, 3 : bottom-left
            </summary>
            <param name="radiusArr"></param>
            <param name="strokeStyle"></param>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.RoundRectShape.Draw(Tizen.NUI.FLUX.VectorView)">
             <summary>
            
             </summary>
             <param name="view"></param>
        </member>
        <member name="T:Tizen.NUI.FLUX.Shape">
            <summary>
            Shape is an abstract class for Shape Drawing.
            </summary>
            <code>
            vectorPrimitiveView = new VectorPrimitiveView();
            vectorPrimitiveView.Size2D = new Size2D(100, 100);
            Stroke strokeStyle = new Stroke(new SolidColor(Color.Blue), 3);
            Fill fillStyle = new Fill(new SolidColor(Color.Red));
            RectShape rectShape = new RectShape(strokeStyle, fillStyle);
            vectorPrimitiveView.SetShape(rectShape);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.Shape.#ctor(Tizen.NUI.FLUX.Stroke,Tizen.NUI.FLUX.Fill)">
            <summary>
            Create a new shape to be used in Vector View
            </summary>
            <param name="strokeStyle">Describes the style of Stroke</param>
            <param name="fillStyle">Describes the style for Fill</param>
        </member>
        <member name="P:Tizen.NUI.FLUX.Shape.StrokeStyle">
            <summary>
            Represents the Paint bound for the Shape
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Shape.FillStyle">
            <summary>
            Represents the Paint bound for the Shape
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.SolidColor">
            <summary>
            Solid Effect is a class for setting solid color in Paint.
            </summary>
            <code>
            SolidColor blue = new SolidColor(Color.Blue);
            Fill fillStyle = new Fill(blue);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.SolidColor.#ctor(Tizen.NUI.Color)">
            <summary>
            Create a new solid color pattern for paint to be applied on a shape
            </summary>
            <param name="color">Solid Color of the Paint</param>
        </member>
        <member name="P:Tizen.NUI.FLUX.SolidColor.Color">
            <summary>
            Solid Color of the Paint
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Stroke">
            <summary>
            Stroke is a class for stroke Attributes
            </summary>
            <code>
            Stroke strokeStyle = new Stroke(new SolidColor(Color.Blue), 3);
            </code>
        </member>
        <member name="T:Tizen.NUI.FLUX.Stroke.Cap">
            <summary>
            Describes the CapStyle of the Stroke
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Stroke.Cap.Flat">
            <summary>
            Begin/end contours with no extension.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Stroke.Cap.Round">
            <summary>
            Begin/end contours with a semi-circle extension.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Stroke.Cap.Square">
            <summary>
            Begin/end contours with a half square extension.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Stroke.Cap.Triangle">
            <summary>
            Begin/end contours with a half triangle extension.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.Stroke.Join">
            <summary>
            Describes the Joining of two strokes. This is the treatment that is applied to corners in paths and rectangles.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Stroke.Join.Miter">
            <summary>
            Connect path segments with a sharp join.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Stroke.Join.Round">
            <summary>
            Connect path segments with a round join.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Stroke.Join.Bevel">
            <summary>
             Connect path segments with a flat bevel join.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.Stroke.Join.MiterOrBevel">
            <summary>
             Connect path segments with a sharp/flat bevel join.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Stroke.#ctor(Tizen.NUI.FLUX.Paint,System.UInt32,Tizen.NUI.FLUX.Stroke.Cap,Tizen.NUI.FLUX.Stroke.Join,System.Collections.Generic.List{Tizen.NUI.FLUX.Dash})">
            <summary>
            Constructor
            </summary>
            <param name="paintColor">Paint Color to use</param>
            <param name="width">Width of the Stroke</param>
            <param name="strokeCap">CapStyle to be used at the end of open subpaths</param>
            <param name="strokeJoin">LineJoin to be used for the stroke</param>
            <param name="dashList">List of dashes if the stroke is to be dashed</param>
            <exception cref="T:System.ArgumentNullException">Thrown when paintColor instance is null.</exception>
        </member>
        <member name="P:Tizen.NUI.FLUX.Stroke.StrokeWidth">
            <summary>
            Width of the Stroke
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Stroke.CapStyle">
            <summary>
            CapStyle to be used for the stroke
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Stroke.JoinStyle">
            <summary>
            LineJoin to be used for the stroke
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.Stroke.PaintColor">
            <summary>
            Paint Color to use in the style
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.Stroke.SetDashes(System.Collections.Generic.List{Tizen.NUI.FLUX.Dash})">
            <summary>
            Set a dash list for applying dashes to stroke
            </summary>
            <param name="dashList">Dash list of stroke</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.RenderBackend">
             <summary>
            
             </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RenderBackend.DirectRenderer">
            <summary>
            Direct GL Rendering
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.RenderBackend.CairoRenderer">
            <summary>
            Cairo SW Rendering
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.VectorProperties">
            <summary>
            Describes the Attributes used in Vector Objects
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.VectorProperties.PaintStyle">
            <summary>
            Enumeration for CanvasCapStyle
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.VectorProperties.ColorToInt(Tizen.NUI.Color)">
             <summary>
            
             </summary>
             <param name="color"></param>
             <returns></returns>
        </member>
        <member name="T:Tizen.NUI.FLUX.BlurView">
            <summary>
            BlurView allows user to blur Video or Graphic Content under the area
            </summary>
            <code>
            Create BlurView
            blurView = new BlurView(BlurType.Dynamic);
            blurView.UnitPosition = new UnitPosition(50, 50);
            blurView.UnitSizeWidth = 50;
            blurView.UnitSizeHeight = 50;
            blurView.AlternativeImageURL = CommonResource.GetLocalResourceURL() + "alter-img.jpg";
            blurView.AlphaMaskUrl = CommonResource.GetLocalResourceURL() + "AlphaMask.png";
            Window.Instance.GetDefaultLayer().Add(blurView);
            blurView.Activate();
            blurView.Pause();
            blurView.Resume();
            blurView.Deactivate();
            </code>
            <summary>
            BlurView allows user to blur Video or Graphic Content under the area
            </summary>
            <code>
            Create BlurView
            blurView = new BlurView(BlurType.Dynamic);
            blurView.BlurStyle = BlurView.BlurViewStyle.Medium;
            blurView.UnitPosition = new UnitPosition(50, 50);
            blurView.UnitSizeWidth = 50;
            blurView.UnitSizeHeight = 50;
            blurView.AlternativeImageURL = CommonResource.GetLocalResourceURL() + "alter-img.jpg";
            blurView.AlphaMaskUrl = CommonResource.GetLocalResourceURL() + "AlphaMask.png";
            blurView.AlternativeDimColor = new Color(1.0f, 1.0f, 1.0f, 0.5f);
            blurView.DimmingLevel = 0.5f;
            Window.Instance.GetDefaultLayer().Add(blurView);
            blurView.Activate();
            blurView.Pause();
            blurView.Resume();
            blurView.Deactivate();
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.BlurTypeProperty">
            <summary>
            BindableProperty for BlurType, it's used as an argument of SetBinding API to bind a value to BlurView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.BlurStyleProperty">
            <summary>
            BindableProperty for BlurStyle, it's used as an argument of SetBinding API to bind a value to BlurView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.AlternativeResourceUrlProperty">
            <summary>
            BindableProperty for AlternativeResourceUrl, it's used as an argument of SetBinding API to bind a value to BlurView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.AlphaMaskUrlProperty">
            <summary>
            BindableProperty for AlphaMaskUrl, it's used as an argument of SetBinding API to bind a value to BlurView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.AlternativeDimColorProperty">
            <summary>
            BindableProperty for Alternative Dim color, it's used as an argument of SetBinding API to bind a value to BlurView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.DimmingLevelProperty">
            <summary>
            BindableProperty for Dimming Level, it's used as an argument of SetBinding API to bind a value to BlurView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurView.#ctor(Tizen.NUI.FLUX.BlurView.BlurViewType,Tizen.NUI.FLUX.BlurView.BlurViewStyle)">
            <summary>
            BlurView Constructor
            </summary>
            <param name = "type">BlurView Type. You can choose the type by considering the blurred target object.</param>
            <param name = "style">BlurView Style. Blurring Algorithm can be affected by the style. </param>
            <remarks>
            The BlurViewStyle default value changed to Medium. Sinsce 9.9.0.
            Downloadable apps must explicitly set the BlurViewStyle.
            </remarks>
        </member>
        <member name="P:Tizen.NUI.FLUX.BlurView.Intensity">
            <summary>
            Set/Get Blur Intensity
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.BlurView.BlurViewType">
            <summary>
            Enumerator for blur view type. 
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.BlurViewType.Static">
            <summary>
            Type that blurs Static Content
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.BlurViewType.Dynamic">
            <summary>
            Type that blurs Non-Static Content
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.BlurView.BlurViewStyle">
            <summary>
            Enumerator for blur algorithm style
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.BlurViewStyle.Light">
            <summary>
            Light Blur Style
            </summary>            
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.BlurViewStyle.Medium">
            <summary>
            Medium Blur Intensity (Default).
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.BlurView.BlurViewStyle.Heavy">
            <summary>
            Heavy Blur Intensity
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurView.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release Native Handle
            </summary>        
            <param name="swigCPtr">HandleRef object holding corresponding native pointer.</param>
            <version>9.9.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Cleaning up managed and unmanaged resources 
            </summary>
            <param name = "type">Disposing type</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurView.Resume">
            <summary>
             Resumes Capturing and Blurring of frames
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurView.Pause">
            <summary>
             Pauses Capturing and Blurring of frames
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurView.Activate">
            <summary>
            Activate Blur
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurView.Activate(System.Boolean)">
            <summary>
            Activate with capture result store mode
            </summary>
            <remarks>
            It is not common feature. It is eden ux scenario dependent.                
            </remarks>
            <version> 10.10.1 </version>
            <param name="enableCaptureStore"> Enable store capture result </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurView.Deactivate">
            <summary>
            Deactivate Blur
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.BlurView.BlurType">
            <summary>
            BlurView Type 
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.BlurView.BlurStyle">
            <summary>
            BlurView Style
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.BlurView.AlternativeResourceUrl">
            <summary>
            Set Alternative Resource URL.
            An image URL. The image will be displayed when the blur effect is absent during turn-off. 
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.BlurView.AlphaMaskUrl">
            <summary>
            Set AlphaMask Resource Url
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.BlurView.AlternativeDimColor">
            <summary>
            Set Alternative Dim Color.
            The color will be displayed when the blur effect not supported case. 
            If user does not set dim color, then UX defined default color will be displayed not supported case.
            Not supported case 1. Lite model
            Not supported case 2. Multi view scenario
            Not supported case 3. Blur failed
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.BlurView.DimmingLevel">
            <summary>
            Set Blur Dimming Level.
            The original color is 1, and it gets darker as it goes to 0.
            The range is from 0.0 to 1.0. 
            Default value is 0.5.        
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.BlurView.ShowStoredCapture">
            <summary>
            Show stored capture result and pause blur and capture thread.
            </summary>
            <remarks>
            It is not common feature. It is eden ux scenario dependent.
            </remarks>
            <version> 10.10.1 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxImageView">
            <summary>
            FluxView is the base class for all views in FLUX Application
            </summary>
            <code>
            FluxImageView = new FluxImageView();
            FluxImageView.UnitPosition = new UnitPosition(50, 50);
            FluxImageView.UnitSizeWidth = 50;
            FluxImageView.UnitSizeHeight = 50;
            FluxImageView.BackgroundColor = Color.Red;
            </code>
            <summary>
            FluxView is the base class for all views in FLUX Application
            </summary>
            <code>
            FluxImageView = new FluxImageView();
            FluxImageView.UnitPosition = new UnitPosition(50, 50);
            FluxImageView.UnitSizeWidth = 50;
            FluxImageView.UnitSizeHeight = 50;
            FluxImageView.BackgroundColor = Color.Red;
            </code>
            <deprecated>
            Deprecated since 10.10.0. Use ImageBox instead.
            </deprecated>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.ResourceUrlProperty">
            <summary>
            ResourceUrl Property, Even if not set or null set, it sets empty string ("") internally.
            When it is set as null, it gives empty string ("") to be read.
            </summary>
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.ImageProperty">
            <summary>
            IMAGE Property.
            </summary>
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.PreMultipliedAlphaProperty">
            <summary>
            PreMultipliedAlpha Property.
            </summary>
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.PixelAreaProperty">
            <summary>
             PixelArea Property.
            </summary>
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.BorderProperty">
            <summary>
             Border Property.
            </summary>
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.BorderOnlyProperty">
            <summary>
            BorderOnly Property.
            </summary>
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.SynchronosLoadingProperty">
            <summary>
            SynchronosLoading Property.
            </summary>
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.OrientationCorrectionProperty">
            <summary>
            OrientationCorrection Property.
            </summary>
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.#cctor">
            <summary>
            It is called automatically before the first instance is created or any static members are referenced.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.#ctor">
            <summary>
            Creates an initialized FluxImageView.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.#ctor(System.Boolean)">
            <summary>
            Creates an initialized FluxImageView with setting the status of shown or hidden.
            </summary>
            <param name="shown">false : Not displayed (hidden), true : displayed (shown)</param>
            This will be public opened in next release of tizen after ACR done. Before ACR, it is used as HiddenAPI (InhouseAPI).
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.#ctor(System.String)">
            <summary>
            Creates an initialized FluxImageView from a URL to an image resource.<br />
            If the string is empty, FluxImageView will not display anything.<br />
            </summary>
            <param name="url">The URL of the image resource to display.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an initialized FluxImageView from a URL to an image resource with setting shown or hidden.
            </summary>
            <param name="url">The URL of the image resource to display.</param>
            <param name="shown">false : Not displayed (hidden), true : displayed (shown)</param>
            This will be public opened in next release of tizen after ACR done. Before ACR, it is used as HiddenAPI (InhouseAPI).
        </member>
        <member name="E:Tizen.NUI.FLUX.FluxImageView.ResourceReady">
            <summary>
            An event for ResourceReady signal which can be used to subscribe or unsubscribe the event handler.<br />
            This signal is emitted after all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxImageView.LoadingStatusType">
            <summary>
            Enumeration for LoadingStatus of image.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.LoadingStatusType.Preparing">
            <summary>
            Loading preparing status.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.LoadingStatusType.Ready">
            <summary>
            Loading ready status.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.LoadingStatusType.Failed">
            <summary>
            Loading failed status.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.ResourceUrl">
            <summary>
            FluxImageView ResourceUrl, type string.
            This is one of mandatory property. Even if not set or null set, it sets empty string ("") internally.
            When it is set as null, it gives empty string ("") to be read.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.Image">
            <summary>
            FluxImageView Image, type PropertyMap
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.PreMultipliedAlpha">
            <summary>
            FluxImageView PreMultipliedAlpha, type Boolean.<br />
            Image must be initialized.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.Border">
            <summary>
            The border of the image in the order: left, right, bottom, top.<br />
            If set, ImageMap will be ignored.<br />
            For N-Patch images only.<br />
            Optional.
            </summary>
            <remarks>
            The property cascade chaining set is possible. For example, this (imageView.Border.X = 1;) is possible.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.BorderOnly">
            <summary>
            Gets or sets whether to draw the borders only (if true).<br />
            If not specified, the default is false.<br />
            For N-Patch images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.SynchronousLoading">
            <summary>
            Gets or sets whether to synchronous loading the resourceurl of image.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.OrientationCorrection">
            <summary>
            Gets or sets whether to automatically correct the orientation of an image.<br />
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.LoadingStatus">
            <summary>
            Gets the loading state of the visual resource.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.DownCast(Tizen.NUI.BaseHandle)">
            <summary>
            Downcasts a handle to imageView handle.
            </summary>
            Please do not use! this will be deprecated!
            Instead please use as keyword.
            <param name="handle">BaseHandle</param>
            <returns>FluxImageView</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.SetImage(System.String)">
            <summary>
            Sets this FluxImageView from the given URL.<br />
            If the URL is empty, FluxImageView will not display anything.<br />
            </summary>
            <param name="url">The URL to the image resource to display.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.IsResourceReady">
            <summary>
            Queries if all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            True if the resources are loaded and ready, false otherwise.<br />
            </summary>
            <returns>true if all resource needed by a control is ready</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.Reload">
            <summary>
            Forcefully reloads the image. All the visuals using this image will reload to the latest image.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.Play">
            <summary>
            Plays the animated GIF. This is also the default playback mode.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.Pause">
            <summary>
            Pauses the animated GIF.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.Stop">
            <summary>
            Stops the animated GIF.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.AlphaMaskURL">
            <summary>
            Gets or sets the URL of the alpha mask.<br />
            Optional.
            </summary>
            <since_tizen> 6</since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.CropToMask">
            <summary>
             Whether to crop image to mask or scale mask to fit image.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.FittingMode">
            <summary>
            Gets or sets fitting options used when resizing images to fit the desired dimensions.<br />
            If not supplied, the default is FittingModeType.ShrinkToFit.<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.DesiredWidth">
            <summary>
            Gets or sets the desired image width.<br />
            If not specified, the actual image width is used.<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.DesiredHeight">
            <summary>
            Gets or sets the desired image height.<br />
            If not specified, the actual image height is used.<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.WrapModeU">
            <summary>
            Gets or sets the wrap mode for the u coordinate.<br />
            It decides how the texture should be sampled when the u coordinate exceeds the range of 0.0 to 1.0.<br />
            If not specified, the default is WrapModeType.Default(CLAMP).<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.WrapModeV">
            <summary>
            Gets or sets the wrap mode for the v coordinate.<br />
            It decides how the texture should be sampled when the v coordinate exceeds the range of 0.0 to 1.0.<br />
            The first two elements indicate the top-left position of the area, and the last two elements are the areas of the width and the height respectively.<br />
            If not specified, the default is WrapModeType.Default(CLAMP).<br />
            For normal quad images only.
            Optional.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release Native Handle
            </summary>
            <param name="swigCPtr">HandleRef object holding corresponding native pointer.</param>
            <version>9.9.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxImageView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxImageView.ResourceReadyEventArgs">
             <summary>
             Event arguments of resource ready.
             </summary>
             <code>
             FluxImageView fluxView = new FluxImageView();
             fluxView.ResourceReady += View_ResourceReady;
             ...
             ...
             private void View_ResourceReady(object sender, FluxImageView.ResourceReadyEventArgs e)
            {
                FluxImageView imageView = sender as FluxImageView;
                View view = e.View;
              }
             </code>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxImageView.ResourceReadyEventArgs.View">
            <summary>
            The view whose resource is ready.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.ImageType.Normal">
            <summary>
            For Normal Image.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.ImageType.Specific">
            <summary>
            For normal image, with synchronous loading and orientation correction property
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxImageView.ImageType.Npatch">
            <summary>
            For nine-patch image
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxView">
            <summary>
            FluxView is the base class for all views in FLUX Application
            </summary>
            <code>
            view = new FluxView();
            view.UnitPosition = new UnitPosition(50, 50);
            view.UnitSizeWidth = 50;
            view.UnitSizeHeight = 50;
            view.BackgroundColor = Color.Red;
            </code>
            <summary>
            FluxView is the base class for all views in FLUX Application
            </summary>
            <code>
            view = new FluxView();
            view.UnitPositionX = 50;
            view.UnitPositionY = 50;
            view.UnitSizeWidth = 50;
            view.UnitSizeHeight = 50;
            view.BackgroundColor = Color.Red;
            </code>
            <summary>
            FluxView is the base class for all views in FLUX Application
            </summary>
            <code>
            view = new FluxView();
            view.UnitPosition = new UnitPosition(50, 50);
            view.UnitSizeWidth = 50;
            view.UnitSizeHeight = 50;
            view.BackgroundColor = Color.Red;
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.LayoutParamProperty">
            <summary>
            BindablePoperty for LayoutParam, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.UnitSizeProperty">
            <summary>
            BindablePoperty for UnitSize, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.UnitSizeWidthProperty">
            <summary>
            BindablePoperty for UnitSizeWidth, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.UnitSizeHeightProperty">
            <summary>
            BindablePoperty for UnitSizeHeight, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.UnitPositionProperty">
            <summary>
            BindablePoperty for UnitPosition, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.UnitPositionXProperty">
            <summary>
            BindablePoperty for UnitPositionX, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.UnitPositionYProperty">
            <summary>
            BindablePoperty for UnitPositionY, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.UnitMarginProperty">
            <summary>
            BindablePoperty for UnitMargin, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.MaximumUnitSizeProperty">
            <summary>
            BindablePoperty for MaximumUnitSize, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.MinimumUnitSizeProperty">
            <summary>
            BindablePoperty for MinimumUnitSize, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.BorderWidthProperty">
            <summary>
            BindablePoperty for BorderWith, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.BorderColorProperty">
            <summary>
            BindablePoperty for BorderColor, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.UIDirectionProperty">
            <summary>
            BindablePoperty for UIDirection, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.FluxView.InheritUIDirectionProperty">
            <summary>
            BindablePoperty for UIDirection, it's used as an argument of SetBinding API to bind a value to FluxView object.
            This property need to be hidden as inhouse API.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxView.#ctor">
            <summary>
            Unit coordinate base View system
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.FluxView.UIDirectionChangedEvent">
            <summary>
            UI direction changed event handler, user can add/remove
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.LayoutParam">
            <summary>
            LayoutParam set, get property
            </summary>       
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.UnitSize">
            <summary>
            Unit size set, get property
            </summary>       
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.UnitSizeWidth">
            <summary>
            Unit size width set, get property
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.UnitSizeHeight">
            <summary>
            Unit size height set, get property
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.UnitPosition">
            <summary>
            Unit position set, get property
            </summary>       
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.UnitPositionX">
            <summary>
            Unit position X set, get property
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.UnitPositionY">
            <summary>
            Unit position Y set, get property
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.UnitMargin">
            <summary>
            Unit margin set, get property
            </summary>       
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.MaximumUnitSize">
            <summary>
            Gets or sets the maximum unit size of the fluxview for layout
            </summary>       
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.MinimumUnitSize">
            <summary>
            Gets or sets the minimum unit size of the fluxview for layout
            </summary>      
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.BorderWidth">
            <summary>
            Set the Outline width
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.BorderColor">
            <summary>
            Set the Border color
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.InheritUIDirection">
            <summary>
            Inherit UI Direction from parent.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.UIDirection">
            <summary>
            get/set UI direction
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxView.SetUnitPosition(System.Int32,System.Int32)">
            <summary>
            Method to set the unit position 
            </summary>
            <param name="x">unit X</param>
            <param name="y">unit Y</param>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxView.SetUnitSize(System.Int32,System.Int32)">
            <summary>
            Method to set the unit size 
            </summary>
            <param name="width">unit width</param>
            <param name="height">unit height</param>
            <version>10.10.0</version>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxView.DirectionChangedEventArgs">
            <summary>
            UI direction changed event argument
            </summary>
            <code>
            FluxView view = new FluxView();
            view.UIDirectionChangedEvent += OnUIDirectionChagned;
            
            private void OnUIDirectionChagned(object sender, DirectionChangedEventArgs e)
            {
               Log.Error(""TV.FLUX.Example","# e.ParentUIDirection: " + e.ParentUIDirection + " e.OwnUIDirection: " + e.OwnUIDirection);
            }
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxView.DirectionChangedEventArgs.#ctor(Tizen.NUI.FLUX.UIDirection,Tizen.NUI.FLUX.UIDirection)">
            <summary>
            constructor
            </summary>
            <param name="parentUIDirection"> parent object's UI direction </param>
            <param name="ownUIDirection"> it's own UI direction </param>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.DirectionChangedEventArgs.ParentUIDirection">
            <summary>
            get ui direction of parent object
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.DirectionChangedEventArgs.OwnUIDirection">
            <summary>
            get ui direction of own object
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxView.SetColorByPropertyInternal(System.String,Tizen.NUI.Color)">
            <summary>
            Set Color using string property name. 
            This is internal method. Don't use this 
            </summary>
            <param name="property">The target property name.</param>
            <param name="color">The color value.</param>
            <returns> if success then return true </returns>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Function to clean up unmanaged resources.
            </summary>
            <param name="type">Disposing type</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxView.UpdateOutline">
            <summary>
            Update BorderRenderer properties
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.Position">
            *********************** Don't use ******************************///
            <summary>
            Gets or sets the base Position of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.Position2D">
            <summary>
            Gets or sets the base Position2D of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.Size">
            <summary>
            Gets or sets the base Size of the fluxview for layout 
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.Size2D">
            <summary>
            Gets or sets the base Size2D of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.WorldPosition">
            <summary>
            Gets the base WorldPosition of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.CurrentPosition">
            <summary>
            Gets the base CurrentPosition of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.ScreenPosition">
            <summary>
            Gets the base ScreenPosition of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.CurrentSize">
            <summary>
            Gets the base CurrentSize of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.NaturalSize">
            <summary>
            Gets the base NaturalSize of the fluxview for layout 
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.NaturalSize2D">
            <summary>
            Gets the base NaturalSize2D of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.PositionX">
            <summary>
            Gets or sets the base PositionX of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.PositionY">
            <summary>
            Gets or sets the base PositionY of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.PositionZ">
            <summary>
            Gets or sets the base PositionZ of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.SizeWidth">
            <summary>
            Gets or sets the base size width of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.SizeHeight">
            <summary>
            Gets or sets the base size height of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.MaximumSize">
            <summary>
            Gets or sets the base maximum size of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.MinimumSize">
            <summary>
            Gets or sets the base minimum size of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.Margin">
            <summary>
            Gets or sets the base margin of the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.Padding">
            <summary>
            Gets or sets the base padding value for the fluxview for layout
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.PositionUsesPivotPoint">
            <summary>
            Gets or sets the base PositionUsesPivotPoint of the fluxview for layout
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.PivotPoint">
            <summary>
            Gets or sets the base PivotPoint of the fluxview for layout
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.Scale">
            <summary>
            Gets or sets the base Scale of the fluxview for layout
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.ScaleX">
            <summary>
            Gets or sets the base ScaleX of the fluxview for layout
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.ScaleY">
            <summary>
            Gets or sets the base ScaleY of the fluxview for layout
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxView.ScaleZ">
            <summary>
            Gets or sets the base ScaleZ of the fluxview for layout
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.GLSurfaceView">
            <summary>
            GLSurfaceView allows user OpenGL rendering in separate Thread.
            </summary>
            <code>
            Implement Renderer Interface 
            class Renderer : IGLSurfaceViewRenderer
            {
                public void Initialize(uint width, uint height){}
                public void Draw(){ }
                public void Terminate(){}
            }
            
            Create GLSurfaceView
            glSurfaceView = new GLSurfaceView(800, 800);
            Renderer rend = new Renderer();
            glSurfaceView.SetRenderer(rend);
            glSurfaceView.RenderingMode = RenderMode.Continuous;
            glSurfaceView.GLContentResizingMode = GLContentResizeMode.Static;
            parent.Add(glSurfaceView);
            
            </code>
            <summary>
            GLSurfaceView allows user OpenGL rendering in separate Thread.
            </summary>
            <code>
            Implement Renderer Interface 
            class Renderer : IGLSurfaceViewRenderer
            {
                public void Initialize(uint width, uint height){}
                public void Draw(){ }
                public void Terminate(){}
            }
            
            Create GLSurfaceView
            glSurfaceView = new GLSurfaceView(800, 800);
            Renderer rend = new Renderer();
            glSurfaceView.SetRenderer(rend);
            glSurfaceView.RenderingMode = RenderMode.Continuous;
            glSurfaceView.GLContentResizingMode = GLContentResizeMode.Static;
            parent.Add(glSurfaceView);
            
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.GLSurfaceView.RenderingModeProperty">
            <summary>
            BindableProperty for RenderingMode, it's used as an argument of SetBinding API to bind a value to GLSurfaceView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.GLSurfaceView.GLContentResizingModeProperty">
            <summary>
            BindableProperty for GL Content Resizing Mode, it's used as an argument of SetBinding API to bind a value to GLSurfaceView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="T:Tizen.NUI.FLUX.GLSurfaceView.RenderMode">
            <summary>
            Supported Rendering Mode.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.GLSurfaceView.RenderMode.Continuous">
            <summary>
            Continuous Mode. if set, GLDraw callback is called repeatedly.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.GLSurfaceView.RenderMode.OnDemand">
            <summary>
            OnDemand Mode, if set, GLDraw callback is called when requestRender() is called
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.GLSurfaceView.GLContentResizeMode">
            <summary>
            Enumeration for GL Content resize mode
            </summary>
            <version>9.9.0</version>
        </member>
        <member name="F:Tizen.NUI.FLUX.GLSurfaceView.GLContentResizeMode.Static">
            <summary>
            GLContent size is fixed to the first created size and filled with the actor size.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FLUX.GLSurfaceView.GLContentResizeMode.Dynamic">
            <summary>
            GLContent size is dynmaically changed according to the actor size. 
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceView.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates GLSurfaceView.
            <param name = "surfaceWidth">surfaceWidth</param>
            <param name = "surfaceHeight">surfaceHeight</param>
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.GLSurfaceView.RenderingMode">
            <summary>
            RenderingMode.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.GLSurfaceView.GLContentResizingMode">
            <summary>
            GLContentResizingMode property
            </summary>
            <version>9.9.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceView.SetRenderer(Tizen.NUI.FLUX.IGLSurfaceViewRenderer)">
            <summary>
            Set the renderer to the view. It provide interfaces for OpenGL rendering.
            Note. Renderer need to be set, before RequestRender(), RenderingMode()
            </summary>
            <param name = "renderer"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceView.RequestRender">
            <summary>
             Request render frame on demand.
             This method is typically used when the render mode has been set to OnDemand.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceView.StartSynchronizedUpdate(System.Int32)">
            <summary>
            Start synchronized update.
            <remarks> It should be pair with GLsurfaceViewBaseRenderer.EndSynchronizedUpdate </remarks>
            </summary>
            <version> 9.9.0 </version>
            <param name="timeoutMilliseconds"> timeout value for synchronized update </param>
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceView.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release Native Handle
            </summary>
            <param name="swigCPtr">HandleRef object holding corresponding native pointer.</param>
            <version>9.9.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.GLSurfaceView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Cleaning up managed and unmanaged resources 
            </summary>
            <param name = "type">Disposing type</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.VideoCanvasView">
            <summary>
            This is VideoCanvasView which enables user to drill a transparent hole in window. 
            </summary>
            <code>
            videocanvasView = new VideoCanvasView();
            videocanvasView.Size2D = new Size2D(400, 300);
            videocanvasView.Position = new Position(100, 100, 0);    
            Window.Instance.GetDefaultLayer().Add(canvasView);    
            </code>
            <summary>
            This is VideoCanvasView which enables user to drill a transparent hole in window. 
            </summary>
            <code>
            videocanvasView = new VideoCanvasView();
            videocanvasView.Size2D = new Size2D(400, 300);
            videocanvasView.Position = new Position(100, 100, 0);    
            Window.Instance.GetDefaultLayer().Add(canvasView);    
            </code>
        </member>
        <member name="F:Tizen.NUI.FLUX.VideoCanvasView.CornerRadiusProperty">
            <summary>
            BindableProperty for CornerRadius, it's used as an argument of SetBinding API to bind a value to VideoCanvasView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.#ctor">
            <summary>
            Creates an initialized VideoView.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoCanvasView.CornerRadius">
            <summary>
            Gets or sets corner radius to VideoCanvasView.
            The order for the 4 corner radius to be provided is Vector4(topLeft, topRight, bottomRight, bottomLeft). 
            Current limitation - If any corner radius is given greater than or equal to width/2 or height/2 of VideoCanvas view,
            all 4 corner radius will be changed to MINIMUM(WIDTH/2, HEIGHT/2).
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoCanvasView.DisableAutoUpdateVideoGeometry">
            <summary>
            Gets or sets disableAutoUpdateVideoGeometry to VideoCanvasView.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoCanvasView.DisableAutoUpdateWindowInformation">
            <summary>
            Gets or sets disableAutoUpdateWindowInformation to VideoCanvasView.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoCanvasView.AsynchronousPlayerUpdate">
            <summary>
            Gets or sets player information(Geometry/Attribute) update asynchronously.
            It is supported only when the player supports asynchronous update.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.ForceUpdateVideoGeometry(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update video screen geometry forcefully
            </summary>
            <param name="x">pixel based screen position of x </param>
            <param name="y">pixel based screen position of y</param>
            <param name="width">pixel based screen size of width</param>
            <param name="height">pixel based screen size of height</param>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.ForceUpdateWindowInformation">
            <summary>
            Update window information forcefully
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.SetPlayer(Tizen.NUI.FLUX.IVideoWindowControl)">
            <summary>
            Set VideoWindowControl instance to VideoCanvasView.
            </summary>
            <param name = "videoWindowControl">IVideoWindowControl Instance</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release Native Handle
            </summary>
            <param name="swigCPtr">HandleRef object holding corresponding native pointer.</param>
            <version>9.9.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Function to clean up unmanaged resources.
            </summary>
            <param name = "type">Caller</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.Pause">
            <summary>
            Pause updating VideoCanvasView Rect
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.Resume">
            <summary>
            Resume updating VideoCanvasView Rect
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.IsPaused">
            <summary>
            Determines whether the VideoCanvasView is paused
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoCanvasView.ForceUpdateRectOnce">
            <summary>
            Forcibly updates geometry of VideoCanvasView
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.VideoImageView">
            <summary>
            This is VideoImageView which allows user to do video texturing. 
            </summary>
            <code>
            videoImageView = new VideoImageView();
            videoImageView.Size2D = new Size2D(400, 300);
            videoImageView.Position = new Position(100, 100, 0);  
            mPlayer = new Player();
            mPlayer.SetSource(new MediaUriSource("The_Power_of_Teamwork.mp4"));
            mPlayer.PrepareAsync().Wait();
            videoView.SetPlayerHandle(mPlayer.GetType(), mPlayer.Handle);
            </code>
            <code>
            videoImageViewTVPlayer = new VideoImageView()
            videoImageViewTVPlayer.SetBuiltinPlayer(PlayerType.TVPLAYER);
            videoImageViewTVPlayer.HorizontalFlip = true;
            videoImageViewTVPlayer.VerticalFlip = true;
            </code> 
            <summary>
            This is VideoImageView which allows user to do video texturing. 
            </summary>
            <code>
            videoImageView = new VideoImageView();
            videoImageView.Size2D = new Size2D(400, 300);
            videoImageView.Position = new Position(100, 100, 0);  
            mPlayer = new Player();
            mPlayer.SetSource(new MediaUriSource("The_Power_of_Teamwork.mp4"));
            mPlayer.PrepareAsync().Wait();
            videoView.SetPlayerHandle(mPlayer.GetType(), mPlayer.Handle);
            </code>
            <code>
            videoImageViewTVPlayer = new VideoImageView()
            videoImageViewTVPlayer.SetBuiltinPlayer(PlayerType.TVPLAYER);
            videoImageViewTVPlayer.HorizontalFlip = true;
            videoImageViewTVPlayer.VerticalFlip = true;
            </code> 
        </member>
        <member name="F:Tizen.NUI.FLUX.VideoImageView.HorizontalFlipProperty">
            <summary>
            BindableProperty for HorizontalFlip, it's used as an argument of SetBinding API to bind a value to VideoImageView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="F:Tizen.NUI.FLUX.VideoImageView.VerticalFlipProperty">
            <summary>
            BindableProperty for VerticalFlip, it's used as an argument of SetBinding API to bind a value to VideoImageView object
            This property need to be hidden as inhouse API.
            </summary>
            <version>
            9.9.0
            </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoImageView.#ctor">
            <summary>
            Creates an initialized VideoView.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoImageView.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release Native Handle
            </summary>
            <param name="swigCPtr">HandleRef object holding corresponding native pointer.</param>
            <version>9.9.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoImageView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Cleaning up managed and unmanaged resources 
            </summary>
            <param name = "type">Disposing type</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoImageView.SetPlayerHandle(System.Type,System.IntPtr)">
            <summary>
            Set Player native handle.
            </summary>
            <param name = "type">Player type</param>
            <param name = "player">Player handle</param>
            <exception cref = 'T:System.ArgumentNullException'> Player handle is null. You should set valid Player handle </exception>
            <exception cref = 'T:System.ArgumentException'> Agruments is not valid. </exception>
        </member>
        <member name="M:Tizen.NUI.FLUX.VideoImageView.UnSetPlayerHandle">
            <summary>
            Unset the player handle if already set
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoImageView.HorizontalFlip">
            <summary>
            Property to Enable/Disable Horizontal Flip
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.VideoImageView.VerticalFlip">
            <summary>
            Property to Enable/Disable Vertical Flip
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxWidgetView">
            <summary>
            The WidgetView is a class for displaying the widget image and controlling the widget.
            </summary>
            <code>
            FluxWidgetView fluxWidgetView = FluxWidgetViewManager.Instance.AddWidget(WidgetAppID, new UnitSize(40, 40), 1000);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetView.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            FluxWidgetView fluxWidgetView = FluxWidgetViewManager.Instance.AddWidget(WidgetAppID, new UnitSize(40, 40), 1000);
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.FluxWidgetView.WidgetAdded">
            <summary>
            An event for the WidgetAdded signal which can be used to subscribe or unsubscribe the event handler.
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.FluxWidgetView.WidgetContentUpdated">
            <summary>
            An event for the WidgetContentUpdated signal which can be used to subscribe or unsubscribe the event handler.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="E:Tizen.NUI.FLUX.FluxWidgetView.WidgetDeleted">
            <summary>
            An event for the WidgetDeleted signal which can be used to subscribe or unsubscribe the event handler.
            </summary>
        </member>
        <member name="E:Tizen.NUI.FLUX.FluxWidgetView.WidgetCreationAborted">
            <summary>
            An event for the WidgetCreationAborted signal which can be used to subscribe or unsubscribe the event handler.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="E:Tizen.NUI.FLUX.FluxWidgetView.WidgetUpdatePeriodChanged">
            <summary>
            An event for the WidgetUpdatePeriodChanged signal which can be used to subscribe or unsubscribe the event handler.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="E:Tizen.NUI.FLUX.FluxWidgetView.WidgetFaulted">
            <summary>
            An event for the WidgetFaulted signal which can be used to subscribe or unsubscribe the event handler.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetView.PauseWidget">
            <summary>
            Pauses a given widget.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetView.ResumeWidget">
            <summary>
            Resumes a given widget.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetView.CancelTouchEvent">
            <summary>
            Cancels the touch event procedure.
            If you call this function after feed the touch down event, the widget will get ON_HOLD events.
            If a widget gets ON_HOLD event, it will not do anything even if you feed touch up event.
            </summary>
            <returns>True on success, false otherwise.</returns>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetView.ActivateFaultedWidget">
            <summary>
            Activates a widget in the faulted state.
            A widget in faulted state must be activated before adding the widget.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetView.TerminateWidget">
            <summary>
            Terminate a widget instance.
            </summary>
            <deprecated> Deprecated since 9.9.0. Use FluxWidgetViewManager.Instance.RemoveWidget instead.</deprecated>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.WidgetID">
            <summary>
            Gets the ID of the widget.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.InstanceID">
            <summary>
            Gets the ID of the instance.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.ContentInfo">
            <summary>
            Gets the content info.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.Title">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.UpdatePeriod">
            <summary>
            Gets the update period.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.EnabledPreview">
            <summary>
            Gets or sets whether to set the preview.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.EnabledLoadingText">
            <summary>
            Gets or sets whether to set the loading text.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.WidgetStateFaulted">
            <summary>
            Gets or sets whether the widget state is faulted or not.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.PermanentDelete">
            <summary>
            Gets or sets whether the widget is to delete permanently or not.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.RetryText">
            <summary>
            Gets or sets retry text.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.Effect">
            <summary>
            Gets or sets effect.
            </summary>
            <version>10.10.0</version>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxWidgetView.WidgetViewEventArgs">
            <summary>
            Event arguments of the widget view.
            </summary>
            <code>
            WidgetViewEventArgs e = new WidgetViewEventArgs();
            string str = e.ToString();
            </code>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetView.WidgetViewEventArgs.FluxWidgetView">
            <summary>
            The widet view.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetView.WidgetViewEventArgs.#ctor(Tizen.NUI.FLUX.FluxWidgetView)">
            <summary>
            Constructor for WidgetViewEventArgs.
            </summary>
            <version> 10.10.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetView.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release Native Handle
            </summary>        
            <param name="swigCPtr">HandleRef object holding corresponding native pointer.</param>
            <version>9.9.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To make the FluxWidgetView instance be disposed.
            </summary>
            <param name="type">Disposing type</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.MultiShadowView">
            <summary>
            MultiShadowView shows one or more shadows of its child
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.MultiShadowView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.MultiShadowView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Function to clean up unmanaged resources.
            </summary>
            <param name="type">Disposing type</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.MultiShadowView.DynamicShadowPropertyChanged(Tizen.NUI.FLUX.DynamicShadow,System.String)">
            <summary>
            Function called when any Property of DynamicShadow is changed
            </summary>
            <param name="shadow"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Tizen.NUI.FLUX.MultiShadowView.AddShadow(Tizen.NUI.FLUX.DynamicShadow)">
            <summary>
            Add shadow
            Must call ActivateShadows after AddShadow to show shadow
            </summary>
            <param name="shadow">Shadow to be added</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.MultiShadowView.RemoveShadow(Tizen.NUI.FLUX.DynamicShadow)">
            <summary>
            Remove the passed shadow.
            </summary>
            <param name="shadow">Shadow to be removed. If null remove alll shadows</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.MultiShadowView.ActivateShadows">
            <summary>
            Show all the shadows added before this API is called.
            All the resources required for shadow rendering are allocated.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.MultiShadowView.DeactivateShadows">
            <summary>
            Hide Shadows
            This API hides the shadow and deallocates all its resources.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.VectorPrimitiveView">
            <summary>
            VectorPrimitiveView is a class for displaying a vector primitives.
            </summary>
            <code>
            vectorPrimitiveView = new VectorPrimitiveView();
            vectorPrimitiveView.Size2D = new Size2D(100, 100);
            Stroke strokeStyle = new Stroke(new SolidColor(Color.Red), 1);
            Fill fillStyle = new Fill(new SolidColor(Color.Blue));
            RectShape rectShape = new RectShape(strokeStyle, fillStyle);
            vectorPrimitiveView.SetShape(rectShape);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.VectorPrimitiveView.SetShape(Tizen.NUI.FLUX.Shape)">
            <summary>
            Set a shape to Vector View. ( Previously added shapes will be removed )
            </summary>
            <param name="shape">Shape set to the Vector view</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.VectorPrimitiveView.Draw(Tizen.NUI.FLUX.Shape)">
            <summary>
            Draws the Canvas. Will be called from Cairo thread
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.VectorView">
            <summary>
            VectorView is a abstract class for displaying a vector primitives.
            </summary>
            <code>
            vectorPrimitiveView = new VectorPrimitiveView();
            vectorPrimitiveView.Size2D = new Size2D(100, 100);
            Stroke strokeStyle = new Stroke(new SolidColor(Color.Red), 1);
            Fill fillStyle = new Fill(new SolidColor(Color.Blue));
            RectShape rectShape = new RectShape(strokeStyle, fillStyle);
            vectorPrimitiveView.SetShape(rectShape);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.VectorView.#ctor">
            <summary>
            Construct an VectorCanvasView.
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.VectorView.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release Native Handle
            </summary>
            <param name="swigCPtr">HandleRef object holding corresponding native pointer.</param>
            <version>9.9.0</version>
        </member>
        <member name="M:Tizen.NUI.FLUX.VectorView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Cleaning up managed and unmanaged resources
            </summary>
            <param name="type">Disposing type</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.VectorView.SetShape(Tizen.NUI.FLUX.Shape)">
            <summary>
            update VG Data native side to draw
            </summary>
            <param name="shape">Shape set to the Vector view</param>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxWidgetApplication">
            <summary>
            Represents an application that have UI screen. The FluxWidgetApplication class has a default stage.
            </summary>
            <code>
            class Program : FluxWidgetApplication
            {
            
            public Program(Type widgetType) : base(widgetType)
            {
            }
            
            protected override void OnCreate()
            {
               base.OnCreate();
            }
            
            static void Main(string[] args)
            {
               var app = new Program(typeof(MyWidget));
               app.Run(args);
            }
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetApplication.#ctor(System.Type)">
            <summary>
            The default constructor.
            </summary>
            <remarks>Widget ID will be replaced as the application ID.</remarks>
            <param name="widgetType">Derived widget class type.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetApplication.#ctor(System.Collections.Generic.Dictionary{System.Type,System.String})">
            <summary>
            The constructor for multi widget class and instance.
            </summary>
            <param name="widgetTypes">List of derived widget class type.</param>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetApplication.OnPreCreate">
            <summary>
            Overrides this method if want to handle behavior before calling OnCreate().
            </summary>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetApplication.OnTerminate">
            <summary>
            Overrides this method if want to handle OnTerminate behavior.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FLUX.FluxWidgetViewManager">
            <summary>
            FluxWidgetViewManager manages addition of FluxWidgetView controls.
            This class provides the functionality of adding the widget views and controlling the widgets.
            </summary>
            <code>
            FluxWidgetView fluxWidgetView = FluxWidgetViewManager.Instance.AddWidget(WidgetAppID, new UnitSize(40, 40), 1000);
            </code>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetViewManager.#ctor">
            <summary>
            Creates a new FluxWidgetView manager object.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FLUX.FluxWidgetViewManager.Instance">
            <summary>
            Gets the singleton of the FluxWidgetViewManager object.
            </summary>
            <version> 9.9.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetViewManager.AddWidget(System.String,Tizen.NUI.FLUX.UnitSize,System.UInt32,System.String)">
            <summary>
            Creates a new FluxWidgetView object.
            </summary>
            <param name="widgetId">The widget ID.</param>
            <param name="unitSize">UnitSize of the widget.</param>
            <param name="updatePeriod">The period in milliseconds of updating contents of the widget. If 0 is set, the contents are not updated. Default value is 0.</param>
            <param name="contentInfo">Contents that will be given to the widget instance.</param>
            <returns>A handle to FluxWidgetView.</returns>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetViewManager.RemoveWidget(Tizen.NUI.FLUX.FluxWidgetView)">
            <summary>
            Remove a FluxWidgetView object.
            </summary>
            <param name="fluxWidgetView">widgetView to remove</param>
            <returns> True on success, false otherwise.</returns>
            <version> 9.9.0 </version>
        </member>
        <member name="M:Tizen.NUI.FLUX.FluxWidgetViewManager.ReleaseSwigCPtr(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Release Native Handle
            </summary>        
            <param name="swigCPtr">HandleRef object holding corresponding native pointer.</param>
            <version>9.9.0</version>
        </member>
    </members>
</doc>
